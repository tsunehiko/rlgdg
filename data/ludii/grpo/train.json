[
    {
        "problem": "<task>\n<query>\n<description>\nMonkey Queen is a two player game, played on a 12x12 checkboard.\n</description>\n<rules>\nThe two players take turns moving stacks of their own color (including singletons - stacks of height one), one stack per turn. Players will always have a move available and must make one. OBJECT OF THE GAME: Kill the enemy queen, or deprive your opponent of moves. The pie rule is used in Monkey Queen. Each player will always have exactly one queen monkey on the board which is a stack of two or more checkers all of the player's own color. Additionally, each player may have one or more baby monkeys on the board which are singletons of his own color. CAPTURING QUEEN MOVES - A monkey queen captures exactly like a Chess queen. Slide the entire stack in any direction (horizontally, vertically or diagonally) along a straight sequence of unoccupied squares terminated by an enemy occupied square, and capture the enemy queen or baby by replacement. NOTE: A queen may not give birth to its own baby and kill an enemy baby in the same move. NOTE: A queen of height two may not make a non-capturing move. NON-CAPTURING QUEEN MOVES - When not capturing, a queen moves any distance in any one direction, exactly like a Chess queen, except it leaves its bottom checker behind on the originating square, reducing the stack height by one. The queen monkey has thus given birth to a baby monkey. CAPTURING BABY MOVES - A monkey baby, like a monkey queen, captures exactly like a Chess queen. Slide the baby (singleton) in any direction along a straight sequence of unoccupied squares terminated by an enemy occupied square, and capture the enemy queen or baby by replacement. NON-CAPTURING BABY MOVES - When not capturing, a baby must move toward the enemy queen in the following sense: The straight line distance between your baby and the enemy queen must be shortened by your move. NOTE: There's no requirement to make a kill in Monkey Queen.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Monkey Queen\"\n    (players 2)\n    (equipment\n        {\n            (board (square 12))\n            (piece \"Marker\"\n                (or\n                    {\n                        (move\n                            Slide\n                            (to\n                                if:(is Enemy (who at:(to)))\n                                (apply\n                                    if:(is Enemy (who at:(to)))\n                                    (remove (to) count:(size Stack at:(to)))\n                                )\n                            )\n                            stack:True\n                            (then\n                                (if\n                                    (< 1 (size Stack at:(last To)))\n                                    (set Value Mover (last To))\n                                )\n                            )\n                        )\n                        (if\n                            (< 2 (size Stack at:(from)))\n                            (move\n                                Slide\n                                stack:True\n                                (then\n                                    (and\n                                        (fromTo\n                                            (from (last To) level:0)\n                                            (to (last From))\n                                        )\n                                        (set Value Mover (last To))\n                                    )\n                                )\n                            )\n                        )\n                        (if\n                            (= 1 (size Stack at:(from)))\n                            (move\n                                Slide\n                                (between\n                                    if:(and\n                                        (<\n                                            (count\n                                                Steps\n                                                (to)\n                                                (value Player Next)\n                                            )\n                                            (count\n                                                Steps\n                                                (from)\n                                                (value Player Next)\n                                            )\n                                        )\n                                        (is Empty (between))\n                                    )\n                                )\n                            )\n                        )\n                    }\n                )\n            )\n        }\n    )\n    (rules\n        (meta (swap))\n        (start\n            {\n                (place Stack \"Marker1\" 6 count:20)\n                (place Stack \"Marker2\" 137 count:20)\n            }\n        )\n        (play (forEach Piece top:True))\n        (end\n            (if\n                (or\n                    (all\n                        Sites\n                        (sites Occupied by:Next)\n                        if:(= 1 (size Stack at:(site)))\n                    )\n                    (no Moves Next)\n                )\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<rules>\nThe goal is to capture the black queen with the white pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Capture the Queen\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Queen\"\n                Each\n                (move\n                    Slide\n                    (to if:(is Enemy (who at:(to))) (apply (remove (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Queen2\" coord:\"D8\")\n                (place \"Queen1\" {\"B1\" \"C1\" \"E1\" \"F1\"})\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Pieces P2) (result P2 Loss))\n                (if (= (count Moves) 100) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKing and Courtesan is a drawless two player army game where each player seeks to get their king into the enemy home square, or kill the enemy king. King and Courtesan was invented by Mark Steere in May 2022.\n</description>\n<rules>\nGOAL Get your king into the enemy home square, or kill the enemy king. MOVES Players make one move per turn, starting with Red. There are three possible types of moves, explained below. Players will always have a move available, and must make one. Passing is not allowed. NON-CAPTURING MOVES Kings and courtesans can move to an adjacent, unoccupied square in any of the three forward directions. CAPTURING MOVES Kings and courtesans can move to an adjacent, enemy occupied square in any of eight directions, capturing the enemy king or courtesan by replacement. EXCHANGE MOVE You can transfer the top checker of your king onto an adjacent, friendly courtesan in any of the three forward directions, thus exchanging king and courtesan. In the Ludii implementation, the king is controlled like this: To make an exchange move you must drag or click the top piece. To make a step/capture move, you must drag or click the bottom piece.\n</rules>\n</query>\n</task>",
        "solution": "(game \"King And Courtesan\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board (rotate 45 (square 6)))\n            (piece \"Disc\"\n                Each\n                (or\n                    {\n                        (move\n                            Step\n                            Forwards\n                            (to if:(is Empty (to)))\n                            stack:True\n                        )\n                        (move\n                            Step\n                            (to\n                                if:(is Enemy (who at:(to)))\n                                (apply\n                                    (and\n                                        (if\n                                            (= 2 (size Stack at:(to)))\n                                            (set Var \"NextLoss\" 1)\n                                        )\n                                        (remove\n                                            (to)\n                                            count:(size Stack at:(to))\n                                        )\n                                    )\n                                )\n                            )\n                            stack:True\n                        )\n                        (move\n                            Step\n                            (from if:(= 2 (size Stack at:(from))))\n                            Forwards\n                            (to if:(is Mover (who at:(to))))\n                        )\n                    }\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Disc1\"\n                    (expand (sites Bottom) steps:(- 6 2) Orthogonal)\n                )\n                (place \"Disc2\" (expand (sites Top) steps:(- 6 2) Orthogonal))\n                (place Stack \"Disc1\" (sites Bottom))\n                (place Stack \"Disc2\" (sites Top))\n            }\n        )\n        (play (forEach Piece top:True))\n        (end\n            {\n                (if (= 1 (var \"NextLoss\")) (result Next Loss))\n                (if\n                    (or\n                        (and\n                            (= (id P1) (who at:(- (* 6 6) 1)))\n                            (= 2 (size Stack at:(- (* 6 6) 1)))\n                        )\n                        (and (= (id P2) (who at:0)) (= 2 (size Stack at:0)))\n                    )\n                    (result Mover Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThe game is played on a 7x7 board.\n</description>\n<rules>\nMOVES - A move consists of either: - A growth, i.e., a drop of a stone on an empty adjacent (orthogonal or diagonal) to friendly cell; - An orthogonal or diagonal slide of a stone already on board (like a chess Queen) to an empty cell; - A drop of a stone on any empty cell. - Any opponent adjacent stones to the new piece (either through growth or slide) are flipped to the moving player's colour. Notice that the third option (simple drop) do not flip the colour of adjacent stones. GOAL - Wins the player with most stones when the board is filled.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Quad Wrangle\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Ball\"\n                Each\n                (move\n                    Slide\n                    (then\n                        (forEach\n                            Site\n                            (sites Around (last To))\n                            (if\n                                (is Enemy (who at:(site)))\n                                (and\n                                    (remove (site))\n                                    (add\n                                        (piece (id \"Ball\" Mover))\n                                        (to (site))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Ball1\"\n                    (difference\n                        (union (sites Top) (sites Right))\n                        (union\n                            {\n                                (sites Left)\n                                (sites Bottom)\n                                (intersection (sites Top) (sites Right))\n                            }\n                        )\n                    )\n                )\n                (place\n                    \"Ball2\"\n                    (difference\n                        (union (sites Bottom) (sites Left))\n                        (union\n                            {\n                                (sites Right)\n                                (sites Top)\n                                (intersection (sites Bottom) (sites Left))\n                            }\n                        )\n                    )\n                )\n            }\n        )\n        (play\n            (or\n                {\n                    (move\n                        Add\n                        (to (sites Around (sites Occupied by:Mover) Empty))\n                        (then\n                            (forEach\n                                Site\n                                (sites Around (last To))\n                                (if\n                                    (is Enemy (who at:(site)))\n                                    (and\n                                        (remove (site))\n                                        (add\n                                            (piece (id \"Ball\" Mover))\n                                            (to (site))\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                    (forEach Piece)\n                    (move\n                        Add\n                        (to\n                            (difference\n                                (sites Empty)\n                                (sites Around (sites Occupied by:Mover) Empty)\n                            )\n                        )\n                    )\n                }\n            )\n        )\n        (end\n            (if\n                (is Full)\n                (byScore\n                    {\n                        (score P1 (count Pieces P1))\n                        (score P2 (count Pieces P2))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game is played in a 5x10 square board.\n</description>\n<rules>\nMOVE - On each turn, a player may do one of the following actions: - Drop a friendly stone at an empty cell, which is in a diagonal line of sight with another friendly stone, i.e., both stones must be separated by a diagonal line of empty cells. - Transform an enemy stone, at a diagonal line of sight of a friendly stone, into a wall (which is a neutral stone). GOAL - When there are no valid moves, wins the player with more friendly stones.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Diagonals (2002)\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 10) use:Vertex)\n            (piece \"Ball\" Each)\n            (piece \"Ball\" Neutral)\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Ball1\"\n                    (intersection (expand (sites Bottom)) (sites Right))\n                )\n                (place\n                    \"Ball2\"\n                    (intersection (expand (sites Top)) (sites Left))\n                )\n            }\n        )\n        (play\n            (or\n                (move\n                    Add\n                    (to\n                        (intersection\n                            (sites\n                                Direction\n                                from:(sites Occupied by:Mover)\n                                Diagonal\n                                stop:(is Occupied (to))\n                            )\n                            (sites Empty)\n                        )\n                    )\n                )\n                (move\n                    Select\n                    (from\n                        (forEach\n                            (sites Occupied by:Next)\n                            if:(!=\n                                0\n                                (count\n                                    Sites\n                                    in:(intersection\n                                        (sites LineOfSight at:(site) Diagonal)\n                                        (sites Occupied by:Mover)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                    (then\n                        (and\n                            (remove (last To))\n                            (add (piece (id \"Ball\" Neutral)) (to (last To)))\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (and (no Moves P1) (no Moves P2))\n                (byScore\n                    {\n                        (score P1 (count Pieces P1))\n                        (score P2 (count Pieces P2))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nToono (Yurt's Roof) is a capturing game played in Mongolia. The shape of the board is said to resemble the roof of a yurt. The pieces jump three places on the board and capture a piece they land on.\n</description>\n<rules>\nTwo concentric circles, with two perpendicular diameters intersecting both circles, and four other lines, positioned diagonally, connecting the circumferences of the two circles. Six pieces per player. which begin on opposite sides of the circle from the other player, three on each circle. Players alternate turns moving their pieces. Pieces move three spaces along the lines on the board, regardless of whether they are occupied, capturing any piece on the third. Pieces may change direction in a turn, as long as the lines are followed and there is no backtracking. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Toono\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (concentric {1 0 8 8})\n                    edges:{ { 0 2} { 0 4 } { 0 6 } { 0 8 } }\n                )\n                use:Vertex\n            )\n            (piece \"Marker\"\n                Each\n                (move\n                    (from)\n                    (to\n                        (sites Distance from:(from) (exact 3))\n                        if:(not (is Friend (who at:(to))))\n                        (apply (if (is Enemy (who at:(to))) (remove (to))))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (difference\n                        (expand (sites Bottom) steps:2)\n                        (expand (sites Top) steps:2)\n                    )\n                )\n                (place\n                    \"Marker2\"\n                    (difference\n                        (expand (sites Top) steps:2)\n                        (expand (sites Bottom) steps:2)\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCrusade can be played on a 8x8 square board. In the initial position, all squares are occupied by a stone: white stones on the white squares and black stones on the black squares.\n</description>\n<rules>\nEach stone must move to any adjacent(orthogonal or diagonal) cell, which is occupied by an enemy stone. This stone is captured by replacement. After that, all adjacent enemy stones (orthogonal or diagonal) are converted to friendly ones. There are fewer and fewer stones on the board as the game proceeds, which is a major difference with Othello and Ataxx. The player which has more stones, after there is no valid move left, wins the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Crusade\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Ball\"\n                Each\n                (move\n                    Step\n                    (to if:(is Enemy (who at:(to))) (apply (remove (to))))\n                    (then\n                        (forEach\n                            Site\n                            (sites Around (last To))\n                            (if\n                                (is Enemy (who at:(site)))\n                                (and\n                                    (remove (site))\n                                    (add\n                                        (piece (id \"Ball\" Mover))\n                                        (to (site))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Ball1\" (sites Phase 1))\n                (place \"Ball2\" (sites Phase 0))\n            }\n        )\n        (play (forEach Piece))\n        (end\n            (if\n                (no Moves Next)\n                (byScore\n                    {\n                        (score P1 (count Pieces P1))\n                        (score P2 (count Pieces P2))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nJa-Jeon-Geo-Gonu is a Korean game of uncertain history.\n</description>\n<rules>\nPlayed on a board similar to Surakarta, but smaller. Players begin with four pieces, arranged in the square of spaces in their bottom right corner. Players take turns moving a piece to one adjacent spot. To capture an opponent's piece, you must move along the curved loops. The spot at the immediate end of the loop must be empty, but the piece may continue as far as the player wishes, including moving along successive loops, or until they make a capture or are stopped by their own piece.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ja-Jeon-Geo-Gonu\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (square 4)\n                {\n                    (track\n                        \"Track1\"\n                        {14 14 11 10 9 8 8 13 9 5 1 1 4 5 6 7 7 2 6 10}\n                        loop:True\n                        directed:True\n                    )\n                    (track\n                        \"Track2\"\n                        {11 11 14 10 6 2 2 7 6 5 4 4 1 5 9 13 13 8 9 10}\n                        loop:True\n                        directed:True\n                    )\n                }\n                use:Vertex\n            )\n            (piece \"Disc\"\n                Each\n                (or\n                    {\n                        (move Step Orthogonal (to if:(is Empty (to))))\n                        (move\n                            Slide\n                            \"AllTracks\"\n                            (between\n                                if:(or\n                                    (= (between) (from))\n                                    (is Empty (between))\n                                )\n                            )\n                            (to\n                                if:(is Enemy (who at:(to)))\n                                (apply if:False (remove (to)))\n                            )\n                        )\n                    }\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Disc1\" {\"A3\" \"B3\" \"A4\" \"B4\"})\n                (place \"Disc2\" {\"C1\" \"D1\" \"C2\" \"D2\"})\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\n'Add\u00ee K\u00fbl is a capturing game played in Tunisia by men. The board is typically made in the sand, and date seeds, stones, or camel droppings are used as pieces.\n</description>\n<rules>\n7x7 board. 21 pieces per player, which begin in the three rows closest to each player. The central row of the board remains empty. Players alternate turns moving one of their pieces forward, diagonally, or horizontally on the board. When a player's piece is next to an opponent's piece with an empty space immediately on the opposite side of it, the player's piece may hop over the opponent's piece to capture it. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Addi Kul\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board (square 7))\n            (piece \"Marker\"\n                Each\n                (or\n                    (move\n                        Step\n                        (directions { Rightward Leftward Forwards })\n                        (to if:(is Empty (to)))\n                    )\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (expand (sites Bottom) steps:2))\n                (place \"Marker2\" (expand (sites Top) steps:2))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAwangdu is a capturing game played in coastal West Africa in the mid-twentieth century. It is typically played with four players, two moving the pieces and two rolling the cowries.\n</description>\n<rules>\n5x12 board, played on the intersections of lines. Twelve pieces per player, arranged along the side of twelve closest to the player. Pieces move along a boustrophedon track, one player starting from left to right in their starting row and the other from right to left in their starting row. Moves are determined by the throw of six cowries: one mouth up = 1, two mouth up = 2, three mouths up = 3, four mouths up = 4, five mouths up = 1 (0 and 6 mouths up are not specified, but are between 10 and 20 and the move can be split to make captures). A player must roll 1 or (0 or 6) to begin. When a piece moves to a spot occupied by an opponent's piece, it is captured. The goal of the game is to reduce the other player to one or two pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Awangdu\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (rectangle 5 12)\n                {\n                    (track\n                        \"Track1\"\n                        \"0,E,N1,W,N1,E,N1,W,N1,E\"\n                        P1\n                        directed:True\n                    )\n                    (track\n                        \"Track2\"\n                        \"59,W,S1,E,S1,W,S1,E,S1,W\"\n                        P2\n                        directed:True\n                    )\n                }\n                use:Vertex\n            )\n            (dice d:2 from:0 num:6)\n            (piece \"Disc\"\n                Each\n                (if\n                    (not\n                        (is\n                            Friend\n                            (who at:(trackSite Move steps:(mapEntry (var))))\n                        )\n                    )\n                    (move\n                        (from)\n                        (to\n                            (trackSite Move steps:(mapEntry (var)))\n                            (apply\n                                (if (is Enemy (who at:(to))) (remove (to)))\n                            )\n                        )\n                    )\n                )\n            )\n            (map\n                {\n                    (pair 0 10)\n                    (pair 1 1)\n                    (pair 2 2)\n                    (pair 3 3)\n                    (pair 4 4)\n                    (pair 5 1)\n                    (pair 6 10)\n                }\n            )\n        }\n    )\n    (rules\n        (start { (place \"Disc1\" (sites Bottom)) (place \"Disc2\" (sites Top)) })\n        (play\n            (do\n                (roll)\n                next:(if\n                    (or\n                        (= (value Player Mover) 1)\n                        (is In (count Pips) (sites {0 1 5 6}))\n                    )\n                    (do\n                        (set Var (count Pips))\n                        next:(forEach\n                            Piece\n                            (then\n                                (if\n                                    (not (= (value Player Mover) 1))\n                                    (set Value Mover 1)\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSurakarta is purported to be from Java in Indonesia, but this claim may have been a marketing ploy by Ravensberger when the game was first published in Germany in 1971.\n</description>\n<rules>\nPlayed on a 6x6 board with corner loops. Each player has 12 pieces. Play is made on the intersections of the lines. pieces are captured by moving via the outer loops and occupying a space held by another player. The goal is to capture all of the opponent's pieces. If no further captures are possible, the player with the most remaining pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Surakarta\"\n    (players 2)\n    (equipment\n        {\n            (surakartaBoard (square 6))\n            (piece \"Marker\"\n                Each\n                (or\n                    {\n                        (move Step All (to if:(is Empty (to))))\n                        (move\n                            Slide\n                            \"AllTracks\"\n                            (between\n                                if:(or\n                                    (= (between) (from))\n                                    (is Empty (between))\n                                )\n                            )\n                            (to\n                                if:(is Enemy (who at:(to)))\n                                (apply if:False (remove (to)))\n                            )\n                            (then (set Counter))\n                        )\n                    }\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (expand (sites Bottom)))\n                (place \"Marker2\" (expand (sites Top)))\n            }\n        )\n        (play\n            (if\n                (is Proposed \"End\")\n                (or (move Vote \"End\") (move Vote \"No\" (then (set Counter))))\n                (or\n                    (if\n                        (>= (counter) 101)\n                        (move Propose \"End\" (then (vote \"End\")))\n                    )\n                    (forEach Piece)\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (is Decided \"End\")\n                    (byScore\n                        {\n                            (score P1 (count Pieces P1))\n                            (score P2 (count Pieces P2))\n                        }\n                    )\n                )\n                (if (no Pieces Next) (result Next Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFission is a game where players attempt to eliminate all of their opponents stones but must have at least one stone left on the board in order to win.\n</description>\n<rules>\nTURN - On each turn, each player slides (orthogonally or diagonally) a stone until it hits another stone or a wall. If it stops because of a stone, the moving stone and all adjacent stones (of either color) are removed. GOAL - The player with no stones onboard loses. The game is a draw if (i) the board becomes empty, or (ii) each player has just one stone, or (iii) the moving player has no valid moves.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Fission\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Ball\"\n                Each\n                (move\n                    (from (from))\n                    (to\n                        (sites LineOfSight Farthest at:(from))\n                        if:(not (is In (to) (sites Around (from))))\n                    )\n                    (then\n                        (if\n                            (!=\n                                (ahead\n                                    (last To)\n                                    (directions\n                                        Cell\n                                        from:(last From)\n                                        to:(last To)\n                                    )\n                                )\n                                (last To)\n                            )\n                            (remove (sites Around (last To) includeSelf:True))\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Ball1\"\n                    (intersection\n                        (sites Phase 1)\n                        (expand (sites Centre) steps:2 Orthogonal)\n                    )\n                )\n                (place\n                    \"Ball2\"\n                    (intersection\n                        (sites Phase 0)\n                        (expand (sites Centre) steps:2 Orthogonal)\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if\n                    (and (not (no Pieces Mover)) (no Pieces Next))\n                    (result Mover Win)\n                )\n                (if\n                    (or\n                        (no Moves Next)\n                        (and (= 1 (count Pieces P1)) (= 1 (count Pieces P2)))\n                    )\n                    (result Mover Draw)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nRampart is an annihilation game in which players grow a set number of groups attempting to capture the opponent's groups.\n</description>\n<rules>\n\n</rules>\n</query>\n</task>",
        "solution": "(game \"Rampart\"\n    (players 2)\n    (equipment\n        {\n            (board (square 13) use:Vertex)\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Disc1\"\n                    (forEach\n                        (sites Phase 0)\n                        if:(and\n                            {\n                                (is Even (row of:(site)))\n                                (!= 0 (% (site) 4))\n                                (= 0 (% (row of:(site)) 4))\n                            }\n                        )\n                    )\n                )\n                (place\n                    \"Disc2\"\n                    (forEach\n                        (sites Phase 0)\n                        if:(and\n                            {\n                                (is Even (row of:(site)))\n                                (!= 0 (% (site) 4))\n                                (= 2 (% (row of:(site)) 4))\n                            }\n                        )\n                    )\n                )\n            }\n        )\n        (play\n            (or\n                (move\n                    Add\n                    (to\n                        (sites\n                            Around\n                            (sites Occupied by:Mover)\n                            Empty\n                            Orthogonal\n                        )\n                    )\n                )\n                (move\n                    Select\n                    (from\n                        (sites Occupied by:Enemy)\n                        if:(not\n                            (all\n                                Sites\n                                (sites Group at:(from))\n                                if:(not\n                                    (and\n                                        (=\n                                            0\n                                            (count\n                                                Sites\n                                                in:(sites\n                                                    Around\n                                                    (site)\n                                                    Empty\n                                                    Orthogonal\n                                                )\n                                            )\n                                        )\n                                        (if\n                                            (>= 11 13)\n                                            (<\n                                                0\n                                                (count\n                                                    Sites\n                                                    in:(sites\n                                                        Around\n                                                        (site)\n                                                        Own\n                                                        Orthogonal\n                                                    )\n                                                )\n                                            )\n                                            True\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                    (then\n                        (forEach\n                            Site\n                            (sites Group at:(last From) Orthogonal)\n                            (remove (site))\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nA Chess-like battle between two alternating pieces.\n</description>\n<rules>\nOn each turn, each player must move one of his pieces. A soldier moves/captures to an orthogonal adjacent cell. A knight jumps one orthogonal cell and then to a diagonal at the same direction (like the chess Knight) into an empty cell, or into an enemy piece (capturing it). After the move, the moved piece changes status (the soldier becomes a knight, and vice versa). Wins the player that captures all enemy pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"NotChess\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Knight\"\n                (move\n                    Leap\n                    { { F F R F } { F F L F } }\n                    (to\n                        if:(not (is Friend (who at:(to))))\n                        (apply (if (is Enemy (who at:(to))) (remove (to))))\n                    )\n                    (then\n                        (and\n                            (remove (last To))\n                            (add (piece (id \"Pawn\" Mover)) (to (last To)))\n                        )\n                    )\n                )\n            )\n            (piece \"Pawn\"\n                (move\n                    Step\n                    Orthogonal\n                    (to\n                        if:(not (is Friend (who at:(to))))\n                        (apply (remove (to)))\n                    )\n                    (then\n                        (and\n                            (remove (last To))\n                            (add (piece (id \"Knight\" Mover)) (to (last To)))\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Pawn1\" (sites {\"C1\" \"E1\" \"G1\"}))\n                (place \"Knight1\" (sites {\"B1\" \"D1\" \"F1\"}))\n                (place \"Pawn2\" (sites {\"B8\" \"D8\" \"F8\"}))\n                (place \"Knight2\" (sites {\"C8\" \"E8\" \"G8\"}))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nIssiren is a capturing game with dice played in the Illizi region of Algeria by the Kel Ajjer Tuareg people.\n</description>\n<rules>\n4x12 board. Twelve pieces per player, which begin one in each space in the row closest to the player. Six stick dice, green on one side and white on the other. The value of the throws equals the number of green faces, with the following exceptions: four green faces up allows a piece to be moved for the first time and a move of 1, plus another throw is granted; six white faces = 4 plus another throw; six green = 6 plus another throw; five white faces = move 5 plus another throw. Pieces move from right to left in the player's home row, then into the second row, moving left to right, then into the third row moving right to left, and then into the opponent's home row moving left to right, then back into the third row moving right to left, to the second row moving left to right, and then back into the player's home row moving right to left. If a player's piece lands on a space occupied by one of the opponent's pieces, the opponent's piece is captured. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Issiren\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (rectangle 4 12)\n                {\n                    (track\n                        \"Track1\"\n                        \"11,W,N1,E,N1,W,N1,E,S1,W,S1,E\"\n                        loop:True\n                        P1\n                    )\n                    (track\n                        \"Track2\"\n                        \"36,E,S1,W,S1,E,S1,W,N1,E,N1,W\"\n                        loop:True\n                        P2\n                    )\n                }\n            )\n            (dice d:2 from:0 num:6)\n            (piece \"Marker\"\n                Each\n                (move\n                    (from\n                        (from)\n                        if:(if\n                            (= (state at:(from)) 0)\n                            True\n                            (= (mapEntry (count Pips)) 1)\n                        )\n                    )\n                    (to\n                        (trackSite Move steps:(mapEntry (count Pips)))\n                        if:(not (is Friend (who at:(to))))\n                        (apply (if (is Enemy (who at:(to))) (remove (to))))\n                    )\n                    (then\n                        (if\n                            (= 1 (state at:(last To)))\n                            (set State at:(last To) 0)\n                        )\n                    )\n                )\n            )\n            (map\n                {\n                    (pair 0 4)\n                    (pair 1 5)\n                    (pair 2 2)\n                    (pair 3 3)\n                    (pair 4 1)\n                    (pair 5 5)\n                    (pair 6 6)\n                }\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (sites Bottom) state:1)\n                (place \"Marker2\" (sites Top) state:1)\n            }\n        )\n        (play\n            (do\n                (roll)\n                next:(forEach Piece)\n                (then\n                    (if\n                        (and\n                            (is\n                                In\n                                (mapEntry (count Pips))\n                                (sites {1 4 6 5})\n                            )\n                            (!= 5 (count Pips))\n                        )\n                        (moveAgain)\n                    )\n                )\n            )\n        )\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nA simple, drawless, and finite annihilation game where groups only grow by capturing.\n</description>\n<rules>\nOust is a game for two players, played on a hexagonally patterned board which is initially empty. The two players, Black and White, take turns placing stones of their color onto unoccupied cells on the board. A group is a set of interconnected, like-colored stones. A group can be a singleton, a single stone which is not connected to any other stones of its color. A group includes all the stones of its own color connected to it. There are two types of moves - non-capturing placements and capturing placements. Non-capturing placements either forms no connections (adjacencies) with any stones, or forms one or more connections with only enemy stones. A non-capturing placement does not form any connection with stones of its own color. Making a non-capturing placement concludes your turn. When you place a stone which forms one or more connections with your own groups, you will create a new, larger group of your own stones. You can only make such a placement if said new group will have one or more connections with enemy groups upon its creation and if all said enemy groups are smaller than said new group. Upon making such a placement, all said enemy groups are removed from the board. After capturing one or more enemy groups and while it is still your turn, you must continue to add stones until you make a non-capturing placement, at which time your turn is concluded. If you have a placement available on your turn you must make one. If you don't have any placements available, you must pass your turn. There will always be a placement available for at least one player. You win by making a placement which captures all of the enemy stones on the board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Oust\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 7))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (play\n            (or\n                (move\n                    Add\n                    (to\n                        (sites Empty)\n                        if:(= 0 (count Sites in:(sites Around (to) Own)))\n                    )\n                )\n                (do\n                    (move\n                        Add\n                        (to\n                            (sites Empty)\n                            if:(< 0 (count Sites in:(sites Around (to) Own)))\n                        )\n                    )\n                    ifAfterwards:(and\n                        (all\n                            Sites\n                            (sites Around (sites Group at:(last To)) Enemy)\n                            if:(>\n                                (size Group at:(last To))\n                                (size Group at:(site))\n                            )\n                        )\n                        (<\n                            0\n                            (count\n                                Sites\n                                in:(sites\n                                    Around\n                                    (sites Group at:(last To))\n                                    Enemy\n                                )\n                            )\n                        )\n                    )\n                    (then\n                        (and\n                            (forEach\n                                Site\n                                (sites\n                                    Around\n                                    (sites Group at:(last To))\n                                    Enemy\n                                )\n                                (remove (sites Group at:(site)))\n                            )\n                            (moveAgain)\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (and\n                    (< 2 (count Moves))\n                    (= 0 (count Sites in:(sites Occupied by:Enemy)))\n                )\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nClobber is an abstract strategy game invented in 2001 by combinatorial game theorists Michael H. Albert, J.P. Grossman and Richard Nowakowski.\n</description>\n<rules>\nTo start the game, each of the squares on the checkerboard is occupied by a stone. White stones are placed on the white squares and black stones on the black squares. To move, the player must pick up one of his or her own stones and 'clobber' an opponent's stone on an adjacent square, either horizontally or vertically. Once the opponent's stone is clobbered, it must then be removed from the board and replaced by the stone that was moved. The player who, on their turn, is unable to move, loses the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Clobber\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 10 10))\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Enemy (who at:(to))) (apply (remove (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (sites Phase 1))\n                (place \"Marker2\" (sites Phase 0))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPress Ups was invented in 1974 by Yigal Bogoslavski.\n</description>\n<rules>\nOne player has red pegs, the other player blue pegs. The player who can get all his color pegs pressed down first wins the game. Each player can press his opponent's color pegs. At any time during the game, if it becomes impossible to press a peg next to the last one pressed the game finishes. The player with the most of his own color pegs pressed down is the winner.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Press Ups\"\n    (players 2)\n    (equipment\n        {\n            (board (square 7))\n            (piece \"Disc\" Each)\n            (piece \"Disc\" Neutral)\n            (regions\n                P1\n                (difference\n                    (union (sites Bottom) (sites Top))\n                    (union (sites Right) (sites Left))\n                )\n            )\n            (regions\n                P2\n                (difference\n                    (union (sites Right) (sites Left))\n                    (union (sites Bottom) (sites Top))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Disc1\" (sites P1))\n                (place \"Disc2\" (sites P2))\n                (place\n                    \"Disc0\"\n                    (difference (sites Board) (union (sites P1) (sites P2)))\n                )\n            }\n        )\n        phases:{\n            (phase\n                \"Init\"\n                (play\n                    (move\n                        Select\n                        (from\n                            (difference\n                                (sites Board)\n                                (union (sites P1) (sites P2))\n                            )\n                        )\n                        (then (remove (last To)))\n                    )\n                )\n                (nextPhase \"Remove\")\n            )\n            (phase\n                \"Remove\"\n                (play\n                    (move\n                        Select\n                        (from\n                            (sites Around (last To))\n                            if:(is Occupied (from))\n                        )\n                        (then (remove (last To)))\n                    )\n                )\n            )\n        }\n        (end\n            {\n                (if (no Pieces P1) (result P1 Loss))\n                (if (no Pieces P2) (result P2 Loss))\n                (if\n                    (no Moves Next)\n                    (byScore\n                        {\n                            (score P1 (count Pieces P1))\n                            (score P2 (count Pieces P2))\n                        }\n                    )\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nIn his column in the July 1980 issue of Scientific American, Martin Gardner (well known for this writings on mathematical recreations), gives the following one dimensional chess variants.\n</description>\n<rules>\nHere, the King and Rook move as usual, and the knight moves exactly two squares, and may jump over a piece doing that. Gardner asks his readers whether white can win. (White can make a draw by taking the opponents rook and thus giving stalemate.).\n</rules>\n</query>\n</task>",
        "solution": "(game \"1D Chess\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 1 8))\n            (piece \"Rook\"\n                Each\n                (move\n                    Slide\n                    Orthogonal\n                    (to if:(is Enemy (who at:(to))) (apply (remove (to))))\n                )\n            )\n            (piece \"King\"\n                Each\n                (move\n                    Step\n                    (to\n                        if:(not (is Friend (who at:(to))))\n                        (apply (if (is Enemy (who at:(to))) (remove (to))))\n                    )\n                )\n            )\n            (piece \"Knight\"\n                Each\n                (move\n                    Leap\n                    { { F F } }\n                    (to\n                        if:(not (is Friend (who at:(to))))\n                        (apply (if (is Enemy (who at:(to))) (remove (to))))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Rook1\" coord:\"C1\")\n                (place \"Knight1\" coord:\"B1\")\n                (place \"King1\" coord:\"A1\")\n                (place \"Rook2\" coord:\"F1\")\n                (place \"Knight2\" coord:\"G1\")\n                (place \"King2\" coord:\"H1\")\n            }\n        )\n        (play\n            (do\n                (forEach Piece)\n                ifAfterwards:(not (is Threatened (id \"King\" Mover)))\n            )\n        )\n        (end\n            {\n                (if\n                    (and\n                        (is Threatened (id \"King\" Next))\n                        (not\n                            (can\n                                Move\n                                (do\n                                    (forEach Piece Next)\n                                    ifAfterwards:(not\n                                        (is Threatened (id \"King\" Next))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                    (result Mover Win)\n                )\n                (if\n                    (or (no Moves Mover) (= (counter) 100))\n                    (result Mover Draw)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nShatr ikh Padan is a game from nineteenth century India that was described by Lala Raja Babu Sahib, Superintendent of the Palace Games Department of Patiala.. It is played with only the Shah and eight Pawns.\n</description>\n<rules>\n8x8 board. Two players. Pieces and movement are as follows: King x1, placed on the fifth space from the left on one edge of the board: Moves one space orthogonally or diagonally. Pawns x8, arranged along the row in front of the king: moves one space forward orthogonally or one space forward diagonally to capture. The opponent's pieces are placed in the same position on the opposite side of the board. If the King can be taken on the next turn it is in check, it must not remain in check on the next turn. If the king cannot move out of check, checkmate is declared and the opponent wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Shatr ikh Padan\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Pawn\"\n                Each\n                (or\n                    {\n                        (move Step Forward (to if:(is Empty (to))))\n                        (move\n                            Step\n                            (directions { FR FL })\n                            (to\n                                if:(is Enemy (who at:(to)))\n                                (apply (remove (to)))\n                            )\n                        )\n                    }\n                )\n            )\n            (piece \"King_noCross\"\n                Each\n                (move\n                    Step\n                    (to\n                        if:(not (is Friend (who at:(to))))\n                        (apply (if (is Enemy (who at:(to))) (remove (to))))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Pawn1\" (sites Row 1))\n                (place \"Pawn2\" (sites Row 6))\n                (place \"King_noCross1\" coord:\"E1\")\n                (place \"King_noCross2\" coord:\"D8\")\n            }\n        )\n        (play\n            (do\n                (forEach Piece)\n                ifAfterwards:(not (is Threatened (id \"King_noCross\" Mover)))\n            )\n        )\n        (end\n            (if\n                (and\n                    (is Threatened (id \"King_noCross\" Next))\n                    (not\n                        (can\n                            Move\n                            (do\n                                (forEach Piece Next)\n                                ifAfterwards:(not\n                                    (is Threatened (id \"King_noCross\" Next))\n                                )\n                            )\n                        )\n                    )\n                )\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHasami Shogi is a simplified version of Shogi, a Japanese game which is ultimately related to the Indian game Chaturanga. It is played only with the pawns on a 9x9 Shogi board.\n</description>\n<rules>\nPlay begins with the pieces arranged in the last row of squares on opposite sides of the board. Pieces move as rooks in Chess. An opponent's piece is captured by surrounding it on two opposite sides by a player's piece. Play continues until all but one player's pieces are captured.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Hasami Shogi\"\n    (players 2)\n    (equipment\n        {\n            (board (square 9))\n            (piece \"Fuhyo\"\n                P1\n                (move\n                    Slide\n                    Orthogonal\n                    (then\n                        (or\n                            (custodial\n                                (from (last To))\n                                Orthogonal\n                                (between\n                                    (max 1)\n                                    if:(is Enemy (who at:(between)))\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Friend (who at:(to))))\n                            )\n                            (surround\n                                (from (last To))\n                                Orthogonal\n                                (between\n                                    if:(and\n                                        (is In (between) (sites Corners))\n                                        (is Enemy (who at:(between)))\n                                    )\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Friend (who at:(to))))\n                            )\n                        )\n                    )\n                )\n            )\n            (piece \"Tokin\"\n                P2\n                (move\n                    Slide\n                    Orthogonal\n                    (then\n                        (or\n                            (custodial\n                                (from (last To))\n                                Orthogonal\n                                (between\n                                    (max 1)\n                                    if:(is Enemy (who at:(between)))\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Friend (who at:(to))))\n                            )\n                            (surround\n                                (from (last To))\n                                Orthogonal\n                                (between\n                                    if:(and\n                                        (is In (between) (sites Corners))\n                                        (is Enemy (who at:(between)))\n                                    )\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Friend (who at:(to))))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            { (place \"Fuhyo1\" (sites Bottom)) (place \"Tokin2\" (sites Top)) }\n        )\n        (play (forEach Piece))\n        (end (if (= (count Pieces Next) 1) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nEl-Mthaltha is a small game with custodial captures played in Tunisia.\n</description>\n<rules>\n3x3 intersecting lines, with diagonals in the square. Three pieces per player, which begin on opposite sides of the square. Players alternate turns moving one of their pieces along the lines of the board. When a player surrounds one of the opponent's pieces with two of their pieces, the opponent's piece is captured. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"El-Mthaltha\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then\n                        (custodial\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                (max 1)\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Friend (who at:(to))))\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            { (place \"Marker1\" (sites Bottom)) (place \"Marker2\" (sites Top)) }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBoseog Gonu is a Korean game of capture of uncertain history.\n</description>\n<rules>\nEach player has four pieces. Players take turns moving a piece to an empty dot. A player may capture an opponent\u2019s piece by placing a piece on either side of an opponent\u2019s piece. If a player moves their own piece between two of the opponent\u2019s pieces, it is not captured. A player wins by reducing the opponent to one piece.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Boseog Gonu\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (remove\n                    (merge\n                        {\n                            (rectangle 3 3 diagonals:Alternating)\n                            (shift 0 -1 (rotate 180 (wedge 2)))\n                            (shift 0 2 (wedge 2))\n                            (shift -1.5 0.5 (rotate 90 (wedge 2)))\n                            (shift 1.5 0.5 (rotate -90 (wedge 2)))\n                        }\n                    )\n                    edges:{\n                        { { 1 1} { 0 0 } } { { 1 1} { 2 2 } }\n                        { { 1 1} { 2 0 } } { { 1 1} { 0 2 } }\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Disc\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then\n                        (custodial\n                            (from (last To))\n                            (between\n                                (max 1)\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(= (what at:(to)) (what at:(last To))))\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Disc1\" {\"A3\" \"B3\" \"B4\" \"B2\"})\n                (place \"Disc2\" {\"D2\" \"D3\" \"E3\" \"D4\"})\n            }\n        )\n        (play (forEach Piece))\n        (end (if (<= (count Pieces Next) 1) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nGundru is a capturing game played in Tibet by adults. It employs the custodial capturing mechanism.\n</description>\n<rules>\n9x9 intersecting lines, pieces are played on the intersections. 16 pieces per player, one player is black, the other white. Pieces begin placed on the edge of the board: Black on the top and right, white on the bottom and left. Sixteen others are held in reserve for each player. Pieces move any distance orthogonally along the lines. Opponent's pieces are captured when they are surrounded by two of a player's pieces. When this is done, the surrounded player's pieces are removed and replaced with the pieces of the player that surrounded them. If multiple opponent's pieces are in a line and the other player places their pieces at either end of the line, all the pieces in between are captured. When a player is reduced to one piece, it gains the ability to capture by jumping. The player that removes all of their opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Gundru\"\n    (players 2)\n    (equipment\n        {\n            (board (square 9) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (or\n                    (if\n                        (=\n                            1\n                            (+\n                                (count Cell at:(handSite Mover))\n                                (count Pieces Mover)\n                            )\n                        )\n                        (move\n                            Hop\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Empty (to)))\n                        )\n                    )\n                    (move\n                        Slide\n                        (then\n                            (custodial\n                                (from (last To))\n                                (between\n                                    (range 1 (count Rows))\n                                    if:(is Enemy (who at:(between)))\n                                    (apply\n                                        (and\n                                            (remove (between))\n                                            (fromTo\n                                                (from (handSite Mover))\n                                                (to (between))\n                                            )\n                                        )\n                                    )\n                                )\n                                (to if:(is Friend (who at:(to))))\n                            )\n                        )\n                    )\n                )\n            )\n            (hand Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker\" \"Hand\" count:16)\n                (place\n                    \"Marker1\"\n                    (union\n                        (sites Top)\n                        (difference (sites Right) (sites Bottom))\n                    )\n                )\n                (place\n                    \"Marker2\"\n                    (union\n                        (sites Bottom)\n                        (difference (sites Left) (sites Top))\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSeega is a game played in North Africa, and is particularly well-known in Egypt and Sudan. It has been documented since the nineteenth century, but is likely to be older. The boards are typically scooped out of the sand or etched into stone surfaces.\n</description>\n<rules>\n\"5x5 board. Players begin by placing their pieces in prescribed spaces, and then alternating two-by-two in places as they see fit, except for the central space. Once all the spaces except the central one are filled, the first player moves a piece one space orthogonally to the empty space. Pieces are captured by surrounding them on either side by a player's own pieces. The player to capture all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Seega\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5))\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Empty (to)))\n                    (then\n                        (custodial\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                (max 1)\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Friend (who at:(to))))\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to (difference (sites Empty) (centrePoint)))\n                        (then (if (not (is Prev Mover)) (moveAgain)))\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKharebga is a capturing game played by children in El Oued, Algeria.\n</description>\n<rules>\n5x5 board. Twelve pieces per player. Players alternate turns placing two pieces on an empty space on the board, except in the central space. Captures cannot be made during the placement phase. When all of the pieces have been placed, players alternate turns moving a piece orthogonally any distance. When an opponent's piece is between two of a player's pieces, it is captured. If a player is unable to make a move, they pass their turn and the opponent plays again. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Kharebga (5x5)\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5))\n            (piece \"Marker\"\n                Each\n                (move\n                    Slide\n                    Orthogonal\n                    (then\n                        (custodial\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                (max 1)\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Friend (who at:(to))))\n                        )\n                    )\n                )\n            )\n            (hand Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to\n                            (difference (sites Board) (centrePoint))\n                            if:(is Empty (to))\n                        )\n                        (then (if (not (is Prev Mover)) (moveAgain)))\n                    )\n                )\n                (nextPhase Mover (is Empty (handSite Mover)) \"Capture\")\n            )\n            (phase \"Capture\" (play (forEach Piece)))\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKharebga is a game with custodial captures played by children in El Oued, Algeria.\n</description>\n<rules>\n7x7 board. 24 pieces per player. Players alternate turns placing two pieces on an empty space on the board, except in the central space. Captures cannot be made during the placement phase. When all of the pieces have been placed, players alternate turns moving a piece orthogonally any distance. When an opponent's piece is between two of a player's pieces, it is captured. If a player is unable to make a move, they pass their turn and the opponent plays again. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Kharebga (7x7)\"\n    (players 2)\n    (equipment\n        {\n            (board (square 7))\n            (piece \"Marker\"\n                Each\n                (move\n                    Slide\n                    Orthogonal\n                    (then\n                        (custodial\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                (max 1)\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Friend (who at:(to))))\n                        )\n                    )\n                )\n            )\n            (hand Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:24))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to\n                            (difference (sites Board) (centrePoint))\n                            if:(is Empty (to))\n                        )\n                        (then (if (not (is Prev Mover)) (moveAgain)))\n                    )\n                )\n                (nextPhase Mover (is Empty (handSite Mover)) \"Capture\")\n            )\n            (phase \"Capture\" (play (forEach Piece)))\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPam Pait (\\\"to cut a crowd\\\") is a game with leaping captures from the Assam region of India.\n</description>\n<rules>\n3x5 lines, intersecting one another and forming a square. Diagonals are drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. Fourteen pieces per player, which begin on the points in the triangle and the first two rows of the square closest to each player. The central line remains empty. Players alternate turns moving to an empty adjacent point along the lines. A player may capture an opponent's piece by hopping over it to an empty space on the opposite side of the opponent's piece along the lines of the board. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Pam Pait\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (remove\n                        (merge\n                            {\n                                (square 5 diagonals:Alternating)\n                                (shift 0 4 (rotate 180 (wedge 3)))\n                                (shift 0 -2 (wedge 3))\n                            }\n                        )\n                        vertices:{1 11 21 23 13 3}\n                    )\n                    edges:{\n                        {0 1} {1 2} {8 9} {9 10} {16 17} {17 18}\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Marker\"\n                Each\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (union\n                        (sites {\"A4\" \"E4\"})\n                        (expand (sites Bottom) steps:3)\n                    )\n                )\n                (place\n                    \"Marker2\"\n                    (union (sites {\"A6\" \"E6\"}) (expand (sites Top) steps:3))\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBis Gutiya is a game with leaping captures played in the Bihar region of India.\n</description>\n<rules>\n5x5 intersecting lines, with diagonals in each square formed by the lines. Twenty pieces per player, which each player places on the points on their side of the board, as well as the two points to the left of the central space. The central spot remains empty. Players alternate turns by moving a piece to an adjacent empty spot along the lines on the board. A player may capture an opponent's piece by hopping over one adjacent piece if there is an empty spot behind it along a line on the board. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Bis Gutiya\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5 diagonals:Solid) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (forEach (sites Board) if:(< (site) (centrePoint)))\n                )\n                (place\n                    \"Marker2\"\n                    (forEach (sites Board) if:(> (site) (centrePoint)))\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nB\u00e1ra Guti is a game with captures played in the Punjab region of what is now India and Pakistan.\n</description>\n<rules>\nThe board consists of 5x5 intersecting lines with diagonals of each quadrant. Pieces are placed on the intersections and can move along the lines. Each player has 12 pieces. Pieces can move to one adjacent point. Captures can be made by hopping over an opponent's piece. The goal is to capture all of the opponent's pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Bara Guti\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (forEach (sites Board) if:(< (site) (centrePoint)))\n                )\n                (place\n                    \"Marker2\"\n                    (forEach (sites Board) if:(> (site) (centrePoint)))\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKaua Dorki (\\\"catching the crow\\\") is a game with leaping captures played in the region of Allahabad, India during the early twentieth century.\n</description>\n<rules>\nTwo isosceles triangles, which meet at the apices with the height of each triangle drawn and a line perpendicular to it in each triangle at its midpoint intersecting with the sides. Another line, bisected by the point where the spices of the triangles meet, with a shot line extending down on either end of the line, and a matching short line next to it at either end. Eight pieces per player, lined up with six on the two rows of the triangle closest to the player and two on the ends of the short lines to the left of the player. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. A piece can capture an opponent's piece by hopping over it to an empty adjacent point immediately on the opposite side of the opponent's piece along the lines on the board. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Kaua Dorki\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (scale 1 2 (wedge 3))\n                        (shift 0 4 (rotate 180 (scale 1 2 (wedge 3))))\n                        (shift 0 4 (rectangle 1 5))\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Marker\"\n                Each\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (expand (union (sites Bottom) (sites {\"A3\"})))\n                )\n                (place\n                    \"Marker2\"\n                    (expand (union (sites Top) (sites {\"E3\"})))\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDam is a capturing game played in Singapore during the nineteenth century. It is played on the same board as a local hunt game, Rimau-Riimau.\n</description>\n<rules>\n5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. Each player has sixteen pieces, which begin on the points of one triangle and the two rows of points in front of it, thus leaving the central row of points empty. Players alternate turns moving a piece to an empty adjacent spot along the lines. A piece may capture an opponent's piece by hopping over it to an empty space immediately on the opposite side of the piece, along the lines of the board. The first player to capture all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Dam (Singapore)\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (square 5 diagonals:Alternating)\n                        (shift 0 4 (rotate 180 (wedge 3)))\n                        (shift 0 -2 (wedge 3))\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Marker\"\n                Each\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (union\n                        {\n                            (sites Row 0)\n                            (sites Row 1)\n                            (sites Row 2)\n                            (sites Row 3)\n                        }\n                    )\n                )\n                (place\n                    \"Marker2\"\n                    (union\n                        {\n                            (sites Row 5)\n                            (sites Row 6)\n                            (sites Row 7)\n                            (sites Row 8)\n                        }\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game, the name of which was unrecorded, is a game with leaping captures played in Ethiopia in the early twentieth century.\n</description>\n<rules>\n5x5 intersecting lines, with diagonals in the four quadrants. Twelve pieces per player, arranged on the two rows closest to the player and the two spots in the central row to the player's right, leaving the central space empty. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. A piece belonging to the opponent may be captured when a piece hops over it to an empty adjacent spot immediately on the opposite side of the piece, along the lines of the board. The player who reduces the opponent to five pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ethiopian Capture Game\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (union { (expand (sites Bottom)) (sites { \"D3\" \"E3\"}) })\n                )\n                (place\n                    \"Marker2\"\n                    (union { (sites { \"A3\" \"B3\"}) (expand (sites Top)) })\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (<= (count Pieces Next) 5) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLau Kata Kati is a leaping capture game similar to Alquerque observed during the nineteenth century in India, but which is probably much older.\n</description>\n<rules>\nPlay begins with each player's pieces on the pieces occupying the points of one of the triangles, leaving the shared apex empty. Pieces move to the next adjacent point connected by a line. Captures are made by hopping over an opponent's piece. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Lau Kata Kati\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge (wedge 4) (shift 0 3 (rotate 180 (wedge 4))))\n                use:Vertex\n            )\n            (piece \"Counter\"\n                Each\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Counter1\" (expand (sites Bottom) steps:2))\n                (place \"Counter2\" (expand (sites Top) steps:2))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nChalis Gutia as played near Titagarh outside Kolkata, India was played by people from all over India working in a mill there. It has a degree of flexibility in the number of pieces used on the same board.\n</description>\n<rules>\n9x9 board played on the intersections, with diagonals for each 3x3 square. Typically played with 24 pieces, but any number up to 40 is possible. Pieces are arranged on the spots in the rows closest to the player, with those unable to fill a row placed on the right points of the next available row. Players alternate turns by moving a piece to an adjacent empty spot along the lines on the board. A player may capture an opponent's piece by hopping over one adjacent piece if there is an empty spot behind it along a line on the board. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Challis Ghutia (Titagarh)\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board (rectangle 9 9 diagonals:Alternating) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (union\n                        (expand (sites Bottom) steps:1)\n                        (expand origin:(coord \"I3\") steps:5 W)\n                    )\n                )\n                (place\n                    \"Marker2\"\n                    (union\n                        (expand (sites Top) steps:1)\n                        (expand origin:(coord \"A7\") steps:5 E)\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAlquerque or Alquerque de Doze was the Spanish version of a game which originated in the Arabic-speaking world. The first description of rules are found in Alfonso X's Libro de los Juegos in 13th century Spain. Many historians consider Alquerque to be an ancestor of Draughts and many other games in cultures that interacted with Islamic peoples or the Spanish.\n</description>\n<rules>\n\"The board consists of 5x5 intersecting lines with diagonals. Pieces are placed on the intersections and can move along the lines. Each player has 12 pieces. Pieces can move to one adjacent point. Captures can be made by hopping over an opponent's piece. The goal is to capture all of the opponent's pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Alquerque\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Counter\" Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Counter1\"\n                    (union { (expand (sites Bottom)) (sites { \"D3\" \"E3\"}) })\n                )\n                (place\n                    \"Counter2\"\n                    (union { (sites { \"A3\" \"B3\"}) (expand (sites Top)) })\n                )\n            }\n        )\n        (play\n            (forEach\n                Piece\n                \"Counter\"\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKotu Ellima is a leaping capture game played in Sri Lanka since at least the nineteenth century, but which may potentially be older.\n</description>\n<rules>\nFrom the starting position, each player takes turns moving one piece to an adjacent point connected to its current position by a line. Captures are made by hopping over an adjacent piece. The player who captures all the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Kotu Ellima\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (shift 2 2 (square 5 diagonals:Alternating))\n                        (shift 2 0 (wedge 3))\n                        (shift 5 3 (rotate 90 (wedge 3)))\n                        (shift 2 6 (rotate 180 (wedge 3)))\n                        (shift -1 3 (rotate 270 (wedge 3)))\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Marker\"\n                Each\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (union\n                        {\n                            (expand (sites Bottom) steps:2)\n                            (expand (sites Right) steps:3)\n                            (sites {\"F3\" \"G3\" \"E4\" \"F4\" \"F6\" \"F7\" \"G7\"})\n                        }\n                    )\n                )\n                (place\n                    \"Marker2\"\n                    (union\n                        {\n                            (expand (sites Top) steps:2)\n                            (expand (sites Left) steps:3)\n                            (sites {\"C3\" \"D3\" \"D4\" \"D6\" \"E6\" \"D7\" \"C7\"})\n                        }\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPadaivettu is a game of captures played by the Tamil people of southern India.\n</description>\n<rules>\n5x5 intersecting lines. Triangles on each side, with the apex intersecting with the midpoint of the side of the square. A line is drawn from the apex to the base of each triangle, and a line bisecting it and the two opposite sides. A diamond is drawn within the square, the corners of which intersect with the apices of the triangles and the midpoint of each side is the center point of each quadrant of the square. 24 pieces per player, which begin on the points of the board closest to the player and in the triangle to their right and the right half of the central row. The central point is vacant. Players alternate turns moving a piece to an empty adjacent spot on the board. A piece may capture an opponent's piece by hopping over it to an empty adjacent spot immediately on the opposite side of the opponent's pieces along the lines on the board. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Padaivettu\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (remove\n                    (merge\n                        {\n                            (shift 2 2 (square 5 diagonals:Alternating))\n                            (shift 2 0 (wedge 3))\n                            (shift 5 3 (rotate 90 (wedge 3)))\n                            (shift 2 6 (rotate 180 (wedge 3)))\n                            (shift -1 3 (rotate 270 (wedge 3)))\n                        }\n                    )\n                    edges:{\n                        {20 16} {16 12} {12 8} {8 4} {0 6} {6 12} {12 18}\n                        {18 24}\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (difference\n                        (union\n                            (expand (sites Right))\n                            (expand (sites Bottom) steps:4)\n                        )\n                        (expand (sites Centre) steps:2 W)\n                    )\n                )\n                (place\n                    \"Marker2\"\n                    (difference\n                        (union\n                            (expand (sites Left))\n                            (expand (sites Top) steps:4)\n                        )\n                        (expand (sites Centre) steps:2 E)\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nRam Tir is a game with leaping captures played in the Bihar region of India.\n</description>\n<rules>\n9x9 board played on the intersections, diagonals for the four quadrants of the board. Forty pieces per player, one playing as white, the other as red, arranged on opposite sides of the board, each player's pieces taking up the first through fourth ranks of spaces, plus their right half of the fifth rank. The central spot remains empty. Players alternate turns by moving a piece to an adjacent empty spot along the lines on the board. A player may capture an opponent's piece by hopping over one adjacent piece if there is an empty spot behind it along a line on the board. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ram Tir\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (square 9)\n                    edges:{\n                        {0 10} {10 20} {20 30} {30 40} {40 50} {50 60} {60 70}\n                        {70 80} {8 16} {16 24} {24 32} {32 40} {40 48} {48 56}\n                        {56 64} {64 72} {4 12} {12 20} {20 28} {28 36} {36 46}\n                        {46 56} {56 66} {66 76} {76 68} {68 60} {60 52}\n                        {52 44} {44 34} {34 24} {24 14} {14 4}\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Marker\"\n                Each\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (hand P2)\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (difference\n                        (expand (sites Bottom) steps:4)\n                        (sites {36 37 38 39 40})\n                    )\n                )\n                (place\n                    \"Marker2\"\n                    (difference\n                        (expand (sites Top) steps:4)\n                        (sites {40 41 42 43 44})\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNei-Pat-Kono is a game played in Korea at least since the end of the nineteenth century, and likely earlier. It is a game of leaping captures similar to others common around the world.\n</description>\n<rules>\n4x4 board, eight pieces each player. Pieces move orthogonally by either jumping a player's own piece to capture an opponent's piece or by moving one space into an empty hole. Captures are not compulsory. The goal is to reduce the opponents pieces to 1 or blocking them so they can no longer move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Nei-Pat-Kono\"\n    (players 2)\n    (equipment\n        {\n            (board (square 4) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Step Orthogonal (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        Orthogonal\n                        (between if:(is Friend (who at:(between))))\n                        (to if:(is Enemy (who at:(to))))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (expand (sites Bottom) steps:(- (/ (count Rows) 2) 1))\n                )\n                (place\n                    \"Marker2\"\n                    (expand (sites Top) steps:(- (/ (count Rows) 2) 1))\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end\n            (if\n                (or (no Moves Next) (<= (count Pieces Next) 1))\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game, called Terh\u00fcch\u00fc, is played on a smaller board than the same game which is also played by the Angami Naga people of India.\n</description>\n<rules>\n\"5x5 intersecting lines, with diagonals drawn in each quadrant. Ten pieces per player, which begin on the two rows closes to the player. Players alternate turns moving a piece to an empty adjacent spot along the lines. A piece may capture an opponent's piece by hopping over it along the lines of the board to an empty spot immediately on the opposite side of the opponent's piece. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Terhuchu (Small)\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (expand (sites Bottom)))\n                (place \"Marker2\" (expand (sites Top)))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game played by the S\u00fcmi Naga people of India is a game with leaping captures.\n</description>\n<rules>\n5x5 intersecting lines, with diagonals drawn in each quadrant. Eleven pieces per player, which begin on the two rows closest to the player, with the eleventh on the outer spot of the middle of to the left of the player. Players alternate turns moving a piece to an empty adjacent spot along the lines. A piece may capture an opponent's piece next to it by hopping over it to an empty spot immediately on the opposite side of the opponent's piece along the lines of the board. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Sumi Naga Game (War)\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                        (then\n                            (if\n                                (can\n                                    Move\n                                    (hop\n                                        (from (last To))\n                                        (between\n                                            if:(and\n                                                (not\n                                                    (is\n                                                        In\n                                                        (between)\n                                                        (sites ToClear)\n                                                    )\n                                                )\n                                                (is Enemy (who at:(between)))\n                                            )\n                                        )\n                                        (to if:(is Empty (to)))\n                                    )\n                                )\n                                (moveAgain)\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (union (expand (sites Bottom)) (sites {\"A3\"}))\n                )\n                (place\n                    \"Marker2\"\n                    (union (expand (sites Top)) (sites {\"E3\"}))\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTuknanavuhpi is a leaping capture game played by the Hopi in Arizona during at the turn of the twentieth century. It is similar to games derived from Alquerque, like other Native American games adapted from the Spanish.\n</description>\n<rules>\nPlayed on a grid of 4x4 squares, each square with both diagonals. Pieces are played on the intersections of the lines, moving to an empty point along one of the lines. Play begins with 20 pieces per player. Players take turns moving the pieces, and capture the opponent's pieces by hopping over them. When the back line on a player's side of the board is vacated, it is no longer in play. The player who captures the other player's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tuknanavuhpi\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5 diagonals:Solid) use:Vertex)\n            (piece \"Counter\"\n                Each\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Counter1\"\n                    (union\n                        (difference\n                            (expand (sites Bottom) steps:2)\n                            (sites {\"E5\" \"G5\" \"I5\"})\n                        )\n                        (sites {\"B2\" \"B4\" \"D2\" \"D4\" \"F2\" \"F4\" \"H2\" \"H4\"})\n                    )\n                )\n                (place\n                    \"Counter2\"\n                    (union\n                        (difference\n                            (expand (sites Top) steps:2)\n                            (sites {\"E5\" \"A5\" \"C5\"})\n                        )\n                        (sites {\"B6\" \"B8\" \"D6\" \"D8\" \"F6\" \"F8\" \"H6\" \"H8\"})\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTavelspel is a game played in northern Sweden during the nineteenth century. This version was documented among Swedish settlers to D\u00e5res, but it was said to have been much older, and local to the village.\n</description>\n<rules>\n13x13 intersecting lines. Two players. Each player has 26 pieces. Pieces begin on the two lines closest to each player, opposite sides of the board. Pieces move along the lines of the board to an adjacent spot. A piece can be captured by hopping over an opponent's adjacent piece to an empty spot immediately on the opposite side of it. Multiple captures are allowed. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tavelspel\"\n    (players 2)\n    (equipment\n        {\n            (board (square 13) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (expand (sites Bottom)))\n                (place \"Marker2\" (expand (sites Top)))\n            }\n        )\n        (play\n            (if\n                (is Prev Mover)\n                (or\n                    (move\n                        Hop\n                        (from (last To))\n                        (between\n                            if:(and\n                                (not (is In (between) (sites ToClear)))\n                                (is Enemy (who at:(between)))\n                            )\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                        (then\n                            (if\n                                (can\n                                    Move\n                                    (hop\n                                        (from (last To))\n                                        (between\n                                            if:(and\n                                                (not\n                                                    (is\n                                                        In\n                                                        (between)\n                                                        (sites ToClear)\n                                                    )\n                                                )\n                                                (is Enemy (who at:(between)))\n                                            )\n                                        )\n                                        (to if:(is Empty (to)))\n                                    )\n                                )\n                                (moveAgain)\n                            )\n                        )\n                    )\n                    (move Pass)\n                )\n                (forEach\n                    Piece\n                    \"Marker\"\n                    (or\n                        (move\n                            Hop\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Empty (to)))\n                            (then\n                                (if\n                                    (can\n                                        Move\n                                        (hop\n                                            (from (last To))\n                                            (between\n                                                if:(and\n                                                    (not\n                                                        (is\n                                                            In\n                                                            (between)\n                                                            (sites ToClear)\n                                                        )\n                                                    )\n                                                    (is\n                                                        Enemy\n                                                        (who at:(between))\n                                                    )\n                                                )\n                                            )\n                                            (to if:(is Empty (to)))\n                                        )\n                                    )\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                        (move Step (to if:(is Empty (to))))\n                    )\n                )\n            )\n        )\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTake the opponent's pieces or be the last to move a pawn.\n</description>\n<rules>\nCheckers without promotion. The winner is the last to move. One can move a pawn diagonally or hop orthogonally over an opponent's pawn, taking it.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Alquerkonane\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board (rectangle 6 4))\n            (piece \"Ball\"\n                Each\n                (or\n                    (move Step (directions { FL FR }) (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (set Score Each 0)\n                (place\n                    \"Ball2\"\n                    (intersection\n                        (sites Phase 0)\n                        (expand (sites Top) steps:1)\n                    )\n                )\n                (place\n                    \"Ball1\"\n                    (intersection\n                        (sites Phase 1)\n                        (expand (sites Bottom) steps:1)\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMakv\u0153r is a form of Draughts played in Denmark, known since the seventeenth century. It features orthogonal and diagonal movement, and the name suggests a relationship to Molkwerums Dans, or Frisian Draughts, in which pieces move similarly.\n</description>\n<rules>\n8x8 board, twelve pieces per player, arranged on the black spaces. Pieces move diagonally one space, or may hop an opponent's piece to capture it. Pieces may also capture orthogonally, but must remain on the black spaces. When a piece reaches the opponent's edge of the board, the piece becomes a \\\"Dam,\\\" and may move diagonally or orthogonally any number of spaces, including to jump over one piece. The player who captures all the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Makvoer\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Counter\"\n                Each\n                (or\n                    {\n                        (move Step Diagonal (to if:(is Empty (to))))\n                        (move\n                            Hop\n                            Diagonal\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Empty (to)))\n                        )\n                        (do\n                            (move\n                                Hop\n                                Orthogonal\n                                (between\n                                    before:1\n                                    after:2\n                                    if:(is Enemy (who at:(between)))\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Empty (to)))\n                            )\n                            ifAfterwards:(is In (last To) (sites Phase 0))\n                        )\n                    }\n                    (then\n                        (if\n                            (is In (last To) (sites Next))\n                            (promote (last To) (piece \"DoubleCounter\") Mover)\n                        )\n                    )\n                )\n            )\n            (piece \"DoubleCounter\"\n                Each\n                (or\n                    (move Slide)\n                    (move\n                        Hop\n                        (between\n                            before:(count Rows)\n                            after:(count Rows)\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Counter1\"\n                    (difference\n                        (expand (sites Bottom) steps:(- 3 1))\n                        (sites Phase 1)\n                    )\n                )\n                (place\n                    \"Counter2\"\n                    (difference\n                        (expand (sites Top) steps:(- 3 1))\n                        (sites Phase 1)\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLaram Wali is a game with captures played in Mali. It is played on a cross-shaped board, on which pieces are placed and then a capturing phase begins.\n</description>\n<rules>\nCross-shaped board, with any number of squares in the arm with a central square, and a number of pieces per player equal to the number of spaces in two arms. Three squares in each arm with six pieces per player is common. Players alternate turns placing pieces on the board. Players may not place pieces in the central space. When the pieces are placed, players alternate turns move a piece to am empty adjacent square, or hopping over an adjacent opponent's piece or an unbroken line of opponent's pieces with an empty space behind it. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Laram Wali\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    (shift 0 (/ (- (* 3 3) 3) 2) (rectangle 3 (* 3 3)))\n                    (shift (/ (- (* 3 3) 3) 2) 0 (rectangle (* 3 3) 3))\n                )\n                use:Cell\n            )\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Step Orthogonal (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        Orthogonal\n                        (between\n                            (range 1 6)\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:6))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to\n                            (difference\n                                (sites Empty)\n                                (expand\n                                    (sites Centre)\n                                    steps:(- (/ 3 2) (if (is Even 3) 1 0))\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTablo is a game that was played among the S\u00e1mi people of Sweden. The board was usually scratched into a wooden board with a knife, and sticks were used as pieces, one player keeping the bark on the sticks and the other stripping them. It was usually played by children, but was played by people of all ages.\n</description>\n<rules>\n7x7 lines, forming a grid. 21 pieces per player. The pieces begin on the three rows closest to the player. Pieces move forward orthogonally or sideways, never backwards. A piece may capture an adjacent opponent's piece by hopping over it to an empty adjacent spot immediately on the opposite side of it along the lines of the board. Multiple captures are allowed. Captures can only be made in the forward orthogonal or sideways directions also. The player who captures all of their opponent's pieces or who blocks them from being able to move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tablo\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board (square 7) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (or\n                    {\n                        (move\n                            Step\n                            (directions { Forward Rightward Leftward })\n                            (to if:(is Empty (to)))\n                        )\n                        (move\n                            Hop\n                            (directions { Forward Rightward Leftward })\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Empty (to)))\n                            (then\n                                (if\n                                    (can\n                                        Move\n                                        (move\n                                            Hop\n                                            (from (last To))\n                                            (directions\n                                                { Forward Rightward Leftward }\n                                            )\n                                            (between\n                                                if:(is\n                                                    Enemy\n                                                    (who at:(between))\n                                                )\n                                                (apply (remove (between)))\n                                            )\n                                            (to if:(is Empty (to)))\n                                        )\n                                    )\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    }\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (expand (sites Bottom) steps:2))\n                (place \"Marker2\" (expand (sites Top) steps:2))\n            }\n        )\n        (play\n            (if\n                (is Prev Mover)\n                (and\n                    (move\n                        Hop\n                        (from (last To))\n                        (directions { Forward Rightward Leftward })\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                        (then\n                            (if\n                                (can\n                                    Move\n                                    (move\n                                        Hop\n                                        (from (last To))\n                                        (directions\n                                            { Forward Rightward Leftward }\n                                        )\n                                        (between\n                                            if:(is Enemy (who at:(between)))\n                                            (apply (remove (between)))\n                                        )\n                                        (to if:(is Empty (to)))\n                                    )\n                                )\n                                (moveAgain)\n                            )\n                        )\n                    )\n                    (move Pass)\n                )\n                (forEach Piece)\n            )\n        )\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nT'oki is a capturing game played by the Fula and Tukulor people of Mali. It combines the typical placement and movement phases into a single phase, with captures made by hopping over opponent's pieces. Typically played by men, it is a complex game unique among games with this type of capture because multiple pieces may occupy one spot. It was primarily a game played by chiefs.\n</description>\n<rules>\n5x5 board. Twenty pieces per player. Players alternate turns placing pieces on the board, two at a time into the same square. At any time, a player may move one piece from a square one spot in an orthogonal direction. Pieces may capture opponent's pieces when either a single square or an unbroken line of squares with opponent's pieces has an empty space beyond it; the player's piece hops over the opponent's pieces and captures them all. When the unbroken line ends at the edge of the board, it is treated as though there were an empty square beyond the edge of the board, and the capturing piece is placed on the last space on the board in that line. Players may enter any reserved pieces on any turn as they see fit. The player to capture all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"T'oki\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5))\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Step Orthogonal (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        Orthogonal\n                        (between\n                            (range 1 (count Rows))\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to\n                            if:(or\n                                (and\n                                    (is In (to) (sites Outer))\n                                    (is Enemy (who at:(to)))\n                                )\n                                (is Empty (to))\n                            )\n                        )\n                    )\n                )\n            )\n            (hand Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:20))\n        (play\n            (or\n                (move (from (handSite Mover)) (to (sites Empty)) count:2)\n                (forEach Piece)\n            )\n        )\n        (end\n            (if\n                (and\n                    (all\n                        Sites\n                        (sites Hand Next)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    (no Pieces Next)\n                )\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTre Guti is a capturing game played on a small board. It was played by all ages and genders in the Mianwali district of Pakistan.\n</description>\n<rules>\n3x3 crossed lines, pieces move on the intersections and along the lines. Three pieces per player. In the placement phase, players alternate turns placing one of their pieces on an empty spot. When all of the pieces are placed, Players attempt to capture their opponent's pieces by hopping over them. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tre Guti\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nChoko is a capturing game that was played in the Gambia River valley during the early twentieth century.\n</description>\n<rules>\nFive rows of five holes. Each player has twelve sticks; one player's sticks are longer than the other player's. Players alternate turns placing one of their sticks in an empty hole on the board. A player may, on their turn, move a stick to an empty adjacent hole in an orthogonal direction instead of placing a stick. Players do not have to place all of their sticks before moving, but if they wish to place a stick after they have already moved, the opponent must also place a stick on their following turn. A player captures an opponent's stick by hopping over it in an orthogonal direction to an empty hole immediately on the opposite side of the opponent's stick. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Choko\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5) use:Vertex)\n            (piece \"Stick\"\n                Each\n                (or\n                    (move Step Orthogonal (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        Orthogonal\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n            (hand Each)\n            (regions \"AllSites\" (sites Board))\n        }\n    )\n    (rules\n        (start (place \"Stick\" \"Hand\" count:12))\n        (play\n            (if\n                (is Pending)\n                (move (from (handSite Mover)) (to (sites Empty)))\n                (or\n                    (if\n                        (not\n                            (all\n                                Sites\n                                (sites Hand Mover)\n                                if:(= 0 (count Cell at:(site)))\n                            )\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then (set Pending))\n                        )\n                    )\n                    (forEach Piece)\n                )\n            )\n        )\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNatt Klab ash-Shawk is a capturing game that was played in Palestine.\n</description>\n<rules>\n5x5 board, the central square marked with an X. Twelve pieces per player. Pieces begin the game on the first two rows in front of the player, and in the two squares to the player's right in the central row. Players alternate turns moving a piece orthogonally to an adjacent empty space. Players may capture an opponent's piece by hopping over it. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Natt Klab ash-Shawk\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5))\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Step Orthogonal (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        Orthogonal\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (union { (expand (sites Bottom)) (sites { \"D3\" \"E3\"}) })\n                )\n                (place\n                    \"Marker2\"\n                    (union { (sites { \"A3\" \"B3\"}) (expand (sites Top)) })\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nYot\u00e9 is a game with leaping captures played in Senegal. It is typically played in the sand with one side playing with stones or shells and the other with sticks. In it, a player making a capture is allowed to choose another of the opponent's pieces to remove from the board.\n</description>\n<rules>\n5x5 board. Twelve pieces per player. Players alternate turns placing a piece on the board or moving a piece already on the board. Pieces move one space in any orthogonal direction. A player may capture an opponent's piece by hopping over it to an empty space on the other side of it. When a capture is made in this fashion, the player chooses another piece belonging to the opponent to capture in addition. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Yote\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5))\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Step Orthogonal (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                        (then (moveAgain))\n                    )\n                )\n            )\n            (hand Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        (play\n            (if\n                (is Prev Mover)\n                (move Remove (sites Occupied by:Next container:\"Board\"))\n                (or\n                    (if\n                        (not\n                            (all\n                                Sites\n                                (sites Hand Mover)\n                                if:(= 0 (count Cell at:(site)))\n                            )\n                        )\n                        (move (from (handSite Mover)) (to (sites Empty)))\n                    )\n                    (forEach Piece)\n                )\n            )\n        )\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHyvn \u00e6tter Hare is a blackade game played on Funen Island in Denmark. One player plays as the hare, and the other as three hounds, which attempt to trap the hare.\n</description>\n<rules>\n\"Square board, divided into eight equal triangles, and a circle around the square, touching it at the corners, One player plays as the hare, the other player as three hounds. Players take turns placing one of their pieces on the board. When a player has placed all their pieces, they move to an adjacent empty spot. When the hounds block the hare from being able to move, the hounds win.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Hyvn aetter Hare\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (splitCrossings\n                    (merge\n                        (shift .5 .5 (scale 0.707 (concentric {1 8})))\n                        (square 2)\n                    )\n                )\n                use:Vertex\n            )\n            (piece \"Hare\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Dog\" P2 (move Step (to if:(is Empty (to)))))\n            (hand Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Hare1\" (handSite P1) count:1)\n                (place \"Dog2\" (handSite P2) count:3)\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (not\n                            (all\n                                Sites\n                                (sites Hand Mover)\n                                if:(= 0 (count Cell at:(site)))\n                            )\n                        )\n                        (move (from (handSite Mover)) (to (sites Empty)))\n                    )\n                )\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play (forEach Piece))\n                (end (if (no Moves Next) (result Next Loss)))\n            )\n        }\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThe Jeu de Renard is a hunt game played on a Draughts board from early modern France. This is the standard version, where one fox plays against twelve hens.\n</description>\n<rules>\n8x8 Draughts board. One player plays with a single fox, the other with twelve hens, played on the white squares. The hens begin on the first three rows; the fox may begin on whatever spot the player chooses. Hens move one space forward diagonally, the fox moves one space diagonally forward or backward. The fox may capture a hen by hopping over it to an empty space diagonally on the other side of it. The hens win by blocking the fox from being able to move; the fox wins by capturing all the hens.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Jeu de Renard\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Fox\"\n                P1\n                (or\n                    (move Step Diagonal (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        Diagonal\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n            (piece \"Hen\"\n                P2\n                N\n                (move Step (directions { FR FL }) (to if:(is Empty (to))))\n            )\n            (hand P1)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Fox1\" (handSite P1))\n                (place\n                    \"Hen2\"\n                    (difference\n                        (expand (sites Bottom) steps:2)\n                        (sites Phase 0)\n                    )\n                )\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                P1\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to (difference (sites Empty) (sites Phase 0)))\n                    )\n                )\n                (nextPhase \"Movement\")\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (no Pieces P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBouge Shodra is played by the Tuvinian people of Siberia. Though it falls under our classification as a hunt game, the game actually represents the herding of bulls into pens.\n</description>\n<rules>\n5x5 intersecting lines, with diagonals in each 3x3 quadrant of the board. On one end, a square with diagonals, with one corner as the midpoint of one of the sides of the main board. On the opposite side, a triangle, with a line bisecting the base and another bisecting this line and intersecting with the other two sides of the triangle. The triangle's apex is the midpoint of the opposite side as the square. One player plays with two larger pieces, the Bulls, which start at the points where the triangle and square intersect with the main board. The other player plays with 24 smaller pieces. Eight of these begin on the points surrounding the central point of the board, the rest are in the hand. Players alternate turns. The Bulls move to an empty adjacent spot, the other player places one of the pieces from their hand onto the board. When all of these pieces are on the board, the player may move one of the pieces to an empty adjacent spot. The Bull may captured one of the smaller pieces my hopping over it onto an empty space. The goal of the Bulls is to capture all of the smaller pieces. The goal of the player with the smaller pieces is to corner the bulls so they cannot move. Doing so in the triangle and the square is a better win than cornering the Bulls on the main board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Bouge Shodra\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    (merge\n                        (shift 0 2 (square 5 diagonals:Alternating))\n                        (wedge 3)\n                    )\n                    (rotate 45 (shift 1.5 6.2 (square 2 diagonals:Solid)))\n                )\n                use:Vertex\n            )\n            (hand P1)\n            (piece \"Marker\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Bull\"\n                P2\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Bull2\" (sites {\"C3\" \"C7\"}))\n                (place\n                    \"Marker1\"\n                    (difference (expand (sites Centre)) (centrePoint))\n                )\n                (place \"Marker1\" (handSite P1) count:16)\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                P1\n                (play (move (from (handSite P1)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand P1)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves P2) (result P1 Win))\n                (if (no Pieces P1) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMain Tapak Empat is a hunt game played by the Minangkabau people of Malaysia. In it, One player plays as two tigers who try to capture 24 goats.\n</description>\n<rules>\n5x5 intersecting lines, with diagonals in each 3x3 quadrant. One player plays with two tigers, which begin on the central spot. The other player plays as 24 goats. The goats play first, and may place a piece on any empty spot. The tigers move to an empty spot any distance along the lines on the board, or may hop over an adjacent goat to capture it, provided there is an empty spot immediately on the other side of the goat. Once all of the goats are placed, they may move along the lines to an empty adjacent spot. If the tigers cannot move, the goats win. The tigers win by capturing all the goats.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Main Tapak Empat\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Goat\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Tiger\"\n                P2\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (hand P1)\n        }\n    )\n    (rules\n        (start\n            {\n                (place Stack \"Tiger2\" (centrePoint))\n                (place Stack \"Goat1\" (handSite P1) count:24)\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                P1\n                (play (move (from (handSite P1)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P1)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves P2) (result P1 Win))\n                (if (no Pieces P1) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCoyote is a game said to have been played in Mexico in the late nineteenth century. It is unknown if it is still played now. It is a hunt game similar to those played around the world, and particularly close to the Spanish game Cercar la Liebre.\n</description>\n<rules>\n\"One player plays with one piece \\\"presumably the coyote,\\\" the other with the other twelve pieces, placed on intersections of the lines. Pieces move to an adjacent intersection connected to the present position by a line. The \\\"coyote\\\" may take the opponent's pieces by hopping over them. Multiple captures are allowed if possible, Captures are obligatory. The goal of the coyote is to capture all of the opponent's pieces; the other player's goal is to block the coyote so it cannot move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Coyote\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Radiating) use:Vertex)\n            (piece \"Sheep\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Coyote\"\n                P2\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (if\n                        (is Prev Mover)\n                        (move Pass)\n                        (move Step (to if:(is Empty (to))))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Sheep1\"\n                    (union (expand (sites Bottom)) (sites {\"A3\" \"E3\"}))\n                )\n                (place \"Coyote2\" (centrePoint))\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (<= (count Pieces P1) 9) (result P1 Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBagha Guti is a hunt game played in the Bihar region of India. The tiger attempts to eat all the goats, and the goats try to trap the tiger. All of the goats begin on the same spot in this game.\n</description>\n<rules>\n5x5 board, played on intersections of the lines, with diagonals for each quadrant of the board. One player plays with a tiger piece, placed anywhere on the board. The other player plays with 21 goats, placed on the central point of the board. The goats move first. Goats may move one at a time to any adjacent vacant spot along the lines of the board. The tiger moves in the same manner, but also may capture a piece by hopping over it to an empty space immediate on the opposite side of a goat. The tiger may hop the stack of goats, but may only capture one. The goal of the goats is to surround the tiger so it cannot move. The goal of the tiger is to capture all the goats.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Bagha Guti\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Goat\" P2 (move Step (to if:(is Empty (to)))))\n            (piece \"Tiger\"\n                P1\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n            (hand P1)\n        }\n    )\n    (rules\n        (start\n            {\n                (place Stack \"Goat2\" 12 count:21)\n                (place \"Tiger1\" (handSite P1))\n            }\n        )\n        phases:{\n            (phase\n                \"Opening\"\n                P1\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase \"Movement\")\n            )\n            (phase \"Movement\" (play (forEach Piece top:True)))\n        }\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (no Pieces P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nG\u00e5setavl is a hunt game played in Denmark since at least the nineteenth century.\n</description>\n<rules>\nTwenty squares arranged in a cross shape, with diagonals in each square. The pieces are played on the intersections of the lines. Two foxes are placed on the outer corners of one of the arms of the cross, and twenty geese are placed on the points in the opposite arm, as well as the first two long lines in the perpendicular arms. Players alternate turns moving a piece to an empty spot along the lines on the board. The geese cannot move backward. The foxes may hop over a goose to an empty adjacent spot immediately on the opposite side of it along the lines on the board. The geese win by blocking the foxes from being able to move. The foxes win by capturing all the geese.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Gasetavl\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Solid))\n                    (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Solid))\n                )\n                use:Vertex\n            )\n            (piece \"Fox\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Geese\"\n                P2\n                N\n                (move\n                    Step\n                    (directions { Rightward Forwards Leftward })\n                    (to if:(is Empty (to)))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Fox1\" (sites {\"G9\" \"I7\"}))\n                (place\n                    \"Geese2\"\n                    (sites\n                        {\n                            \"A3\" \"B2\" \"C1\" \"B4\" \"C3\" \"D2\" \"A7\" \"B6\" \"C5\" \"D4\"\n                            \"E3\" \"F2\" \"G1\" \"B8\" \"C7\" \"D6\" \"E5\" \"F4\" \"G3\" \"H2\"\n                        }\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (no Pieces P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nRimoe is a hunt game played on the island of Simeulue, and similar to others in neighboring lands. It is typically played in the Soeraoe, a religious building.\n</description>\n<rules>\n\"5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as the Rimoe (king), which starts on the central point. The other player has 24 pieces, eight of which start on the board, on the points immediately adjacent to the Rimoe. The Rimoe plays first, and takes one of the opponent's pieces by hopping over it to an empty spot immediately behind it in a straight line. The Rimoe captures in this way any uninterrupted line of pieces with an odd number. The Rimoe cannot capture a line of pieces with an even number. When the Rimoe cannot capture, it moves one to an empty adjacent space along the lines of the board. The other player places on of their remaining pieces on the board on their turn. When there are no more pieces left to place, the player moves one of the pieces to an empty adjacent spot along the lines. The Rimoe wins by capturing all of the opponent's pieces; the opponent wins by blocking the Rimoe from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Rimoe\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (square 5 diagonals:Alternating)\n                        (shift 0 4 (rotate 180 (wedge 3)))\n                        (shift 0 -2 (wedge 3))\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"King\"\n                P1\n                (priority\n                    {\n                        (move\n                            Hop\n                            (between\n                                (range 1 9)\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to\n                                if:(and\n                                    (is Empty (to))\n                                    (is Even (count Steps (from) (to)))\n                                )\n                            )\n                        )\n                        (move Step (to if:(is Empty (to))))\n                    }\n                )\n            )\n            (piece \"Marker\" P2 (move Step (to if:(is Empty (to)))))\n            (hand Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"King1\" (centrePoint) count:1)\n                (place \"Marker2\" (handSite P2) count:16)\n                (place\n                    \"Marker2\"\n                    (difference (expand (sites Centre)) (centrePoint))\n                )\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                P2\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (no Pieces P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKoti Keliya is a blocking game played in Sri Lanka. In contrast to many other hunt games in South Asia, it is played on a board of 12x12 squares.\n</description>\n<rules>\n12x12 checkered board. One player plays with six \\\"cattle\\\" or \\\"dogs,\\\" the other plays as the \\\"leopard.\\\" The cattle start on the white spaces along one side of the board, the leopard may be placed on any white square. Cattle move one space forward diagonally. The leopard may move one or two spaces diagonally in any one direction. If the leopard moves past the line of cattle, the leopard wins. If the cattle block the leopard from being able to move, the cattle win.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Koti Keliya\"\n    (players 2)\n    (equipment\n        {\n            (board (square 12))\n            (piece \"Leopard\" P1 (move Slide Diagonal (between (max 2))))\n            (piece \"Cow\"\n                P2\n                N\n                (move Step (directions { FR FL }) (to if:(is Empty (to))))\n            )\n        }\n    )\n    (rules\n        (start { (place \"Cow2\" (difference (sites Bottom) (sites Phase 0))) })\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        Add\n                        (to (intersection (sites Phase 1) (sites Empty)))\n                    )\n                )\n                (nextPhase (not (no Pieces P1)) \"Movement\")\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (and (no Moves P1) (is Mover P1)) (result P2 Win))\n                (if\n                    (=\n                        0\n                        (count\n                            Sites\n                            in:(forEach\n                                (sites Occupied by:P2)\n                                if:(<\n                                    (row of:(site))\n                                    (row of:(where \"Leopard\" P1))\n                                )\n                            )\n                        )\n                    )\n                    (result P1 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game is documented in Alfonso X's Libro de los Juegos. It is one of the earliest hunt games that has documented rules, and was played in thirteenth century Spain.\n</description>\n<rules>\n\"One player is the rabbit, and the other player plays with twelve other pieces. They may also play with either ten or eleven pieces instead of twelve. The pieces move along the lines. The goal is to corner the rabbit so that it cannot move. The rabbit may hop over the other pieces to capture them. The rabbit wins by reducing the opponent to nine pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Cercar La Liebre\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Counter\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Hare\"\n                P2\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (if\n                        (is Prev Mover)\n                        (move Pass)\n                        (move Step (to if:(is Empty (to))))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Counter1\"\n                    (union { (expand (sites Bottom)) (sites { \"A3\" \"E3\"}) })\n                )\n                (place \"Hare2\" (centrePoint))\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (<= (count Pieces P1) 9) (result P1 Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThe Jeu du Renard et de la Poule is a hunt game documented in seventeenth century France.\n</description>\n<rules>\nPlayed on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays as thirteen hens, which begin on the points on one of the arms of the cross and along the line immediately perpendicular to that arm. The other player plays as one fox, which can be placed on any empty point of the board. Players alternate turns moving to an empty adjacent spot along the lines of the board. The hens, however, can only move in a forward direction. The fox may hop over an adjacent hen to an empty spot immediately on the opposite side of the hen along the lines of the board. The fox wins by capturing all the hens, the hens win by blocking the fox from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Jeu du Renard et de la Poule\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    (shift\n                        0\n                        (/ (- 7 3) 2)\n                        (rectangle 3 7 diagonals:Alternating)\n                    )\n                    (shift\n                        (/ (- 7 3) 2)\n                        0\n                        (rectangle 7 3 diagonals:Alternating)\n                    )\n                )\n                use:Vertex\n            )\n            (hand P1)\n            (piece \"Fox\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                        (then\n                            (if\n                                (can\n                                    Move\n                                    (hop\n                                        (from (last To))\n                                        (between\n                                            if:(and\n                                                (not\n                                                    (is\n                                                        In\n                                                        (between)\n                                                        (sites ToClear)\n                                                    )\n                                                )\n                                                (is Enemy (who at:(between)))\n                                            )\n                                        )\n                                        (to if:(is Empty (to)))\n                                    )\n                                )\n                                (moveAgain)\n                            )\n                        )\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Hen\" P2 N (move Step Forwards (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Fox1\" (handSite P1))\n                (place \"Hen2\" (union (expand (sites Bottom)) (sites Row 2)))\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                P1\n                (play (move (from (handSite P1)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P1)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (no Pieces P2) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nYaguarete Kora is a hunt game played by the Mbya Guaran\u00ed people of South America. One player plays as one jaguar, and the other plays as fifteen dogs.\n</description>\n<rules>\n5x5 intersecting lines with diagonals in each quadrant. A triangle, the apex intersecting with the apex of one of the sides. A line is drawn from the apex to the midpoint of the base of the triangle. A line bisects this line, connecting the midpoints of the sides of the triangle, One player plays as one jaguar, which begins on the center of the base of the large triangle's base. The other player plays as fifteen dogs, which begin on the points of the three ranks of the bottom half of the square portion of the board. The jaguar moves first. Pieces move to an empty adjacent space along the lines of the board. The jaguar may hop over an adjacent dog to an empty space immediately on the opposite side of it, capturing the dog. Dogs cannot capture. The dogs win by blocking the jaguar so it cannot move; the jaguar wins when only six dogs remain.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Yaguarete Kora\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (rotate\n                    180\n                    (merge\n                        (shift 0 2 (square 5 diagonals:Alternating))\n                        (wedge 3)\n                    )\n                )\n                use:Vertex\n            )\n            (piece \"Jaguar\"\n                P1\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n            (piece \"Dog\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Jaguar1\" coord:\"C6\")\n                (place \"Dog2\" (expand (sites Bottom) steps:2))\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves P1) (result P1 Loss))\n                (if (<= (count Pieces P2) 6) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNeg Tugal Tuux is a game played in Mongolia. In it, two children attempt to herd a calf from its pen to its pasture. It is thought to be a representation of herding practices as play.\n</description>\n<rules>\nRectangular board, with 32 points along each long side. Lines connect the points opposite each other, as well as a diagonal line connecting each point on the left to the next highest point on the right (e.g., the first left point with the second right point, the second left point with the third right point, an so on). One player plays as the calf, which begins in the bottom right corner. The second player plays as two children, which begin in the bottom left corner and the second point on the right. Players alternate turns moving one of their pieces to an empty adjacent spot on the board along the lines. The children move first, and cannot move backward during the game. The calf can move in any direction. The children win by forcing the calf to move to the top left corner of the board, the calf wins by returning to its starting point after first having left it.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Neg Tugal Tuux\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (scale 15 1 (rectangle 32 2))\n                    edges:{\n                        {0 3} {2 5} {4 7} {6 9} {8 11} {10 13} {12 15} {14 17}\n                        {16 19} {18 21} {20 23} {22 25} {24 27} {26 29}\n                        {28 31} {30 33} {32 35} {34 37} {36 39} {38 41}\n                        {40 43} {42 45} {44 47} {46 49} {48 51} {50 53}\n                        {52 55} {54 57} {56 59} {58 61} {60 63}\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Cow\" P2 (move Step (to if:(is Empty (to)))))\n            (piece \"Human\"\n                P1\n                (move\n                    Step\n                    (to if:(and (is Empty (to)) (>= 1 (- (from) (to)))))\n                )\n            )\n        }\n    )\n    (rules\n        (start { (place \"Cow2\" 1) (place \"Human1\" (sites { 0 3})) })\n        (play (forEach Piece))\n        (end\n            {\n                (if\n                    (and (is Mover P2) (= 1 (where \"Cow2\" P2)))\n                    (result P2 Win)\n                )\n                (if (= 62 (where \"Cow2\" P2)) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKulaochal is a hunt game played by the Ho people of India during the early twentieth century. It was said to sometimes take hours when played by skilled players.\n</description>\n<rules>\n5x5 intersecting lines, with diagonals drawn in each quadrant. One player plays as four tigers, places on the four corners of the board. The other player plays as twenty goats, which are placed on the remaining points, leaving the central point open. Players alternate turns moving a piece to an empty adjacent point along the lines. The tigers may capture a goat by hopping over it to an empty adjacent spot immediately on the opposite side of the goat along the lines. The tigers win when they capture all of the goats; the goats win by blocking the tigers from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Kulaochal\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Tiger\"\n                P1\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n            (piece \"Goat\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Tiger1\" (sites Corners))\n                (place\n                    \"Goat2\"\n                    (difference\n                        (sites Board)\n                        (union (sites Corners) (sites Centre))\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (no Pieces P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game is presented in a group of manuscripts from the Maharaja Krishnaraja Wadiyar III of Mysore. Three people attempt to trap a tiger, and the tiger attempts to eat the people.\n</description>\n<rules>\nA triangle, with a point in the center and lines connecting it to the apex and the midpoints of the two sides which meet at the apex. One person plays as the tiger, which begins on the apex. The other person plays as three people. Players alternate turns, with the person playing as the people first placing a person on the board, and then the tiger moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tiger may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tiger wins when it captures one person, the people win when they can block the tiger from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Mysore Tiger Game\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (remove (scale 1 2 (wedge 3)) vertices:{5})\n                    edges:{ { 4 5} }\n                )\n                use:Vertex\n            )\n            (hand P1)\n            (piece \"Human\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Tiger\"\n                P2\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Human1\" (handSite P1) count:3)\n                (place \"Tiger2\" (sites Top))\n            }\n        )\n        phases:{\n            (phase\n                \"Opening\"\n                P1\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves P2) (result P1 Win))\n                (if (< (count Pieces P1) 3) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHund efter Hare is a blockade game played in Denmark. This version is from Vendsyssel, and has been played at least since the nineteenth century.\n</description>\n<rules>\n\"Three diamonds in a row, the central one connecting to the others one opposite corners. A horizontal line connects the top corners of the diamonds, another horizontal line connects the bottom corners of the diamonds, and a longer horizontal line connects all the middle corners. The outer two diamonds have vertical lines connecting their top and bottom corners. One player plays as three hounds, which begin on the outer corner and top and bottom corner of one of the end diamonds. The other player plays as one hare, which begins on the central point of the same diamond. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The Hare moves first. The hounds win by blocking the hare from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Hund efter Hare (Vendsyssel)\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (merge\n                        {\n                            (add\n                                (remove (rectangle 1 7) vertices:{3})\n                                edges:{ { 2 3} }\n                            )\n                            (scale 2 (shift 0.5 -0.5 (rectangle 1 3)))\n                            (scale 2 (shift 0.5 0.5 (rectangle 1 3)))\n                        }\n                    )\n                    edges:{\n                        {0 9} {0 6} {11 5} {5 8} {1 6} {1 9} {4 11} {4 8}\n                        {9 2} {2 7} {6 2} {2 10} {10 3} {3 8} {7 3} {3 11}\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Hare\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Dog\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Hare1\" coord:\"B2\")\n                (place \"Dog2\" (sites {\"A2\" \"B1\" \"B3\"}))\n            }\n        )\n        (play (forEach Piece))\n        (end { (if (no Moves P1) (result P2 Win)) })\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHund efter Hare is a name applied to several blockade games played in Denmark. This game was played in Thy, on a more complex board than was common elsewhere.\n</description>\n<rules>\n\"3x5 intersecting lines, with diagonals in the four quadrants created. On either short end, an arc connects the two corner points, and the center line is extended to the arc. One player plays as four hounds, which begin on the four points to the left side of the board. The other player plays as one hare, which begins on the point where the center line and the second line cross. Players alternate turns moving a piece to an empty adjacent spot along the lines. The hounds may only move forward. The hounds win when they block the hare from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Hund efter Hare (Thy)\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (remove\n                    (add\n                        (merge\n                            {\n                                (rectangle 3 5)\n                                (shift 1 0 (scale 0.5 (rectangle 5 1)))\n                                (shift 3 0 (scale 0.5 (rectangle 5 1)))\n                                (shift -1 1 (rectangle 1 7))\n                            }\n                        )\n                        edges:{\n                            {0 15} {15 7} {7 18} {18 14} {17 4} {7 17} {7 16}\n                            {16 10} {19 10} {0 19} {20 14} {20 4} {12 16}\n                            {16 5} {5 15} {15 2} {2 17} {17 9} {9 18} {18 12}\n                        }\n                    )\n                    edges:{ { 11 6} { 6 1 } { 13 8 } { 8 3 } }\n                )\n                use:Vertex\n            )\n            (piece \"Hare\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Dog\" P2 E (move Step Forwards (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Hare1\" coord:\"C3\")\n                (place \"Dog2\" (sites {\"B3\" \"B1\" \"A3\" \"B5\"}))\n            }\n        )\n        (play (forEach Piece))\n        (end { (if (no Moves P1) (result P2 Win)) })\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nEl Zorro is a hunt game played on the island of La Palma in the Canary Islands since at least the early twentieth century. It was typically played on lines etched in stone or on the ground, and the pieces were pebbles or corn kernels.\n</description>\n<rules>\nFive squares which are each divided with lines connecting the midpoints of their sides and diagonals. The five squares are arranged in a cross-shaped board. One player plays as two foxes the other as twenty hens. The hens begin on the twenty spaces on one half of the board, the foxes on the bottom two corners of the square on the opposite arm of the cross. The foxes may move in any direction, and hop over a hen to an empty space immediately adjacent on the opposite side of the hen along the lines of the board to capture. The hens may not move backward. The foxes win by capturing all the hens, the hens win by occupying all of the spaces in the square of the arm of the cross opposite from where they began.\n</rules>\n</query>\n</task>",
        "solution": "(game \"El Zorro\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board\n                (merge\n                    (shift\n                        0\n                        (/ (- 7 3) 2)\n                        (rectangle 3 7 diagonals:Alternating)\n                    )\n                    (shift\n                        (/ (- 7 3) 2)\n                        0\n                        (rectangle 7 3 diagonals:Alternating)\n                    )\n                )\n                use:Vertex\n            )\n            (piece \"Fox\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Hen\"\n                P2\n                (move\n                    Step\n                    (directions { Rightward Leftward Forwards })\n                    (to if:(is Empty (to)))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Hen2\" (union (sites Top) (expand (sites Row 4))))\n                (place\n                    \"Fox1\"\n                    (intersection\n                        (union (sites Column 4) (sites Column 2))\n                        (sites Bottom)\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if\n                    (all\n                        Sites\n                        (expand (sites Bottom) steps:2)\n                        if:(= (who at:(site)) P2)\n                    )\n                    (result P2 Win)\n                )\n                (if (no Pieces P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game is presented in a group of manuscripts from the Maharaja Krishnaraja Wadiyar III of Mysore. 25 people attempt to trap two tigers, and the tigers attempt to eat the people.\n</description>\n<rules>\n5x5 intersecting lines, with diagonals in each quadrant. At the midpoint of each side, the apex of a triangle. A line is drawn from the apex to the base of each triangle, and another line bisecting this one and the two opposite sides of the triangle. One player plays as two tigers, the other as 25 people. One tiger begins on the central point, and the other may be placed anywhere on the board. Players alternate turns, with the person playing as the people first placing a person on the board, and then one of the tigers moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tigers may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tigers win when they capture enough people so that the people cannot block the tiger, the people win when they can block the tiger from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Mysore Tiger Game (Two Tigers)\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (shift 2 2 (square 5 diagonals:Alternating))\n                        (shift 2 0 (wedge 3))\n                        (shift 5 3 (rotate 90 (wedge 3)))\n                        (shift 2 6 (rotate 180 (wedge 3)))\n                        (shift -1 3 (rotate 270 (wedge 3)))\n                    }\n                )\n                use:Vertex\n            )\n            (hand Each)\n            (piece \"Human\" P2 (move Step (to if:(is Empty (to)))))\n            (piece \"Tiger\"\n                P1\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Human2\" (handSite P2) count:25)\n                (place \"Tiger1\" (sites Centre))\n                (place \"Tiger1\" (handSite P1))\n            }\n        )\n        phases:{\n            (phase\n                \"Opening\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (no Pieces P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBaghchal is a game popular in Nepal, observed in the twentieth century. It was particularly popular among Buddhist monks. It is also played in India, particularly in places close to Nepal.\n</description>\n<rules>\n\"Played on 5x5 grid including diagonals and pieces are played on the intersections of the lines. One player has four tigers, placed on the corners, and the other has up to 20 goats, placed on the board on a free space. Tigers and goats can move to an adjacent intersection along the lines on the board. Tigers may capture goats by hopping over them. The game ends when tigers have captured all of the goats or the goats block the tigers from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Baghchal\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (hand P1)\n            (piece \"Goat\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Tiger\"\n                P2\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Tiger2\" (sites Corners))\n                (place \"Goat1\" (handSite P1) count:20)\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                P1\n                (play (move (from (handSite P1)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P1)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (<= (count Pieces P1) 0) (result P1 Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKaooa is a hunt game documented in the early twentieth century in India, but it is probably much older, as graffiti with the pattern of the board have been found at sites such as medieval Vijayanagara.\n</description>\n<rules>\nPlayed on a five-pointed star shaped board. One player plays with one piece, the \\\"tiger,\\\" and the other plays with seven pieces, the \\\"kaooas.\\\" The player with the kaooas attempt to checkmate the tiger by moving to one of the points where the lines of the board intersect. The tiger captures kaooas by hopping over them. The tiger wins by capturing all the kaooas.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Kaooa\"\n    (players 2)\n    (equipment\n        {\n            (board (splitCrossings (regular Star 5)) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                        (then\n                            (if\n                                (can\n                                    Move\n                                    (hop\n                                        (from (last To))\n                                        (between\n                                            if:(and\n                                                (not\n                                                    (is\n                                                        In\n                                                        (between)\n                                                        (sites ToClear)\n                                                    )\n                                                )\n                                                (is Enemy (who at:(between)))\n                                            )\n                                        )\n                                        (to if:(is Empty (to)))\n                                    )\n                                )\n                                (moveAgain)\n                            )\n                        )\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Marker\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (handSite P1) count:1)\n                (place \"Marker2\" (handSite P2) count:7)\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play (forEach Piece))\n                (end (if (no Moves Next) (result Next Loss)))\n            )\n        }\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBam Bang Beh Khla (\\\"To eat goat, to drive tiger\\\") is a hunt game played in the Assam Region of India on a board not documented elsewhere.\n</description>\n<rules>\nAn isosceles triangle, with a line intersecting the two equal sides, another line drawn from the apex to the midpoint of this line. A line extending below the base, and another line perpendicular to this one. One player plays as the tiger, and another player as three goats. The tiger begins at the apex of the triangle, the goats on the three points on the bottom line (the two ends and the place where it intersects with the other line. Players alternate turns moving a piece to an empty adjacent spot. The tiger may capture a goat by hopping over it to an empty adjacent spot along the lines of the board. The tiger wins by capturing all of the goats; the goats win by blocking the tiger from being able to move.\") (source \"Das Gupta 1935: 153-154.\") (id \"901\") (version \"1.3.14\") (classification \"board/hunt\") (credit \"Eric Piette\") (origin \"This game was played in India, around 1935.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Bam Blang Beh Khla\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (remove\n                        (merge\n                            {\n                                (shift 0.4 -1 (scale 0.6 (rectangle 1 3)))\n                                (shift 0.2 0 (scale 0.8 2 (wedge 2)))\n                                (shift 0 -0.5 (scale 1 2.5 (wedge 2)))\n                            }\n                        )\n                        edges:{ { 3 8} { 3 7 } { 3 9 } }\n                    )\n                    edges:{ { 6 9} { 4 7 } { 1 8 } }\n                )\n                use:Vertex\n            )\n            (piece \"Tiger\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Goat\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            { (place \"Tiger1\" (sites Top)) (place \"Goat2\" (sites Bottom)) }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (no Pieces P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis pattern was found on an object from Roman Coriovallum, in the Netherlands. The object appears to be a game based on its manufacture and the wear patterns on the stone.\n</description>\n<rules>\n\"The board has no extension and joined diagonals. Haretavl rules.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ludus Coriovalli\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (merge\n                        {\n                            (scale 2 1 (rectangle 1 3))\n                            (rectangle 2 1)\n                            (shift 4 0 (rectangle 2 1))\n                            (shift 4 1.5 (rectangle 2 1))\n                            (shift 0 1.5 (rectangle 2 1))\n                            (scale 2 1 (shift 0 2.5 (rectangle 1 3)))\n                        }\n                    )\n                    edges:{\n                        {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7}\n                    }\n                )\n                use:Vertex\n            )\n            (hand Each)\n            (piece \"Dog\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Hare\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Dog1\" (handSite P1) count:3)\n                (place \"Hare2\" (handSite P2))\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves P2) (result P1 Win))\n                (if\n                    (or\n                        (>= (count Moves) (- (value MoveLimit) 10))\n                        (>= (count Turns) (- (value TurnLimit) 5))\n                    )\n                    (result P2 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nG\u00e5setavl is a name for several hunt games in Denmark. This version is played on a larger board with one fox and eighteen geese.\n</description>\n<rules>\n28 squares arranged in a cross-shaped board. Diagonals are drawn in each 2x2 square. Pieces are played on the lines of the board. One player plays as a single fox, placed on the center of the third line from the top of one arm of the cross. The other player plays as eighteen geese, placed on the points on the opposite arm of the cross and the first horizontal line of the horizontal arms of the cross. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The geese may not move backward. The fox may capture a goose by hopping over it to an empty spot immediately on the opposite side of the goose along the lines of the board. The geese win by blocking the fox from being able to move. The fox wins by capturing all the geese.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Gasetavl (Gedved)\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    (shift\n                        0\n                        (/ (- 9 3) 2)\n                        (rectangle 3 9 diagonals:Alternating)\n                    )\n                    (shift\n                        (/ (- 9 3) 2)\n                        0\n                        (rectangle 9 3 diagonals:Alternating)\n                    )\n                )\n                use:Vertex\n            )\n            (piece \"Fox\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Geese\"\n                P2\n                N\n                (move\n                    Step\n                    (directions { Rightward Forwards Leftward })\n                    (to if:(is Empty (to)))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Fox1\" coord:\"E7\")\n                (place\n                    \"Geese2\"\n                    (sites\n                        {\n                            \"D1\" \"E1\" \"F1\" \"D2\" \"E2\" \"F2\" \"D3\" \"E3\" \"F3\" \"A4\"\n                            \"B4\" \"C4\" \"D4\" \"E4\" \"F4\" \"G4\" \"H4\" \"I4\"\n                        }\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (no Pieces P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis hunt game played in the Orissa region of India is played with one tiger trying to eat twelve goats, while the goats try to block the tiger from moving.\n</description>\n<rules>\n5x5 lines, intersecting to form a square. Diagonals are drawn in the four quadrants of the board. One triangle, its apex intersecting the main board at the midpoint of one side. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as the tiger, placed on the central point of the triangle, and the other plays as twelve goats, which begin on the first two rows of points opposite the triangle and on the outer two points in the third row. The tiger moves first. Pieces move to an empty adjacent spot along the lines on the board. The tiger alone may capture a goat by hopping over it to an empty spot immediately opposite a goat. The tiger wins by capturing all the goats; the goats win by blocking the tiger from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Orissa Tiger Game (One Tiger)\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (rotate\n                    180\n                    (merge\n                        (shift 0 2 (square 5 diagonals:Alternating))\n                        (wedge 3)\n                    )\n                )\n                use:Vertex\n            )\n            (piece \"Tiger\"\n                P1\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n            (piece \"Goat\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Tiger1\" (sites {\"C6\"}))\n                (place\n                    \"Goat2\"\n                    (union (expand (sites Bottom)) (sites {\"A3\" \"E3\"}))\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (no Pieces P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nEl Cazador is a hunt game played on the island of La Palma in the Canary Islands.\n</description>\n<rules>\n5x5 intersecting lines with diagonals drawn in the quadrants. One player plays as one hunter, placed in the central spot. The other player plays as twelve birds, which are placed in the two rows closest to the player and the two spots on the right hand side in the central row. The hunter may move in any direction along the lines of the board. The hunter may capture birds by hopping over them to an empty spot on the opposite side along the lines of the board. The birds may move forward orthogonally or diagonally. The birds win by blocking the hunter from being able to move; the hunter wins by capturing all of the birds or when it is no longer possible for the birds to capture the hunter.\n</rules>\n</query>\n</task>",
        "solution": "(game \"El Cazador\"\n    (players { (player S) (player N) })\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Human\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Hen\"\n                P2\n                (move\n                    Step\n                    (directions { Rightward Leftward Forwards })\n                    (to if:(is Empty (to)))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Human1\" (centrePoint))\n                (place\n                    \"Hen2\"\n                    (union { (expand (sites Bottom)) (sites { \"D3\" \"E3\"}) })\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (no Pieces P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game is a hunt game played by the Mao Naga people of Manipur, India in the early twentieth century.\n</description>\n<rules>\n5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting two sides of the triangle. One player plays as twenty people, stacked five each in the four points where the diagonals cross in each quadrant. The other player plays as two tigers, which are placed on the midpoints of the sides without triangles. Players alternate turns moving one piece to an adjacent spot along the lines of the board. The tiger may hop over one of the people to an empty point on the opposite side immediately adjacent to it along the lines of the board. When the tiger hops over one of the stacks, it captures only one of the people. The tigers win by capturing all the people, the people win by blocking the tigers from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Mao Naga Tiger Game\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (square 5 diagonals:Alternating)\n                        (shift 0 4 (rotate 180 (wedge 3)))\n                        (shift 0 -2 (wedge 3))\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Human\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Tiger\"\n                P2\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place Stack \"Human1\" (sites {\"B4\" \"B6\" \"D4\" \"D6\"}) count:5)\n                (place \"Tiger2\" (sites {\"A5\" \"E5\"}))\n            }\n        )\n        (play (forEach Piece top:True))\n        (end\n            {\n                (if (no Moves P2) (result P1 Win))\n                (if (no Pieces P1) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFox and Geese is a game known from medieval Europe with a complicated history. Many different versions are known, and it spread to many places that encountered Europeans and was adopted in various places with local rules. It is still played today, and it was thought that during the medieval and early modern period it was played by poorer classes of people, at least in England. In general, it is a typical hunt game.\n</description>\n<rules>\n\"The game is played on a cruciform board adapted from an Alquerque board. One player plays as the fox, the other as the geese. The geese begin in a set starting position; the person playing as the fox may choose any available spot to place the fox as their first move. Players move as in Alquerque, but only the fox can hop to capture. The goal of the geese is to block the fox from being able to move; the fox's goal is to capture all of the geese.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Fox and Geese\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    (shift\n                        0\n                        (/ (- 7 3) 2)\n                        (rectangle 3 7 diagonals:Alternating)\n                    )\n                    (shift\n                        (/ (- 7 3) 2)\n                        0\n                        (rectangle 7 3 diagonals:Alternating)\n                    )\n                )\n                use:Vertex\n            )\n            (hand P1)\n            (piece \"Fox\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Goose\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Goose2\" (union (expand (sites Bottom)) (sites Row 2)))\n                (place \"Fox1\" (handSite P1))\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                P1\n                (play (move (from (handSite P1)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P1)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (no Pieces P2) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDiviyan Keliya is a hunt game played in India and Sri Lanka. It has been documented since at least the early twentieth century, but is likely to be much older. It is similar to other hunt games played throughout South Asia.\n</description>\n<rules>\nOne player has two leopards, the other has 24 cows. Play begins by each player taking turns to place their pieces, and then can move to one adjacent intersection. Leopards capture cows by hopping over them. Leopards win by capturing all the cows, cows win by blocking the leopards from moving.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Diviyan Keliya\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (shift 2 2 (square 5 diagonals:Alternating))\n                        (shift 2 0 (wedge 3))\n                        (shift 5 3 (rotate 90 (wedge 3)))\n                        (shift 2 6 (rotate 180 (wedge 3)))\n                        (shift -1 3 (rotate 270 (wedge 3)))\n                    }\n                )\n                use:Vertex\n            )\n            (hand Each)\n            (piece \"Leopard\" P1)\n            (piece \"Cow\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Leopard1\" \"Hand1\" count:2)\n                (place \"Cow2\" \"Hand2\" count:24)\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                {\n                    (nextPhase\n                        P1\n                        (all\n                            Sites\n                            (sites Hand P1)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                        \"MovementP1\"\n                    )\n                    (nextPhase\n                        P2\n                        (all\n                            Sites\n                            (sites Hand P2)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                        \"MovementP2\"\n                    )\n                }\n            )\n            (phase\n                \"MovementP1\"\n                P1\n                (play\n                    (forEach\n                        Piece\n                        \"Leopard\"\n                        (or\n                            (move\n                                Hop\n                                (between\n                                    if:(is Enemy (who at:(between)))\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Empty (to)))\n                            )\n                            (move Step (to if:(is Empty (to))))\n                        )\n                    )\n                )\n            )\n            (phase \"MovementP2\" P2 (play (forEach Piece)))\n        }\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHaretavl is a blockade game from Scandinavia. It is documented from the nineteenth century, but older boards which have the same design are known from the Middle Ages, and thus the game may be much older.\n</description>\n<rules>\n\"Square board, divided into eight equal triangles, with the central horizonal line extended past the square on either side and lines connecting the end point to the two nearby corners of the square One player plays as the hare, the other player as three hounds. Players take turns placing one of their pieces on the board. When a player has placed all their pieces, they move to an adjacent empty spot. When the hounds block the hare from being able to move, the hounds win.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Haretavl\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (rectangle 3 3 diagonals:Alternating)\n                        (shift 1.5 0.5 (rotate -90 (wedge 2)))\n                        (shift -1.5 0.5 (rotate 90 (wedge 2)))\n                    }\n                )\n                use:Vertex\n            )\n            (hand Each)\n            (piece \"Dog\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Hare\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Dog1\" (handSite P1) count:3)\n                (place \"Hare2\" (handSite P2))\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end { (if (no Moves P2) (result P1 Win)) })\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game, the name for which was not recorded, was played in the Orissa region of India. Four tigers play against twenty goats.\n</description>\n<rules>\n5x5 board, played on intersections of the lines, with diagonals for each quadrant of the board. One player plays as four tigers, the other as twenty goats. The tigers begin, two on the top two corners of the board, and two in the centers of the two bottom quadrants. Four of the goats are placed on any available points. The tigers move first, to an empty adjacent spot along the lines on the board. The player playing as the goats places one of the remaining goats on any available point. The goats cannot move until all of the goats are placed. Once they are all placed, the goats move as the tigers do. The tigers alone may capture a goat by hopping over it to an empty spot immediately opposite a goat. The tigers win by capturing all the goats; the goats win by blocking the tigers from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Orissa Tiger Game (Four Tigers)\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Goat\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Tiger\"\n                P2\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n            (hand P1)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Goat1\" (handSite P1) count:20)\n                (place \"Tiger2\" (sites {\"A5\" \"E5\" \"B2\" \"D2\"}))\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                P1\n                (play\n                    (move\n                        (from (handSite P1))\n                        (to (sites Empty))\n                        (then\n                            (if\n                                (< 16 (count Cell at:(handSite P1)))\n                                (moveAgain)\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves P2) (result P1 Win))\n                (if (no Pieces P1) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHuli-Mane Ata is a simple hunt game played in the area of Vijayanagara, India by children. Boards for this game appear at the medieval ruins of Vijayanagara, but it is unclear if the game dates to that period.\n</description>\n<rules>\nA triangle, with a line drawn from the apex to the base, and two lines drawn through the height connecting the opposite two sides. One player plays as one tiger, the other as five lambs. The tiger begins on the apex of the triangle. The tiger moves to an empty adjacent spot along the lines of the board. The player who plays as the lambs plays first, placing a lamb on an empty spot on the board, and then the tiger player moves. When all of the lambs are placed, the lambs move in the same manner as the tiger. The tiger may capture a lamb by hopping over it to an empty space on the opposite adjacent side of the lamb along the lines on the board. The lambs win when they block the tiger from being able to move, the tiger wins by capturing enough lambs so that it cannot be blocked.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Huli-Mane Ata\"\n    (players 2)\n    (equipment\n        {\n            (board (scale 1 2 (wedge 4 3)) use:Vertex)\n            (hand P1)\n            (piece \"Lamb\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Tiger\"\n                P2\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Lamb1\" (handSite P1) count:5)\n                (place \"Tiger2\" (sites Top))\n            }\n        )\n        phases:{\n            (phase\n                \"Opening\"\n                P1\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves P2) (result P1 Win))\n                (if (< (count Pieces P1) 4) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nManu is a hunt game played in Hawaii in the nineteenth century.\n</description>\n<rules>\nPlayed on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays with thirteen pieces situated on every point of one arm of the cross and along the line immediately perpendicular to that arm. The other plays as the Punipeki, which is placed on any empty spot on the first turn. Pieces move along the lines to an adjacent empty spot. The Punipeki may jump over an adjacent piece to capture it. The Punipeki wins if it can capture all the opponent's pieces, the other player wins by blocking the Punipeki from moving.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Manu\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    (shift\n                        0\n                        (/ (- 7 3) 2)\n                        (rectangle 3 7 diagonals:Alternating)\n                    )\n                    (shift\n                        (/ (- 7 3) 2)\n                        0\n                        (rectangle 7 3 diagonals:Alternating)\n                    )\n                )\n                use:Vertex\n            )\n            (hand P1)\n            (piece \"Stick\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Marker\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker2\"\n                    (union (expand (sites Bottom)) (sites Row 2))\n                )\n                (place \"Stick1\" (handSite P1))\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                P1\n                (play (move (from (handSite P1)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P1)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (no Pieces P2) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nJuroku Musashi is a hunt game from Japan. It has a rule where the soldiers may also win by confining the general to the triangular extension of the board.\n</description>\n<rules>\n\"5x5 intersecting lines, with the diagonals of every 2x2 square formed. On one side, a triangle, with the apex intersecting with the midpoint of that side. There is a line from the apex to the midpoint of the triangle's base, and another interior triangle, connecting the base of the larger triangle with the midpoints of the sides of the larger triangle. One player plays as the Taisho (\\\"general\\\"), the other as sixteen musashi (\\\"soldiers\\\"). The Taisho begins in the central point, the musashi on each point of the perimeter of the square board. Players take turns moving from one point to an adjacent point along the lines on the board. The Taisho may capture a musashi by hopping over it. The Taisho wins if it captures all the musashi. The musashi win if they are able to immobilize the Taisho.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Juroku Musashi\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (merge\n                        (scale 2 (square 5 diagonals:Alternating))\n                        (shift 2 -2 (wedge 3))\n                    )\n                    vertices:{ { 3 -2} { 5 -2 } }\n                    edges:{ { 25 31} { 25 29 } { 27 29 } { 27 32 } }\n                )\n                use:Vertex\n            )\n            (piece \"Marker\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Marker\"\n                P2\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (difference (sites Outer) (expand (sites Bottom)))\n                )\n                (place \"Marker2\" (ahead (centrePoint) N))\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves P2) (result P1 Win))\n                (if (no Pieces P1) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAdugo has been reported among several indigenous groups in Brazil, including the Bororo, Pareci, Guaran\u00ed, and the Manchakeri. The game is played on a board which is usually scratched into the earth, with stones or other small objects used as pieces.\n</description>\n<rules>\n5x5 intersecting lines, forming a grid Diagonals in each quadrant. A triangular appendage, the apex being the midpoint of one of the sides of the grid. A line from the apex to the midpoint of the base, and a line bisecting this line and intersecting with the midpoints of the two sides of the triangle. There are fourteen \\\"dog\\\" pieces and one \\\"jaguar\\\" piece. The jaguar attempts to capture all of the dogs by hopping over them. The dogs attempt to surround the jaguar and block it from moving. Pieces move from the points where lines intersect to adjacent points along the lines on the board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Adugo\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3))\n                use:Vertex\n            )\n            (piece \"Jaguar\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Dog\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Dog2\"\n                    (difference (expand (sites Top) steps:2) (sites {\"C5\"}))\n                )\n                (place \"Jaguar1\" coord:\"C5\")\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (<= (count Pieces P2) 0) (result P2 Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nGala is a blockade game played among the Buginese and Makassarese people of Sulawesi in Indonesia.\n</description>\n<rules>\n5x5 board. Markings in the central square, each corner square, and the central square of each side. Black plays with thirteen pieces, white plays with ten. Black places the first piece on the central square, then players alternate turns placing a piece on their own half of the board. When all of the pieces are placed, players alternate turns moving pieces on space orthogonally. A piece is captured when it is surrounded on two opposite sides by opponent's pieces. Black wins if it can block white from being able to move. White wins if it is impossible for black to block them.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Gala\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5))\n            (hand Each)\n            (regions P1 (expand (sites Bottom) steps:2))\n            (regions P2 (expand (sites Top) steps:2))\n            (regions\n                \"MarkedCells\"\n                (union\n                    {\n                        (sites Centre)\n                        (sites Corners)\n                        (intersection\n                            (sites Outer)\n                            (sites Row (row of:(centrePoint)))\n                        )\n                        (intersection\n                            (sites Outer)\n                            (sites Column (column of:(centrePoint)))\n                        )\n                    }\n                )\n            )\n            (piece \"Marker\"\n                Each\n                (move Step Orthogonal (to if:(is Empty (to))))\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (handSite P1) count:10)\n                (place \"Marker2\" (handSite P2) count:12)\n                (place \"Marker2\" (centrePoint))\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to (intersection (sites Empty) (sites Mover)))\n                    )\n                )\n                (nextPhase\n                    (and\n                        (all\n                            Sites\n                            (sites Hand P1)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                        (all\n                            Sites\n                            (sites Hand P2)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (forEach\n                        Piece\n                        (then\n                            (custodial\n                                (from (last To))\n                                (between\n                                    if:(is Enemy (who at:(between)))\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Friend (who at:(to))))\n                            )\n                        )\n                    )\n                )\n                (end\n                    {\n                        (if (no Moves P1) (result P2 Win))\n                        (if (< (count Pieces P2) 2) (result P1 Win))\n                    }\n                )\n            )\n        }\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nWold und Schaaf (wolf and sheep) is a game played in Germany. One player plays as four sheep, which attempt to block one wolf, who attempts to move behind the line of sheep.\n</description>\n<rules>\n8x8 checkered board. One player plays as four sheep (white pieces), which begin on the four dark squares on one side of the board. The other player plays as one wolf (black piece), which can be placed on any dark space on the board. Players alternate turns moving a piece to an empty adjacent dark square on the board. The sheep move forward only but the wolf may also move backward. The goal of the sheep is to block the wolf from being able to move, the goal of the wolf is to move beyond the line of sheep.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Wolf und Schaaf\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Sheep\"\n                P2\n                N\n                (move Step (directions { FR FL }) (to if:(is Empty (to))))\n            )\n            (piece \"Wolf\" P1 (move Step Diagonal (to if:(is Empty (to)))))\n            (hand P1)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Wolf1\" (handSite P1))\n                (place \"Sheep2\" {\"A1\" \"C1\" \"E1\" \"G1\"})\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                P1\n                (play\n                    (move\n                        (from (handSite P1))\n                        (to (intersection (sites Phase 0) (sites Empty)))\n                    )\n                )\n                (nextPhase \"Movement\")\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (and (no Moves P1) (is Mover P1)) (result P2 Win))\n                (if\n                    (=\n                        0\n                        (count\n                            Sites\n                            in:(forEach\n                                (sites Occupied by:P2)\n                                if:(<=\n                                    (row of:(site))\n                                    (row of:(where \"Wolf\" P1))\n                                )\n                            )\n                        )\n                    )\n                    (result P1 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nJ\u00e4nes Soppi (\\\"the hare to the corner\\\") is a blockade game from Estonia.\n</description>\n<rules>\n\"3x3 intersecting lines, with triangles extending on opposite ends of the large square and the central line extending to the apices. One player plays as the notched stick, called the hare, and the other as three sharp sticks, known as the hounds. Players alternate turns placing a piece on the board. When a player has placed all of their pieces on the board, they move one of their pieces to an empty adjacent spot along the lines. When the hounds block the hare from being able to move, the hounds win.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Janes Soppi\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (rectangle 3 3)\n                        (shift 1.5 0.5 (rotate -90 (wedge 2)))\n                        (shift -1.5 0.5 (rotate 90 (wedge 2)))\n                    }\n                )\n                use:Vertex\n            )\n            (hand Each)\n            (piece \"Hound\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Hare\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Hound1\" (handSite P1) count:3)\n                (place \"Hare2\" (handSite P2))\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end { (if (no Moves P2) (result P1 Win)) })\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nShui Yen Ho-Shang is a hunt game from Sichuan, China. One player plays as a monk attempting to collect water, the other as the water trying to \\\"drown\\\" the monk.\n</description>\n<rules>\n5x5 intersecting lines, with the diagonals of every 2x2 square formed. On one side, a diamond intersects with the central point of that side, with diagonals drawn in the diamond. One player plays as the monk, placed at the intersection of the diamond and the main board. The other player plays as fifteen water pieces, placed on each point along the perimeter of the main board. Players take turns moving their pieces to one adjacent point following the lines on the board. The monk may capture two water pieces by moving to an empty space between two water pieces. The goal of the water pieces is to trap the monk on the far point of the diamond. The monk wins by capturing all of the water.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Shui Yen Ho-Shang\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    (rotate 45 (shift 1.5 4.2 (square 2 diagonals:Solid)))\n                    (square 5 diagonals:Alternating)\n                )\n                use:Vertex\n            )\n            (piece \"Marker\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Marker\"\n                P2\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then\n                        (intervene\n                            (from (last To))\n                            (to\n                                if:(is Enemy (who at:(to)))\n                                (apply (remove (to)))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker2\" coord:\"C5\")\n                (place\n                    \"Marker1\"\n                    (difference (sites Outer) (sites {\"B6\" \"C7\" \"D6\"}))\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Pieces P1) (result P2 Win))\n                (if\n                    (and\n                        (no Moves P2)\n                        (is In (where \"Marker\" P2) (sites {\"C7\"}))\n                    )\n                    (result P1 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLa Yagua is a hunt game played in South America. This version was played by the Chiriguano-Chane people of Argentina.It was usually drawn on the ground and played with seeds or stones.\n</description>\n<rules>\n5x5 grid, with diagonals in each quadrant. A triangle, with the apex connecting to the midpoint of one side of the grid. A line is drawn connecting the apex of the triangle to the midpoint of its base, and another triangle is drawn within the triangle connecting the midpoints of the larger triangle. One player plays as twelve dogs, arranged on the lower two rows of points and the two outer points on the central line; the other plays as one jaguar, placed on the apex of the smaller triangle. The jaguar moves first. Pieces move to an empty adjacent space along the lines of the board. The jaguar may hop over an adjacent dog to an empty space immediately on the opposite side of it, capturing the dog. Dogs cannot capture. The dogs win by blocking the jaguar so it cannot move; the jaguar wins when only six dogs remain.\n</rules>\n</query>\n</task>",
        "solution": "(game \"La Yagua\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (rotate\n                        180\n                        (merge\n                            (shift 0 2 (square 5 diagonals:Alternating))\n                            (wedge 3)\n                        )\n                    )\n                    edges:{ { 27 29} { 29 25 } }\n                )\n                use:Vertex\n            )\n            (piece \"Jaguar\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Dog\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Dog2\"\n                    (union\n                        (expand (sites Bottom) steps:1)\n                        (sites {\"A3\" \"E3\"})\n                    )\n                )\n                (place \"Jaguar1\" coord:\"C7\")\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (<= (count Pieces P2) 6) (result P2 Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nGame played in Sri Lanka during the nineteenth century, but likely to be older. It is a hunt game like others common in South Asia, particularly those known as \\\"tiger games.\\\"\n</description>\n<rules>\nThe game is played on a triangle board divided in half on its height and then in thirds with lines crossing the height perpendicularly. One player plays as the tiger, and the other plays as seven leopards. The tiger plays their piece on a point where lines intersect first, and then on subsequent turns the leopards are placed one-by-one. Moves occur along the lines to an adjacent intersection. The tiger captures may capture a leopard by hopping over it. The tiger's goal is to capture four of the leopards; the leopards' goal is to block the tiger so it cannot move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Hat Diviyan Keliya\"\n    (players 2)\n    (equipment\n        {\n            (board (scale 1 2 (wedge 4)) use:Vertex)\n            (hand Each)\n            (piece \"Tiger\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Leopard\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Tiger1\" (handSite P1) count:1)\n                (place \"Leopard2\" (handSite P2) count:7)\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play (forEach Piece))\n                (end\n                    {\n                        (if (no Moves Next) (result Next Loss))\n                        (if (<= (count Pieces P2) 3) (result P2 Loss))\n                    }\n                )\n            )\n        }\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nRefskak is a hunt game played in Iceland. One player, with twelve lambs, attempts to block the opponent, who plays as a fox, who tries to kill the lambs.\n</description>\n<rules>\nCross-shaped board, made of four 3x3 intersecting lines with diagonals. One player plays as the fox, which begins on the central space of the board. The other player plays as the lambs, who start in the spaces of one arm of the cross and the line of seven spots in front of that arm. Players alternate turns moving their pieces along the lines. The fox may capture one lamb by hopping over it in a straight line to an empty space on the opposite side of it. The fox wins by capturing seven lambs, the lambs win by blocking the fox so it cannot move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Refskak\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    (shift\n                        0\n                        (/ (- 7 3) 2)\n                        (rectangle 3 7 diagonals:Alternating)\n                    )\n                    (shift\n                        (/ (- 7 3) 2)\n                        0\n                        (rectangle 7 3 diagonals:Alternating)\n                    )\n                )\n                use:Vertex\n            )\n            (piece \"Lamb\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Fox\"\n                P2\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Fox2\" (centrePoint))\n                (place\n                    \"Lamb1\"\n                    (union\n                        (expand (sites Bottom) steps:2)\n                        (sites {\"A3\" \"B3\" \"F3\" \"G3\"})\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (<= (count Pieces P1) 6) (result P1 Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPon Chocotl is a hunt game played by the Pima people in the southwest United States. It seems to be related to hunt games played by the Spanish.\n</description>\n<rules>\n\"To be reconstructed. Rules as inferred by Murray 1951. One player is the bean, and the other player plays with twelve corn kernels. The corn kernels move along the lines. The goal is to corner the bean so that it cannot move. The bean may hop over the corn kernels to capture them or move to an adjacent empty point along the lines. The bean wins by reducing the opponent to nine corn kernels.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Pon Chochotl\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Corn\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Bean\"\n                P2\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (if\n                        (is Prev Mover)\n                        (move Pass)\n                        (move Step (to if:(is Empty (to))))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Corn1\"\n                    (union { (expand (sites Bottom)) (sites { \"A3\" \"E3\"}) })\n                )\n                (place \"Bean2\" (centrePoint))\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (<= (count Pieces P1) 9) (result P1 Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDemala Diviyan Keliya is a hunt game known by many names played throughout South Asia, and documented since the early twentieth century.\n</description>\n<rules>\nPlayed with three \\\"leopards\\\" and fifteen \\\"dogs.\\\" The pieces are placed on the intersections of the lines, and move along the lines to the next intersection. The game starts with the leopards on the board, but in the beginning the player controlling the dogs places one dog on an intersection until they are all on the board. After this, the dogs move in the same manner as the leopards. The leopard can hop over a dog as in draughts, capturing it. The leopard wins the game if it captures more than half of the dogs, the dogs win if they block the leopard from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Demala Diviyan Keliya\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (remove\n                        (merge\n                            (shift 0 2 (scale 8 2 (rectangle 3 2)))\n                            (scale 1 2 (wedge 5 4))\n                        )\n                        edges:{ { 0 1} { 2 3 } { 4 5 } }\n                    )\n                    edges:{\n                        {0 15} {18 1} {2 11} {14 3} {4 7} {10 5}\n                    }\n                )\n                use:Vertex\n            )\n            (hand P2)\n            (piece \"Tiger\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Dog\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Tiger1\" {\"H5\" \"G4\" \"I4\"})\n                (place \"Dog2\" (handSite P2) count:15)\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                P2\n                (play (move (from (handSite P2)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play (forEach Piece))\n                (end\n                    {\n                        (if (no Moves Next) (result Next Loss))\n                        (if (<= (count Pieces P2) 7) (result P2 Loss))\n                    }\n                )\n            )\n        }\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThe Jeu Militaire is a game documented since the nineteenth century in France. It was reported by several sources as being played in the French military.\n</description>\n<rules>\n\"The board consists of three intersecting lines, with diagonals drawn in the square formed. On opposite ends of the square, the central line is extended beyond the square and lines drawn from the adjacent corners to the end of this line, forming two triangles at opposite ends. One player takes the part of three white towers, the other the part of a single black army piece. First the army moves their piece, then the towers move one of their pieces, play alternating thereafter until the game is ended. A tower piece may move one step along a marked line in any forward or sideways direction. Tower pieces cannot move backwards, diagonally or otherwise, towards the end of the board from which they started. The army may move one step in any direction along a marked line. The army wins by passing the towers and reaching the end of the board from which they started. The towers win by trapping the army so that it cannot move in its turn.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Jeu Militaire\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (rotate\n                    90\n                    (merge\n                        {\n                            (rectangle 3 3 diagonals:Alternating)\n                            (shift 1.5 0.5 (rotate -90 (wedge 2)))\n                            (shift -1.5 0.5 (rotate 90 (wedge 2)))\n                        }\n                    )\n                )\n                use:Vertex\n            )\n            (piece \"Pawn\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Pawn\"\n                P2\n                N\n                (move\n                    Step\n                    (directions { Forwards Rightward Leftward })\n                    (to if:(is Empty (to)))\n                )\n            )\n            (regions \"Home\" P2 (sites {\"B1\" \"C2\" \"A2\"}))\n            (regions \"Home\" P1 (sites {\"B2\"}))\n        }\n    )\n    (rules\n        (start { (place \"Pawn1\" (sites P1)) (place \"Pawn2\" (sites P2)) })\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (is In (where \"Pawn\" P1) (sites P2)) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nWolf and Sheep is a hunt game, said to be originally derived from Scandinavian halatafl games. Played on an 8x8 checkerboard and only played on the dark squares.\n</description>\n<rules>\nFour pieces are the sheep; they are placed on the dark squares along one side of the board. one piece is the wolf; it is placed on any dark square on the side opposite the sheep. The goal of the wolf is to reach one of the sheep's original spaces, the sheep's goal is to block the wolf from doing so. Sheep move diagonally forward one square, the wolf moves diagonally forward or backward one square.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Wolf and Sheep\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Sheep\"\n                P1\n                N\n                (move Step (directions { FR FL }) (to if:(is Empty (to))))\n            )\n            (piece \"Wolf\" P2 (move Step Diagonal (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Wolf2\" {\"D8\"})\n                (place \"Sheep1\" {\"A1\" \"C1\" \"E1\" \"G1\"})\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (and (no Moves P2) (is Mover P2)) (result P1 Win))\n                (if (is In (where \"Wolf\" P2) (sites Bottom)) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nShi Liu Kan Tsiang K\u00fcn is a hunt game from nineteenth century China. Sixteen pieces play against one general. The game was played by children and day laborers on boards drawn on the street.\n</description>\n<rules>\nBoard with 5x5 lines, diagonals drawn in the four quadrants of the board, and a triangle at the top, connecting the apex with the three central points at the top edge, and a line perpendicularly bisecting the height of the triangle. One player plays as the general, placed in the central position. The other player plays with sixteen pieces, arranged on the perimeter points of the square. Pieces move one spot along the lines on the board. The general may capture pieces when it moves into a space that is surrounded on two opposite sides, along the lines on the board, thus capturing the pieces on either side of it. Conversely, the general can be captured by surrounding it on two opposite sides with pieces. Only the general may enter the triangle. The goal of the general is to capture all of the opponent's pieces, the goal of the person playing with sixteen pieces is to capture the general. If the general becomes trapped in the triangle, the opponent wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Shi Liu Kan Tsiang Kun\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    (scale 2 (square 5 diagonals:Alternating))\n                    (shift 2 8 (rotate 180 (wedge 3)))\n                )\n                use:Vertex\n            )\n            (piece \"General\"\n                P1\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then\n                        (intervene\n                            (from (last To))\n                            (to\n                                if:(is Enemy (who at:(to)))\n                                (apply (remove (to)))\n                            )\n                        )\n                    )\n                )\n            )\n            (piece \"Marker\"\n                P2\n                (move\n                    Step\n                    (to\n                        if:(and\n                            (not (is In (to) (expand (sites Top))))\n                            (is Empty (to))\n                        )\n                    )\n                    (then\n                        (custodial\n                            (from (last To))\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Friend (who at:(to))))\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"General1\" (ahead (centrePoint) S))\n                (place\n                    \"Marker2\"\n                    (difference (sites Outer) (expand (sites Top)))\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Pieces P2) (result P1 Win))\n                (if (no Pieces P1) (result P2 Win))\n                (if\n                    (and\n                        {\n                            (is In (where \"General\" P1) (expand (sites Top)))\n                            (>= (count Pieces P2) 2)\n                            (= (who at:(coord \"D5\")) P2)\n                        }\n                    )\n                    (result P2 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThe game is played on a 5x5 board with the center square representing the King's Valley. Players start with 5 pieces on opposites sites of the board, with the center pieces being the kings.\n</description>\n<rules>\nKing's Valley is a very simple and easy game to play. This is because all the pieces move the same. Any piece can move straight horizontal, vertical or diagonal, but always as far as possible. Pieces always stop their movement either at the sides of the board or before another piece in the same row, column, or diagonal. The winner is the first player that manages to move his king piece to the central square of the board, which represents the King's Valley.\n</rules>\n</query>\n</task>",
        "solution": "(game \"King's Valley\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5))\n            (piece \"Disc\"\n                Each\n                (move (from) (to (sites LineOfSight Farthest at:(from))))\n            )\n            (piece \"King\"\n                Each\n                (move (from) (to (sites LineOfSight Farthest at:(from))))\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"King1\" (intersection (sites Bottom) (sites Column 2)))\n                (place \"King2\" (intersection (sites Top) (sites Column 2)))\n                (place \"Disc1\" (difference (sites Bottom) (sites Column 2)))\n                (place \"Disc2\" (difference (sites Top) (sites Column 2)))\n            }\n        )\n        (play (forEach Piece))\n        (end\n            (if\n                (is In (where \"King\" Mover) (sites Centre))\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game is played on the following 8x8 board and can be considered as a variant of Breakthrough.\n</description>\n<rules>\nMOVE - On each turn, each player must do one of the following actions: - Move one friendly stone (the missiles) one cell forward (orthogonally or diagonally) - Explode one friendly stone, i.e., capture all stones of either color orthogonally and diagonally adjacent including itself. GOAL - Wins the player that move a stone into the last row, or is the only with stones in the board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Bombardment\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board (square 8))\n            (piece \"NuclearBomb\"\n                Each\n                (or\n                    (move Step Forwards (to if:(is Empty (to))))\n                    (move\n                        Select\n                        (from (from))\n                        (then\n                            (forEach\n                                Site\n                                (sites Around (last To) includeSelf:True)\n                                (if (is Occupied (site)) (remove (site)))\n                            )\n                        )\n                    )\n                )\n            )\n            (regions P1 (sites Top))\n            (regions P2 (sites Bottom))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"NuclearBomb1\" (expand (sites Bottom)))\n                (place \"NuclearBomb2\" (expand (sites Top)))\n            }\n        )\n        (play (forEach Piece))\n        (end\n            (if\n                (or (is In (last To) (sites Mover)) (no Pieces Next))\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nGyan Chaupar is a game originating in India at an unknown time in the past. Since its origin in India, the game had moralistic tones, with setback and boons in the game associated with immoral or moral behavior, respectively. There are different variations based on Jain, Hindu, Islamic, and other religious traditions. It came to England around 1890 and was commercialized in other places like the Unites States as \\\"Snakes (or Chutes) and Ladders.\\\"\n</description>\n<rules>\n10x10 board. Each player has one piece and move according to the roll of one die. Representations of snakes and ladders are scattered throughout the board, connecting two spaces. If a player lands at the bottom of the ladder at the end of their move, they advance to the space at the top of the ladder. If a player ends their turn on a space with the head of a snake, they move down to the space with the tail of the snake. The first player to move off the last space of the board wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Gyan Chaupar\"\n    (players 4)\n    (equipment\n        {\n            (board\n                (square 10)\n                (track\n                    \"Track\"\n                    \"0,E,N1,W,N1,E,N1,W,N1,E,N1,W,N1,E,N1,W,N1,E,N1,W\"\n                    directed:True\n                )\n            )\n            (piece \"Pawn\"\n                Each\n                (move\n                    (from (from) level:(level))\n                    (to (mapEntry (trackSite Move steps:(count Pips))))\n                )\n            )\n            (dice num:1)\n            (map\n                {\n                    (pair \"B1\" \"C4\")\n                    (pair \"D1\" \"G2\")\n                    (pair \"H1\" \"J4\")\n                    (pair \"A3\" \"B5\")\n                    (pair \"E4\" \"D5\")\n                    (pair \"H3\" \"D9\")\n                    (pair \"J8\" \"J10\")\n                    (pair \"A8\" \"A10\")\n                    (pair \"J6\" \"G7\")\n                    (pair \"B7\" \"C2\")\n                    (pair \"G5\" \"F3\")\n                    (pair \"E2\" \"F1\")\n                    (pair \"D7\" \"A6\")\n                    (pair \"C10\" \"C8\")\n                    (pair \"H10\" \"H8\")\n                    (pair \"E10\" \"E8\")\n                    (pair \"G9\" \"D3\")\n                    (pair \"H6\" \"E6\")\n                    (pair \"I5\" \"J2\")\n                }\n            )\n        }\n    )\n    (rules\n        (start\n            (place Stack items:{\"Pawn4\" \"Pawn3\" \"Pawn2\" \"Pawn1\"} coord:\"A1\")\n        )\n        (play (do (roll) next:(forEach Piece)))\n        (end\n            (if\n                (is In (last To) (sites { (trackSite EndSite) }))\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCenter is a strange little game invented by Alek Erickson and Michael Amundsen in February of 2022. The goal is to place a stone on the center of the board, but it's not as easy as it sounds.\n</description>\n<rules>\nTake turns placing stones on a hexhex board of size 4, or a square board of an odd size not larger than 9. The winner is the player who places a stone on the center cell. A placement N steps away from the perimeter must have at least N friendly pieces in sight. On the square board, pieces see in all 8 directions.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Center\"\n    (players 2)\n    (equipment\n        {\n            (board (square 9) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (to\n                    (sites Empty)\n                    if:(<=\n                        (count Steps All (to) (sites Perimeter))\n                        (count\n                            Sites\n                            in:(intersection\n                                (sites LineOfSight at:(to) All)\n                                (sites Occupied by:Mover)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (is Occupied (centrePoint)) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAboyne is played on a 5x5 hexagonal board.\n</description>\n<rules>\nAboyne is a two-player strategy game played on a 5x5 hexagonal board. Each player has a set of stones, and the goal is to move one of your stones into your own goal cell, located on the opposite side of the board, or to stalemate your opponent. A stone is considered blocked if it is adjacent to an enemy stone, and a blocked stone cannot be moved. At each turn, a player must move one of their non-blocked stones to an adjacent empty cell or jump over a line of friendly stones, landing on the immediate next cell. If the landing cell is occupied by an enemy stone, that stone is captured. A stone cannot move into the opponent's goal cell. The game ends when one player achieves their goal or when neither player can make a legal move, resulting in a stalemate.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Aboyne\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (sites {0 5 11 18 27 35 43 50 56}))\n                (place \"Marker2\" (sites {4 10 17 25 33 42 49 55 60}))\n            }\n        )\n        (play\n            (forEach\n                Piece\n                (or\n                    {\n                        (move\n                            Step\n                            (from\n                                if:(=\n                                    (count\n                                        Sites\n                                        in:(intersection\n                                            (sites Around (from))\n                                            (sites Occupied by:Next)\n                                        )\n                                    )\n                                    0\n                                )\n                            )\n                            (to\n                                if:(and\n                                    (not (is Friend (who at:(to))))\n                                    (!= (to) (if (is Next P1) 34 26))\n                                )\n                                (apply\n                                    if:(is Enemy (who at:(to)))\n                                    (remove (to))\n                                )\n                            )\n                        )\n                        (move\n                            Hop\n                            (from\n                                if:(=\n                                    (count\n                                        Sites\n                                        in:(intersection\n                                            (sites Around (from))\n                                            (sites Occupied by:Next)\n                                        )\n                                    )\n                                    0\n                                )\n                            )\n                            (between\n                                (max 7)\n                                if:(is Friend (who at:(between)))\n                            )\n                            (to\n                                if:(and\n                                    (not (is Friend (who at:(to))))\n                                    (!= (to) (if (is Next P1) 34 26))\n                                )\n                                (apply\n                                    (if\n                                        (is Enemy (who at:(to)))\n                                        (remove (to))\n                                    )\n                                )\n                            )\n                        )\n                    }\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (is Mover (who at:(if (is Mover P1) 34 26)))\n                    (result Mover Win)\n                )\n                (if (no Moves Next) (result Mover Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKnightthrough is a Chess variant similar to Breakthrough, using knights instead of pawns.\n</description>\n<rules>\nPieces move as knights in Chess. The goal is to be the first player to reach the opposite side of the board from the starting position.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Knightthrough\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Knight\"\n                Each\n                (move\n                    Leap\n                    { { F F R F } { F F L F } }\n                    forward:True\n                    (to\n                        if:(not (is Friend (who at:(to))))\n                        (apply (remove (to)))\n                    )\n                )\n            )\n            (regions P1 (sites Top))\n            (regions P2 (sites Bottom))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Knight1\" (expand (sites Bottom)))\n                (place \"Knight2\" (expand (sites Top)))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (is In (last To) (sites Mover)) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nO-Pat-Kono is a two-player game of alignment played since at least the late nineteenth century in Korea.\n</description>\n<rules>\nPlayed on a 4x4 grid. Each player has seven pieces, placed on the intersections of the lines, five on the back row and one on each outer intersection of the second line. Pieces are moved diagonally across the squares. The object is to place one's pieces in the opponent's starting position. The first player to do so wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"O-Pat-Kono\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5) use:Vertex)\n            (piece \"Marker\" Each (move Step Diagonal (to if:(is Empty (to)))))\n            (regions \"Home\" P1 (union (sites Bottom) (sites {\"A2\" \"E2\"})))\n            (regions \"Home\" P2 (union (sites Top) (sites {\"A4\" \"E4\"})))\n        }\n    )\n    (rules\n        (start { (place \"Marker1\" (sites P1)) (place \"Marker2\" (sites P2)) })\n        (play (forEach Piece))\n        (end\n            (if (= (sites Occupied by:Mover) (sites Next)) (result Mover Win))\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLelac is a two-player strategy game related to mancalas.\n</description>\n<rules>\nThe game is played on a board with ten round pits arranged in a circle. Each player owns the semicircle closest to him. The game requires ten seeds and one standard six-faced die. At the start of the game, each pit contains one seed. During their turn, a player rolls a die. He then chooses one of his nonempty pits to sow. They take one seed from the sown pit, and move it counterclockwise according to the die value rolled. Then, they must roll to move each remaining seed from the sown pit. The turn only ends once the sown pit is empty. So, for example, if a player chooses to sow a pit with 4 seeds after his initial roll, 3 additional rolls will be needed. A player wins when all ten seeds are on their part of the board at the end of their turn.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Lelac\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (concentric {0 10})\n                (track \"Track\" {0 1 2 3 4 5 6 7 8 9} loop:True)\n                use:Vertex\n            )\n            (piece \"Square\" Shared)\n            (dice d:6 num:1)\n            (regions P1 (expand (sites Bottom) steps:2))\n            (regions P2 (expand (sites Top) steps:2))\n        }\n    )\n    (rules\n        (start (set Count 1 to:(sites Board)))\n        (play\n            (do\n                (roll)\n                next:(move\n                    (from\n                        (if\n                            (is Prev Mover)\n                            (sites { (last From) })\n                            (forEach (sites Mover) if:(is Occupied (site)))\n                        )\n                    )\n                    (to (trackSite Move from:(from) steps:(count Pips)))\n                    (then (if (is Occupied (last From)) (moveAgain)))\n                )\n            )\n        )\n        (end\n            (forEach\n                Player\n                if:(all\n                    Sites\n                    (sites Player)\n                    if:(and (is Next Player) (is Empty (site)))\n                )\n                (result Player Loss)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nA scoring game involving diagonals of the board.\n</description>\n<rules>\nTURN - On each turn, each player drops a friendly stone on an empty cell. If a diagonal line is full (i.e., there are no empty cells on that diagonal), the player who dropped the last stone achieves so many points as the number of friendly stones on the finished line. Two lines can be finished on one turn, the player achieves points for both lines (the dropped stone counts twice, once for each diagonal). A diagonal line must have at least 2 stones. So, corner cells do not count as diagonals. GOAL - When all cells are occupied, wins the player with more points.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Diagonals\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8) use:Vertex)\n            (piece \"Ball\" Each)\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (to (sites Empty))\n                (then\n                    (and\n                        (if\n                            (not (is In (last To) (sites {\"A8\" \"H1\"})))\n                            (if\n                                (all\n                                    Sites\n                                    (union\n                                        (sites\n                                            Direction\n                                            from:(last To)\n                                            NE\n                                            included:True\n                                        )\n                                        (sites Direction from:(last To) SW)\n                                    )\n                                    if:(is Occupied (site))\n                                )\n                                (addScore\n                                    Mover\n                                    (count\n                                        Sites\n                                        in:(forEach\n                                            (union\n                                                (sites\n                                                    Direction\n                                                    from:(last To)\n                                                    NE\n                                                    included:True\n                                                )\n                                                (sites\n                                                    Direction\n                                                    from:(last To)\n                                                    SW\n                                                )\n                                            )\n                                            if:(is Friend (who at:(site)))\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                        (if\n                            (not (is In (last To) (sites {\"A1\" \"H8\"})))\n                            (if\n                                (all\n                                    Sites\n                                    (union\n                                        (sites\n                                            Direction\n                                            from:(last To)\n                                            SE\n                                            included:True\n                                        )\n                                        (sites Direction from:(last To) NW)\n                                    )\n                                    if:(is Occupied (site))\n                                )\n                                (addScore\n                                    Mover\n                                    (count\n                                        Sites\n                                        in:(forEach\n                                            (union\n                                                (sites\n                                                    Direction\n                                                    from:(last To)\n                                                    SE\n                                                    included:True\n                                                )\n                                                (sites\n                                                    Direction\n                                                    from:(last To)\n                                                    NW\n                                                )\n                                            )\n                                            if:(is Friend (who at:(site)))\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (is Full) (byScore)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPasa is a dice game that was played in the Andes since at least the eighteenth century. It involves a special seven-sided die, and includes rolls where players may lose points. The highest roll is called \\\"Huayru,\\\" which is a word for dice known to be used by the Inka.\n</description>\n<rules>\nThe board is a double-headed eagle, with two lines of ten holes. One seven-sided die. One side has a special mark, one is blank, and the others are numbered 1-5. The special mark scores 10, the blank side scores -10. Players roll the die, and add up their scores as they go, placing a peg in a hole to mark ten points. The player who reaches 100 points first wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Pasa\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 10 2))\n            (piece \"Disc\" Each)\n            (dice d:7 from:0 num:1)\n            (map\n                {\n                    (pair 0 -10)\n                    (pair 1 1)\n                    (pair 2 2)\n                    (pair 3 3)\n                    (pair 4 4)\n                    (pair 5 5)\n                    (pair 6 6)\n                    (pair 7 10)\n                }\n            )\n        }\n    )\n    (rules\n        (play\n            (do\n                (roll (then (addScore Mover (mapEntry (count Pips)))))\n                next:(move\n                    Pass\n                    (then\n                        (and\n                            (remove (sites Column (- (mover) 1)))\n                            (if\n                                (>= (score Mover) 10)\n                                (add\n                                    (piece (id \"Disc\" Mover))\n                                    (to\n                                        (intersection\n                                            (sites Column (- (mover) 1))\n                                            (sites\n                                                Row\n                                                (- (/ (score Mover) 10) 1)\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (>= (score Mover) 100) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHad is a race game played in the Bordj Bou Arreridj region of Algeria in the early twentieth century. It resembles other games such as Tab which are popular in North Africa and Southwest Asia.\n</description>\n<rules>\n3x14 board. Fourteen pieces per player, placed in the outer rows of the board. Two knucklebones used as dice. Players move their pieces according to the throws of the knucklebones. Pieces move in a boustrophedon path along the board. The first player to remove their pieces from the board wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Had\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (rectangle 3 14)\n                {\n                    (track \"Track1\" \"0,E,N1,W,N1,E\" P1 directed:True)\n                    (track \"Track2\" \"41,W,S1,E,S1,W\" P2 directed:True)\n                }\n            )\n            (dice d:4 num:2)\n            (piece \"Marker\"\n                Each\n                (if\n                    (= (trackSite Move steps:(count Pips)) Off)\n                    (move Remove (from))\n                    (move\n                        (from)\n                        (to\n                            (trackSite Move steps:(count Pips))\n                            if:(is Empty (to))\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            { (place \"Marker1\" (sites Bottom)) (place \"Marker2\" (sites Top)) }\n        )\n        (play (do (roll) next:(forEach Piece)))\n        (end (if (no Pieces Mover) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nInvented by Colin Vout in 1972 as described in the book Winning Ways for Your Mathematical Plays.\n</description>\n<rules>\nPlayed on a nxn board. Each player has n-1 cars, that can move either forward or up and down. Cars can leave the board once they have reached the opposite edge. First player to run out of legal moves wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Dodgem\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3))\n            (piece \"Car\"\n                P1\n                E\n                (if\n                    (is In (from) (sites Right))\n                    (move Remove (from))\n                    (move\n                        Step\n                        (directions { Forward Leftward Rightward })\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n            (piece \"Car\"\n                P2\n                N\n                (if\n                    (is In (from) (sites Top))\n                    (move Remove (from))\n                    (move\n                        Step\n                        (directions { Forward Leftward Rightward })\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Car1\" (difference (sites Left) (sites {\"A1\"})))\n                (place \"Car2\" (difference (sites Bottom) (sites {\"A1\"})))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Mover) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLaquet is a race game from medieval Spain that is similar to other European Tables games. It is documented in the Libro de los Juegos of Alfonso X.\n</description>\n<rules>\n2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. One player places fourteen of their pieces on the first point of the table to their right closest to them, with the other piece on the point opposite it on the other side of the board. The other player places three pieces on each of the four spots following the spot with the other player's fourteen, two on the spot following this, and one on the opposite end of the row of spots where the opponent's single piece is located. Two six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. Players move along the spaces of the board toward the spot where the first player's single piece is located, and from there they bear off. Pieces cannot be hit as in similar games. If a player cannot play the value on a die (or on both dice), the opponent may play it. The first player to bear off all of their pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Laquet\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (rectangle 1 6)\n                        (shift 7 0 (rectangle 1 6))\n                        (shift 0 6 (rectangle 1 6))\n                        (shift 7 6 (rectangle 1 6))\n                    }\n                )\n                (track\n                    \"Track1\"\n                    {\n                        11 10 9 8 7 6 5 4 3 2 1 0 12 13 14 15 16 17 18 19 20\n                        21 22 23\n                    }\n                    directed:True\n                )\n                use:Vertex\n            )\n            (dice d:6 num:2)\n            (piece \"Disc\"\n                Each\n                (forEach\n                    Die\n                    if:(!= (pips) 0)\n                    (if\n                        (= (trackSite Move steps:(pips)) Off)\n                        (move Remove (from))\n                        (if\n                            (not\n                                (is\n                                    Enemy\n                                    (who at:(trackSite Move steps:(pips)))\n                                )\n                            )\n                            (move (from) (to (trackSite Move steps:(pips))))\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place Stack \"Disc1\" 11 count:14)\n                (place Stack \"Disc1\" 23)\n                (place Stack \"Disc2\" (sites {7 8 9 10}) count:3)\n                (place Stack \"Disc2\" 6 count:2)\n                (place Stack \"Disc2\" 12)\n            }\n        )\n        (play\n            (do\n                (if (and (not (is Pending)) (not (is Prev Mover))) (roll))\n                next:(if\n                    (can Move (forEach Piece))\n                    (forEach\n                        Piece\n                        top:True\n                        (then (if (not (all DiceUsed)) (moveAgain)))\n                    )\n                    (move Pass (then (set Pending)))\n                )\n            )\n        )\n        (end (if (no Pieces Mover) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCirgol is a tiny Mancala game invented for a Kaggle competition\n</description>\n<rules>\nThe game is played on a board with ten holes arranged in a circle, with four counters in each hole at the start of the game. Players take turns sowing counters in an anti-clockwise direction. If the final counter lands in an empty hole, the contents of the next hole are captured. During the first three turns, no capture can be made. The game continues until there are less than three counters left on the board. The player with the most captured counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Cirgol\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (concentric {10})\n                (track \"Track\" {0 2 4 6 8 9 7 5 3 1} loop:True)\n                use:Vertex\n            )\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Board)))\n        (play\n            (move\n                Select\n                (from (sites Board) if:(> (count at:(from)) 0))\n                (then\n                    (sow\n                        apply:(if\n                            (and\n                                {\n                                    (= 1 (count at:(to)))\n                                    (>=\n                                        (count\n                                            at:(trackSite\n                                                Move\n                                                from:(to)\n                                                steps:1\n                                            )\n                                        )\n                                        1\n                                    )\n                                    (> (count Moves) 3)\n                                }\n                            )\n                            (fromTo\n                                (from (trackSite Move from:(to) steps:1))\n                                (to (handSite Mover))\n                                count:(count\n                                    at:(trackSite Move from:(to) steps:1)\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (<= (count Pieces in:(sites Board)) 3)\n                (byScore\n                    {\n                        (score P1 (count Cell at:(handSite P1)))\n                        (score P2 (count Cell at:(handSite P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSowing is a two players game.\n</description>\n<rules>\nThe last to move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Sowing\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (rectangle 1 8)\n                {\n                    (track \"Track1\" \"0,E\" P1 directed:True)\n                    (track \"Track2\" \"7,W\" P2 directed:True)\n                }\n                use:Vertex\n            )\n            (regions P1 (sites Top))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start\n            (place\n                Stack\n                \"Seed\"\n                (sites {0 1 2 3 4 5 6 7})\n                counts:{1 2 2 1 1 2 2 1}\n            )\n        )\n        (play\n            (move\n                Select\n                (from\n                    (sites Mover)\n                    if:(and\n                        {\n                            (is Occupied (from))\n                            (is\n                                Occupied\n                                (trackSite\n                                    Move\n                                    Mover\n                                    steps:(size Stack at:(from))\n                                )\n                            )\n                        }\n                    )\n                )\n                (then (sow \"Track\" owner:(mover)))\n            )\n        )\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nWari is a two-row mancala-style board game played by the Ashanti people of West Africa.\n</description>\n<rules>\n2x6 board with two stores. Four counters in each hole. Players alternate turns sowing from one of the holes on their side of the board in an anticlockwise direction. When a counter lands in one of the opponent's holes, making it contain six counters, those counters are captured. The player who captures the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Wari\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 { (track \"Track\" \"1,E,N,W\" loop:True) })\n            (piece \"Seed\" Shared)\n            (hand Each)\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (map { (pair P1 FirstSite) (pair P2 LastSite) })\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from (sites Mover) if:(> (count at:(from)) 0))\n                (then\n                    (sow\n                        apply:(if\n                            (= 6 (count at:(to)))\n                            (fromTo (from (to)) (to (mapEntry Mover)) count:6)\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Mover)\n                (byScore\n                    {\n                        (score P1 (count at:(mapEntry P1)))\n                        (score P2 (count at:(mapEntry P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nWoli is a two-row mancala-style game played in the Senegal Valley of West Africa. It was popular among young married women.\n</description>\n<rules>\n2x6 board. Six counters in each hole. A player picks up all of the counters in one of the holes in their row and sows them one-by-one in a clockwise direction in consecutive holes from the hole the pieces originated. The starting hole is always left empty, even if a player sows in a complete circuit of the board, the original house is skipped and sowing continues in the next hole after it. Players capture counters when the final counter is sown in the opponent's row and the hole containing it has two or three counters (counting the counter just dropped into it). If the hole before it also has two or three counters, these are also captured and so on until reaching a hole without two or three counters or one not belonging to the opponent. A move which would capture all of the opponent's counters is not allowed. If an opponent's holes are all empty, the other player must make a move placing counters in the opponent's row. If not possible, the player captures all the counters in their row. The player who has captured the most counters wins. If the game continues in a repeating loop, the players can agree to end the game and capture the counters remaining in their row.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Woli\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"5,W,N,E\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 6 to:(sites Track)))\n        (play\n            (if\n                (is Proposed \"End\")\n                (or (move Vote \"End\") (move Vote \"No\"))\n                (or\n                    (if (is Cycle) (move Propose \"End\"))\n                    (do\n                        (move\n                            Select\n                            (from (sites Mover) if:(< 0 (count at:(from))))\n                            (then\n                                (sow\n                                    if:(and\n                                        (is In (to) (sites Next))\n                                        (or\n                                            (= (count at:(to)) 2)\n                                            (= (count at:(to)) 3)\n                                        )\n                                    )\n                                    apply:(fromTo\n                                        (from (to))\n                                        (to (handSite Mover))\n                                        count:(count at:(to))\n                                    )\n                                    includeSelf:False\n                                    backtracking:True\n                                )\n                            )\n                        )\n                        ifAfterwards:(< 0 (count in:(sites Next)))\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (or (no Moves Mover) (is Decided \"End\"))\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+\n                                (count Cell at:(handSite P1))\n                                (count in:(sites P1))\n                            )\n                        )\n                        (score\n                            P2\n                            (+\n                                (count Cell at:(handSite P2))\n                                (count in:(sites P2))\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBoukerourou is a two-row mancala-style board game played in the Tidikelt region of Algeria at the turn of the twentieth century.\n</description>\n<rules>\n2x4 board, rendered as holes in the sand. Six counters per hole. A player picks up all of the counters in one of the holes in their row and sows them in an anti-clockwise direction. When the final counter lands in an empty hole, the contents of the following hole are picked up and the sowing continues. When the final counter lands in a hole in the opponent's row causing it to contain six counters, these counters are captured. Play continues until one player has no counters in their holes, and the opponent wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Boukerourou\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 4 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (piece \"Seed\" Shared)\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n        }\n    )\n    (rules\n        (start (set Count 6 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from\n                    (if\n                        (is Prev Mover)\n                        (sites\n                            {\n                                (trackSite\n                                    Move\n                                    from:(last To afterConsequence:True)\n                                    \"Track\"\n                                    steps:1\n                                )\n                            }\n                        )\n                        (sites Mover)\n                    )\n                    if:(> (count at:(from)) 0)\n                )\n                (then\n                    (sow\n                        apply:(if\n                            (and\n                                (= 1 (count at:(to)))\n                                (is\n                                    Occupied\n                                    (trackSite Move from:(to) \"Track\" steps:1)\n                                )\n                            )\n                            (moveAgain)\n                            (if\n                                (and\n                                    (is In (to) (sites Next))\n                                    (= 6 (count at:(to)))\n                                )\n                                (remove (to))\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (forEach\n                Player\n                if:(all Sites (sites Player) if:(= 0 (count at:(site))))\n                (result Player Loss)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNty\u00e9ng\u00e9 is a two-row mancala-style board game played by the Mbenge people in Gabon. It is sometimes played on a board, but more frequently is made in the ground and played with seeds or pebbles.\n</description>\n<rules>\n2x8 board. Four counters per hole. Players alternate turns taking the counters from one of the holes in their row and sowing them in an anticlockwise direction. When the final counter falls into a hole containing one or three counters, causing it to contain two or four, these counters are captured. Play continues until all of the counters have been captured. The player who captured the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ntyenge\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 8 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (piece \"Seed\" Shared)\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from (sites Mover) if:(> (count at:(from)) 0))\n                (then\n                    (sow\n                        apply:(if\n                            (or (= 2 (count at:(to))) (= 4 (count at:(to))))\n                            (fromTo\n                                (from (to))\n                                (to (handSite Mover))\n                                count:(count at:(to))\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (all Sites (sites Board) if:(= 0 (count at:(site))))\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+\n                                (count Cell at:(handSite P1))\n                                (count in:(sites P1))\n                            )\n                        )\n                        (score\n                            P2\n                            (+\n                                (count Cell at:(handSite P2))\n                                (count in:(sites P2))\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFrench Wari is a two-row mancala-style board game from Barbados. It was documented in the early twentieth century, but likely was played on the island by enslaved African people who brought the game from West Africa. It is similar to other mancala games found throughout the Caribbean and West Africa.\n</description>\n<rules>\n2x6 board. Play begins with four counters in each hole. Moves begin from any hole in the player's row and sowing proceeds in an anti-clockwise direction. If the final counter of a sowing lands in an occupied hole, these counters are lifted and sowing continues. If the final counter lands in an empty hole, any counters in the opposite hole are taken and the turn ends. Play continues until one player cannot move. When this happens, the other player captures the remaining counters and the game ends. The player with the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"French Wari\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from\n                    (if\n                        (is Prev Mover)\n                        (sites { (last To afterConsequence:True) })\n                        (sites Mover)\n                    )\n                    if:(> (count at:(from)) 0)\n                )\n                (then\n                    (sow\n                        apply:(if\n                            (> (count at:(to)) 1)\n                            (moveAgain)\n                            (if\n                                (>\n                                    (count\n                                        at:(if\n                                            (is In (to) (sites Bottom))\n                                            (+ (to) 6)\n                                            (- (to) 6)\n                                        )\n                                    )\n                                    0\n                                )\n                                (fromTo\n                                    (from\n                                        (if\n                                            (is In (to) (sites Bottom))\n                                            (+ (to) 6)\n                                            (- (to) 6)\n                                        )\n                                    )\n                                    (to (handSite Mover))\n                                    count:(count\n                                        at:(if\n                                            (is In (to) (sites Bottom))\n                                            (+ (to) 6)\n                                            (- (to) 6)\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Mover)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+\n                                (count Cell at:(handSite P1))\n                                (count in:(sites P1))\n                            )\n                        )\n                        (score\n                            P2\n                            (+\n                                (count Cell at:(handSite P2))\n                                (count in:(sites P2))\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMankala is a two-row mancala-style game, in which sowing is the primary movement mechanism in the game. It was documented in Egypt during the eighteenth century.\n</description>\n<rules>\n2x6 board. Six counters in each hole. Players take the contents of one of their holes and sow in an anti-clockwise direction. When the final counter of a sowing lands in a hole, making it contain two, four, or six counters, these counters are taken. If the second to last hole also contains two, four, or six counters, these are also taken, continuing in an unbroken line until a hole with containing a number of counters other than two, four, or six. The game continues until all of the counters have been captured. The player who captured the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Mankala\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 6 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from (sites Mover) if:(< 0 (count at:(from))))\n                (then\n                    (sow\n                        if:(or\n                            {\n                                (= (count at:(to)) 2)\n                                (= (count at:(to)) 4)\n                                (= (count at:(to)) 6)\n                            }\n                        )\n                        apply:(fromTo\n                            (from (to))\n                            (to (handSite Mover))\n                            count:(count at:(to))\n                        )\n                        backtracking:True\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (and (no Moves Next) (no Moves Mover))\n                (byScore\n                    {\n                        (score P1 (count Cell at:(handSite P1)))\n                        (score P2 (count Cell at:(handSite P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nW\u00f6r\u00e9 was observed in the early twentieth century in St. Louis, Senegal. It was considered a game for women, and in some families it is forbidden for young girls and uncircumcised boys to play it.\n</description>\n<rules>\nCounters are placed in piles: two rows of four piles. Six counters in each pile. A player sows from any of the piles in the player's row in an anti-clockwise direction. Any pile which contains 2, 4, or 6 counters is captured. The player with the most counters captured wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Wore\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 4 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 6 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from (sites Mover) if:(< 0 (count at:(from))))\n                (then\n                    (sow\n                        if:(or\n                            {\n                                (= (count at:(to)) 2)\n                                (= (count at:(to)) 4)\n                                (= (count at:(to)) 6)\n                            }\n                        )\n                        apply:(fromTo\n                            (from (to))\n                            (to (handSite Mover))\n                            count:(count at:(to))\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Mover)\n                (byScore\n                    {\n                        (score P1 (count Cell at:(handSite P1)))\n                        (score P2 (count Cell at:(handSite P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMeusueb is a two-row mancala-style board game played by the Acehnese people on the island of Sumatra in Indonesia and particularly popular with women and children. It was documented in the early twentieth century, but it is probably older. It shares several features with similar mancala-style games in Pacific and Indian Ocean islands.\n</description>\n<rules>\n2x6 board with two stores. Play begins with four counters in each hole. A move begins from any of a player's holes, sowing happens anti-clockwise. Move ends if the last counter falls into an empty hole. If it lands in a hole with counters, these are picked up and sowing continues, unless the sowing makes the last hole contain four counters, in which case these are captured and the sowing continues from the next hole. When both players have too few counters to play, each one makes one move with one of their counters and then adds all of the counters on their side of the board to the store. The player with the most counters in the store wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Meusueb\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 (track \"Track\" \"1,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (map { (pair P1 FirstSite) (pair P2 LastSite) })\n            (piece \"Seed\" Shared)\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from\n                    (if\n                        (is Prev Mover)\n                        (if\n                            (is Pending)\n                            (sites\n                                {\n                                    (trackSite\n                                        Move\n                                        from:(last From afterConsequence:True)\n                                        steps:1\n                                    )\n                                }\n                            )\n                            (sites { (last To afterConsequence:True) })\n                        )\n                        (sites Mover)\n                    )\n                    if:(> (count at:(from)) 0)\n                )\n                (then\n                    (sow\n                        apply:(if\n                            (= (count at:(to)) 4)\n                            (and\n                                (fromTo\n                                    (from (to))\n                                    (to (mapEntry (mover)))\n                                    count:(count at:(to))\n                                )\n                                (if\n                                    (>\n                                        (count\n                                            at:(trackSite\n                                                Move\n                                                from:(to)\n                                                steps:1\n                                            )\n                                        )\n                                        0\n                                    )\n                                    (and (moveAgain) (set Pending))\n                                )\n                            )\n                            (if (> (count at:(to)) 1) (moveAgain))\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Mover)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+ (count at:(mapEntry P1)) (count in:(sites P1)))\n                        )\n                        (score\n                            P2\n                            (+ (count at:(mapEntry P2)) (count in:(sites P2)))\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTap Urdy is a two-row mancala-style board game played in Turkmenistan during the early twentieth century. The game is played in holes dug into the ground, and the counters are typically sheep droppings.\n</description>\n<rules>\n2x6 board. Four counters in each hole. Players sow counters in a clockwise directions from one of the holes in their opponent's row. When the final counter lands in an occupied hole, the contents of that hole are picked up and sowing continues, unless the next hole is empty, in which case the contents of the next hole after the empty hole are captured. When the final counter falls in an empty hole, the turn ends. Play continues until all of the holes are empty in one of the rows. The player who captured the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tap Urdy\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"5,W,N,E\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (hand Each)\n            (piece \"Seed\" Shared)\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from\n                    (if\n                        (is Prev Mover)\n                        (sites { (last To afterConsequence:True) })\n                        (sites Next)\n                    )\n                    if:(< 0 (count at:(from)))\n                )\n                (then\n                    (sow\n                        apply:(if\n                            (and\n                                (!=\n                                    (count\n                                        at:(trackSite Move from:(to) steps:1)\n                                    )\n                                    0\n                                )\n                                (> (count at:(to)) 1)\n                            )\n                            (moveAgain)\n                            (if\n                                (and\n                                    (=\n                                        (count\n                                            at:(trackSite\n                                                Move\n                                                from:(to)\n                                                steps:1\n                                            )\n                                        )\n                                        0\n                                    )\n                                    (> (count at:(to)) 1)\n                                )\n                                (fromTo\n                                    (from (trackSite Move from:(to) steps:2))\n                                    (to (handSite (mover)))\n                                    count:(count\n                                        at:(trackSite Move from:(to) steps:2)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (or\n                    (all Sites (sites P1) if:(= 0 (count at:(site))))\n                    (all Sites (sites P2) if:(= 0 (count at:(site))))\n                )\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+\n                                (count Cell at:(handSite P1))\n                                (count in:(sites P1))\n                            )\n                        )\n                        (score\n                            P2\n                            (+\n                                (count Cell at:(handSite P2))\n                                (count in:(sites P2))\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nVai Lung Thl\u0101n is a two-row mancala-style board game played by the Mizo people of India, Bangladesh, and Myanmar.\n</description>\n<rules>\n2x6 board. Five counters in each hole. Sowing occurs from any hole in the player's row in a clockwise direction. If the final counter lands into an empty hole, it is captured. If there is an unbroken line of holes behind it also having single counters, these are also captured. The player who captures the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Vai Lung Thlan\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"5,W,N,E\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 5 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from (sites Mover) if:(< 0 (count at:(from))))\n                (then\n                    (sow\n                        if:(= (count at:(to)) 1)\n                        apply:(fromTo\n                            (from (to))\n                            (to (handSite Mover))\n                            count:(count at:(to))\n                        )\n                        backtracking:True\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Mover)\n                (byScore\n                    {\n                        (score P1 (count Cell at:(handSite P1)))\n                        (score P2 (count Cell at:(handSite P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKpo is a two-row mancala-style board game played by the Vei people in the late nineteenth century. It was described by Prince Momolu Massaquoi to Stewart Culin. It can be played by two, three, or four players.\n</description>\n<rules>\n\"Two rows of six holes with stores on either end. Four counters in each hole. Players sow in an anti-clockwise direction. When the last counter falls into a hole, and it now contains two or three counters, these are captured.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Kpo\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 (track \"Track\" \"1,E,N,W\" loop:True))\n            (piece \"Seed\" Shared)\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (map { (pair P1 FirstSite) (pair P2 LastSite) })\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from (sites Mover) if:(> (count at:(from)) 0))\n                (then\n                    (sow\n                        apply:(if\n                            (or (= (count at:(to)) 2) (= (count at:(to)) 3))\n                            (fromTo\n                                (from (to))\n                                (to (mapEntry Mover))\n                                count:(count at:(to))\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Next)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+ (count in:(sites P1)) (count at:(mapEntry P1)))\n                        )\n                        (score\n                            P2\n                            (+ (count in:(sites P2)) (count at:(mapEntry P2)))\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nChungcajon is a two-row mancala-style board game played in the Philippines.\n</description>\n<rules>\n2x7 board, with two stores. Seven counters in each hole. Players sow from any hole on their side of the board, in a clockwise direction, and sow into the store on their left, but not the one on the right. When the final counter of a sowing lands in an occupied hole that is not the store, the player picks up these counters and continues sowing. When then final counter lands in an empty hole, the turn ends. When the final counter lands in the store, the turn ends. Play continues until all of the counters are in the stores, and the player with the most counters in their store wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Chungcajon\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard\n                2\n                7\n                {\n                    (track \"Track1\" \"7,W,WNW,ENE,E\" loop:True P1)\n                    (track \"Track2\" \"8,E,ESE,WSW,W\" loop:True P2)\n                }\n            )\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (map { (pair P1 FirstSite) (pair P2 LastSite) })\n            (piece \"Seed\" Shared)\n        }\n    )\n    (rules\n        (start (set Count 7 to:(union (sites P1) (sites P2))))\n        (play\n            (move\n                Select\n                (from\n                    (if\n                        (is Prev Mover)\n                        (sites { (last To afterConsequence:True) })\n                        (sites Mover)\n                    )\n                    if:(> (count at:(from)) 0)\n                )\n                (then\n                    (sow\n                        \"Track\"\n                        owner:(mover)\n                        if:(and\n                            (> (count at:(to)) 1)\n                            (!= (to) (mapEntry Mover))\n                        )\n                        apply:(moveAgain)\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (all\n                    Sites\n                    (union (sites P1) (sites P2))\n                    if:(= 0 (count at:(site)))\n                )\n                (byScore\n                    {\n                        (score P1 (count at:(mapEntry P1)))\n                        (score P2 (count at:(mapEntry P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPachgarhwa is a two-row mancala-style board game played in central India during the early twentieth century.\n</description>\n<rules>\n2x5 board. Five counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counters of a sowing lands in a hole, the contents of the next hole are picked up and sowing continues. When the final counter lands in a hole, and the next hole, from which sowing would normally continue, is empty, the player captures any counters in the next hole after the empty one. and the turn ends. Play continues until no more captures are possible, and the player who captured the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Pachgarhwa\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 5 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 5 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from\n                    (if\n                        (is Prev Mover)\n                        (sites { (value Pending) })\n                        (sites Mover)\n                    )\n                    if:(> (count at:(from)) 0)\n                )\n                (then\n                    (sow\n                        if:True\n                        apply:(if\n                            (is Occupied (trackSite Move from:(to) steps:1))\n                            (and\n                                {\n                                    (set Pending (to))\n                                    (fromTo\n                                        (from\n                                            (trackSite Move from:(to) steps:1)\n                                        )\n                                        (to (handSite Mover))\n                                        count:(count\n                                            at:(trackSite\n                                                Move\n                                                from:(to)\n                                                steps:1\n                                            )\n                                        )\n                                    )\n                                    (moveAgain)\n                                }\n                            )\n                            (if\n                                (is\n                                    Occupied\n                                    (trackSite Move from:(to) steps:2)\n                                )\n                                (fromTo\n                                    (from (trackSite Move from:(to) steps:2))\n                                    (to (handSite Mover))\n                                    count:(count\n                                        at:(trackSite Move from:(to) steps:2)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (= 1 (count in:(sites Board)))\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+\n                                (count Cell at:(handSite P1))\n                                (count in:(sites P1))\n                            )\n                        )\n                        (score\n                            P2\n                            (+\n                                (count Cell at:(handSite P2))\n                                (count in:(sites P2))\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKay is a two-row mancala-style board game played in Haiti. It is very similar to games from the Caribbean and West Africa.\n</description>\n<rules>\n2x6 board, one store on either end. Four counters in each hole. Sowing occurs in an anti-clockwise direction and begins in the player's row. When the final counter lands in an occupied hole which is not followed by an empty hole, the contents are picked up and sowing continues. If the final counter falls in an occupied hole followed by an empty hole, or if it falls into an empty hole, the turn ends. Sowing always skips the hole from which the sowing began if it goes all the way around the board. When the final counter falls into an occupied hole in the opponent's row containing three counters, these are captured and the turn ends. Any holes in the opponent's row containing four counters in an unbroken consecutive sequence behind this hole are also captured. Single counters can only be sowed when the next hole is empty. Play continues until one player can no longer play. The player who has captured the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Kay\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 (track \"Track\" \"1,E,N,W\" loop:True))\n            (piece \"Seed\" Shared)\n            (regions \"Home\" P1 (sites Bottom))\n            (regions \"Home\" P2 (sites Top))\n            (map { (pair P1 FirstSite) (pair P2 LastSite) })\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from\n                    (if\n                        (is Prev Mover)\n                        (sites { (last To afterConsequence:True) })\n                        (sites Mover)\n                    )\n                    if:(or\n                        (< 1 (count at:(from)))\n                        (and\n                            (= 1 (count at:(from)))\n                            (is\n                                Empty\n                                (trackSite Move from:(from) \"Track\" steps:1)\n                            )\n                        )\n                    )\n                )\n                (then\n                    (sow\n                        if:True\n                        apply:(if\n                            (= 4 (count at:(to)))\n                            (fromTo\n                                (from (to))\n                                (to (mapEntry Mover))\n                                count:(count at:(to))\n                            )\n                            (if\n                                (< 1 (count at:(to)))\n                                (if\n                                    (is\n                                        Occupied\n                                        (trackSite\n                                            Move\n                                            from:(to)\n                                            \"Track\"\n                                            steps:1\n                                        )\n                                    )\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                        includeSelf:False\n                        backtracking:(= 4 (count at:(to)))\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Next)\n                (byScore\n                    {\n                        (score P1 (count at:(mapEntry P1)))\n                        (score P2 (count at:(mapEntry P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMangala is a two-row mancala-style board game played in Turkey. It is similar to other two-row mancala games found throughout Southwest Asia and North Africa. The game is played with holes dug into the ground.\n</description>\n<rules>\n\"Two rows of six holes.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Mangala (Turkey)\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 7 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 5 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from (sites Mover) if:(> (count at:(from)) 0))\n                (then\n                    (sow\n                        if:(or (= (count at:(to)) 1) (= (count at:(to)) 3))\n                        apply:(fromTo\n                            (from (to))\n                            (to (handSite Mover))\n                            count:(count at:(to))\n                        )\n                        backtracking:True\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (= (count in:(sites Track)) 0)\n                (byScore\n                    {\n                        (score P1 (count Cell at:(handSite P1)))\n                        (score P2 (count Cell at:(handSite P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAlt\u0131ev (\\\"six houses\\\") is a two-row mancala-style board game played in Safranbolu, Turkey. It is typically played in holes dug out of the earth.\n</description>\n<rules>\n2x6 board. Three counters in each hole. Sowing occurs from one of the holes in the player's row. If the final counter lands in an occupied hole, these counters are picked up and sowing continues. If the final counter lands in an empty hole in the player's own row, any counters in the opposite row hole are captured. A player wins when the opponent's row is empty.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Altiev\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 3 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from\n                    (if\n                        (is Prev Mover)\n                        (sites { (last To afterConsequence:True) })\n                        (sites Mover)\n                    )\n                    if:(> (count at:(from)) 0)\n                )\n                (then\n                    (sow\n                        apply:(if\n                            (> (count at:(to)) 1)\n                            (moveAgain)\n                            (if\n                                (is In (to) (sites Mover))\n                                (fromTo\n                                    (from\n                                        (if\n                                            (is In (to) (sites Bottom))\n                                            (+ (to) 6)\n                                            (- (to) 6)\n                                        )\n                                    )\n                                    (to (handSite Mover))\n                                    count:(count\n                                        at:(if\n                                            (is In (to) (sites Bottom))\n                                            (+ (to) 6)\n                                            (- (to) 6)\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (all Sites (sites P1) if:(= 0 (count at:(site))))\n                    (result P2 Win)\n                )\n                (if\n                    (all Sites (sites P2) if:(= 0 (count at:(site))))\n                    (result P1 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAwari is a two-row mancala-style board game played by the Ndyuka people of Suriname. It is closely similar to other games found throughout West Africa and the Caribbean.\n</description>\n<rules>\n2x6 board. Four counters in each hole. Sowing occurs in an anti-clockwise direction. The hole from which sowing begins must remain empty throughout the player's turn. Captures are made when the last counter of a sowing fall into the opponent's row in a hole containing one or two counters (thus making two or three), capturing all of the counters in that hole. A continuous series of holes holding two or three counters behind it are also captured, provided the player's sowing caused them to contain this number. If a player has no counters in their holes, the opponent must play to place seeds in their row, if possible. The game ends when players have holes with only empty and single counters. The player who captured the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Awari\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (do\n                (move\n                    Select\n                    (from (sites Mover) if:(< 0 (count at:(from))))\n                    (then\n                        (sow\n                            if:(and\n                                (is In (to) (sites Next))\n                                (or\n                                    (= (count at:(to)) 2)\n                                    (= (count at:(to)) 3)\n                                )\n                            )\n                            apply:(fromTo\n                                (from (to))\n                                (to (handSite Mover))\n                                count:(count at:(to))\n                            )\n                            includeSelf:False\n                            backtracking:True\n                        )\n                    )\n                )\n                ifAfterwards:(< 0 (count in:(sites Next)))\n            )\n        )\n        (end\n            (if\n                (all Sites (sites Track) if:(<= (count at:(site)) 1))\n                (byScore\n                    {\n                        (score P1 (count Cell at:(handSite P1)))\n                        (score P2 (count Cell at:(handSite P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKara is a mancala-style game played by the Baggara people of Sudan. It is unique in that it can be played by any number of players; each player has three holes and one store hole, with the stores in the center and the other holes arranged in a rectangle around them.\n</description>\n<rules>\nPlay begins with seven counters in each hole. Players begin by picking up the counters in one of their holes and sowing them anti-clockwise. If the final counter lands in an opponent's hole or the rightmost hole belonging to the player sowing, having dropped counters in the opponent's holes making them contain two, four, or six counters, the contents of those holes are captured. The player who has the most counters at the end of the game wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Kara\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 3 (track \"Track\" \"1,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (map { (pair P1 FirstSite) (pair P2 LastSite) })\n            (map \"RightHole\" { (pair P1 3) (pair P2 4) })\n            (piece \"Seed\" Shared)\n        }\n    )\n    (rules\n        (start (set Count 7 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from (sites Mover) if:(> (count at:(from)) 0))\n                (then\n                    (sow\n                        if:(and\n                            (is In (count at:(to)) (sites {2 4 6}))\n                            (is\n                                In\n                                (to)\n                                (union\n                                    (sites Next)\n                                    (sites { (mapEntry \"RightHole\" (mover)) })\n                                )\n                            )\n                        )\n                        apply:(fromTo\n                            (from (to))\n                            (to (mapEntry (mover)))\n                            count:(count at:(to))\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Mover)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+ (count at:(mapEntry P1)) (count in:(sites P1)))\n                        )\n                        (score\n                            P2\n                            (+ (count at:(mapEntry P2)) (count in:(sites P2)))\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nUnnee Tugullalax is a two-row mancala-style board game from Mongolia. It is typically played with camel droppings on a board. The game is imbued with the symbolism of the cycle of reproduction of a cow, as a hole fills with counters it progresses along the cycle of reproduction until it has four counters, when the calve is produced and the four counters are captured.\n</description>\n<rules>\n\"2x6 board. Six counters in each hole. Sowing occurs from any of the holes in the player's row, and continues in a clockwise direction. If the final counter lands in a hole in the player's row containing three counters, four with the addition of the final counter, these are captured. Play continues until one player cannot move or the board position repeats. When one player cannot move, the other player captures the remaining counters. The player with the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Unnee Tugalluulax\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"5,W,N,E\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 6 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from (sites Mover) if:(< 0 (count at:(from))))\n                (then\n                    (sow\n                        if:(= (count at:(to)) 4)\n                        apply:(fromTo\n                            (from (to))\n                            (to (handSite Mover))\n                            count:(count at:(to))\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (or (no Moves Mover) (is Cycle))\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+\n                                (count Cell at:(handSite P1))\n                                (count in:(sites P1))\n                            )\n                        )\n                        (score\n                            P2\n                            (+\n                                (count Cell at:(handSite P2))\n                                (count in:(sites P2))\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\n'Um El-Bil is a two-row mancala-style board game played in Tunisia. Typically it is played in holes in the ground, with camel droppings, shells, or nuts as counters. It was rarely played by young girls.\n</description>\n<rules>\n\"2x6 board. Four counters in each hole. Sowing occurs in an anti-clockwise direction. The first player sows from the hole on their right. When the final counter lands in an occupied hole, the turn ends. When the final counter lands in an empty hole, that counter is captured. The player who captures the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Um el-Bil\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        phases:{\n            (phase\n                \"Opening\"\n                (play\n                    (move\n                        Select\n                        (from (- 6 1))\n                        (then\n                            (sow\n                                if:(= (count at:(to)) 1)\n                                apply:(fromTo\n                                    (from (to))\n                                    (to (handSite Mover))\n                                    count:1\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase \"Play\")\n            )\n            (phase\n                \"Play\"\n                (play\n                    (move\n                        Select\n                        (from (sites Mover) if:(< 0 (count at:(from))))\n                        (then\n                            (sow\n                                if:(= (count at:(to)) 1)\n                                apply:(fromTo\n                                    (from (to))\n                                    (to (handSite Mover))\n                                    count:1\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end\n            (if\n                (all Sites (sites Board) if:(is Empty (site)))\n                (byScore\n                    {\n                        (score P1 (count Cell at:(handSite P1)))\n                        (score P2 (count Cell at:(handSite P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nWaurie is a two-row mancala-style board game from the Cayman Islands. This game does not involve captures, and players attempt to empty their row of holes to win.\n</description>\n<rules>\nTwo rows of six holes with two stores. Each player owns the store to their right. Four counters in each hole. Sowing occurs from any hole in the player's row in an anti-clockwise direction. Sowing includes the player's store but not the opponent's. When the final counter lands into the player's store, they play again. When a player has no more counters in their row, they win, even if it is now the opponent's turn and they could place counters in the player's row.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Waurie\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 (track \"Track\" \"0,ESE,E,ENE,WNW,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (map { (pair P1 LastSite) (pair P2 FirstSite) })\n            (piece \"Seed\" Shared)\n        }\n    )\n    (rules\n        (start (set Count 4 to:(union (sites P1) (sites P2))))\n        (play\n            (move\n                Select\n                (from (sites Mover) if:(> (count at:(from)) 0))\n                (then\n                    (sow\n                        apply:(if (= (to) (mapEntry Mover)) (moveAgain))\n                        skipIf:(= (to) (mapEntry Next))\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (all Sites (sites Mover) if:(= 0 (count at:(site))))\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHoyito is a two-row mancala-style board game that is played in the Dominican Republic. It is similar to other games from the Caribbean, which were likely brought to the region by enslaved African people during European colonisation.\n</description>\n<rules>\n2x6-12 board, six is the most common. Four counters in each hole. A player moves by picking up the contents of one of their holes and sowing them in an anti-clockwise direction. If the final counter lands in an occupied hole, the contents of this hole are picked up and sowing continues. If the final counter falls into an empty hole, the turn ends. If the final counter falls into a hole containing three counters, making it four after the sowing, then these counters are captured and the turn ends. If at any time during sowing a player drops a counter into a hole to make it contain four, these are captured. If a player cannot move because there are no counters in their holes, they pass. When eight counters are left, the player to first capture a group of four also takes the remaining four counters on the board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Hoyito\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from\n                    (if\n                        (is Prev Mover)\n                        (sites { (last To afterConsequence:True) })\n                        (sites Mover)\n                    )\n                    if:(> (count at:(from)) 0)\n                )\n                (then\n                    (sow\n                        apply:(if\n                            (= (count at:(to)) 4)\n                            (if\n                                (<= (count in:(sites Board)) 8)\n                                (forEach\n                                    Site\n                                    (sites Board)\n                                    (if\n                                        (> (count at:(site)) 0)\n                                        (fromTo\n                                            (from (site))\n                                            (to (handSite Mover))\n                                            count:(count at:(site))\n                                        )\n                                    )\n                                )\n                                (fromTo\n                                    (from (to))\n                                    (to (handSite Mover))\n                                    count:(count at:(to))\n                                )\n                            )\n                            (if (< (count at:(to)) 1) (moveAgain))\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Mover)\n                (byScore\n                    {\n                        (score P1 (count Cell at:(handSite P1)))\n                        (score P2 (count Cell at:(handSite P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nWouri is a two-row mancala-style board game observed in Mopti, Mali in the early twentieth century.\n</description>\n<rules>\n2x6 board. Four counters in each hole. Sowing occurs in an anti-clockwise direction, beginning from any hole in the player's row. When the final counter lands in a hole in the opponent's row containing three (four counting the last counter dropped into it), these are taken. In addition, the contents of any hole in the opponent's row which a player causes to contain four counters are captured. When the final counter lands in an empty hole, the turn ends. When the final counter lands in an occupied hole containing a number of counters other than three, the counters are picked up and sowing continues. If sowing reaches the original hole from which the sowing began, this hole is skipped over. A player must play so that the opponent has counters with which to play, if possible.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Wouri\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (do\n                (move\n                    Select\n                    (from\n                        (if\n                            (is Prev Mover)\n                            (sites { (last To afterConsequence:True) })\n                            (sites Mover)\n                        )\n                        if:(< 0 (count at:(from)))\n                    )\n                    (then\n                        (sow\n                            apply:(if\n                                (and\n                                    (is In (to) (sites Next))\n                                    (= (count at:(to)) 4)\n                                )\n                                (fromTo\n                                    (from (to))\n                                    (to (handSite Mover))\n                                    count:(count at:(to))\n                                    (then\n                                        (forEach\n                                            Site\n                                            (if\n                                                (is Mover P1)\n                                                (sites P2)\n                                                (sites P1)\n                                            )\n                                            (if\n                                                (= (count at:(site)) 4)\n                                                (fromTo\n                                                    (from (site))\n                                                    (to (handSite Mover))\n                                                    count:(count at:(site))\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                                (if (< 1 (count at:(to))) (moveAgain))\n                            )\n                            includeSelf:False\n                        )\n                    )\n                )\n                ifAfterwards:(<\n                    0\n                    (count in:(if (is Mover P1) (sites P2) (sites P1)))\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Mover)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+\n                                (count Cell at:(handSite P1))\n                                (count in:(sites P1))\n                            )\n                        )\n                        (score\n                            P2\n                            (+\n                                (count Cell at:(handSite P2))\n                                (count in:(sites P2))\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nObridje is a two-row mancala-style board game that was played in Ghana and among the Ijaw people of Nigeria in the early twentieth century.\n</description>\n<rules>\n2x6 board with two stores. Four counters in each hole. Play may begin from any of the player's holes. Counters are sown anti-clockwise. If the last counter falls into an empty hole or a hole in either row, making that hole contain four counters, play ends, and the four counters are taken. Also, if at any time during the sowing a hole contains four counters, the player on whose row this occurs takes those counters. Otherwise, the player lifts the counters in the hole in which the final counter lands and continues sowing. Play ends when one player can no longer move. The player with the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Obridje\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 (track \"Track\" \"1,E,N,W\" loop:True))\n            (piece \"Seed\" Shared)\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (map { (pair P1 FirstSite) (pair P2 LastSite) })\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from\n                    (if\n                        (is Prev Mover)\n                        (sites { (var \"Replay\") })\n                        (sites Mover)\n                    )\n                    if:(> (count at:(from)) 0)\n                )\n                (then\n                    (do\n                        (set Var \"NumSowed\" (count at:(last To)))\n                        next:(sow\n                            apply:(if\n                                (and\n                                    (!= 4 (count at:(to)))\n                                    (< 1 (count at:(to)))\n                                )\n                                (and (moveAgain) (set Var \"Replay\" (to)))\n                            )\n                        )\n                        (then\n                            (and\n                                (forEach\n                                    Site\n                                    (sites\n                                        Track\n                                        from:(last From)\n                                        to:(trackSite\n                                            Move\n                                            from:(last From)\n                                            \"Track\"\n                                            steps:(var \"NumSowed\")\n                                        )\n                                    )\n                                    (if\n                                        (= 4 (count at:(site)))\n                                        (fromTo\n                                            (from (site))\n                                            (to\n                                                (if\n                                                    (is In (to) (sites P1))\n                                                    (mapEntry P1)\n                                                    (mapEntry P2)\n                                                )\n                                            )\n                                            count:4\n                                        )\n                                    )\n                                )\n                                (set Var \"NumSowed\" 0)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Next)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+ (count at:(mapEntry P1)) (count in:(sites P1)))\n                        )\n                        (score\n                            P2\n                            (+ (count at:(mapEntry P2)) (count in:(sites P2)))\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nJ'odu is a two-row mancala-style board game played by the Yoruba people of Nigeria and also in Ghana. It is closely related to other games similar to Oware, but the method of capture is slightly different.\n</description>\n<rules>\n2x6 board, which two stores. Four counters in each hole. Sowing proceeds in an anti-clockwise direction. When the final counter of a sowing falls in to an occupied hole, these counters are picked up and sowing continues. When the final hole lands in an empty hole, if the hole is in the player's row, the contents of the opponent's opposite hole are captured. If the empty hole is in the opponent's row, the turn ends. A player must play so that the opponent is able to play on their next turn, if possible. The player who captures the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"J'odu\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 (track \"Track\" \"1,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (map { (pair P1 FirstSite) (pair P2 LastSite) })\n            (piece \"Seed\" Shared)\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (do\n                (move\n                    Select\n                    (from\n                        (if\n                            (is Prev Mover)\n                            (sites { (last To afterConsequence:True) })\n                            (sites Mover)\n                        )\n                        if:(< 0 (count at:(from)))\n                    )\n                    (then\n                        (sow\n                            apply:(if\n                                (> (count at:(to)) 1)\n                                (moveAgain)\n                                (if\n                                    (is In (to) (sites Mover))\n                                    (fromTo\n                                        (from\n                                            (if\n                                                (is Mover P1)\n                                                (+ (to) 6)\n                                                (- (to) 6)\n                                            )\n                                        )\n                                        (to (mapEntry (mover)))\n                                        count:(count\n                                            at:(if\n                                                (is Mover P1)\n                                                (+ (to) 6)\n                                                (- (to) 6)\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n                ifAfterwards:(<\n                    0\n                    (count in:(if (is Mover P1) (sites P2) (sites P1)))\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Mover)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+ (count at:(mapEntry P1)) (count in:(sites P1)))\n                        )\n                        (score\n                            P2\n                            (+ (count at:(mapEntry P2)) (count in:(sites P2)))\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nEnindji is a two-row mancala-style board game that was documented in Dahomey in the early twentieth century. It is similar to other games in the region like Oware, but has a unique capture where the owner of the hole, rather than the person sowing, captures the counters.\n</description>\n<rules>\n2x6 board, with a storage hole on either end. The game starts with four counters in each hole. A player picks up all of the counters in one of the holes in their row and sows them one-by-one in a counterclockwise direction in consecutive holes from the hole the pieces originated. The starting hole is always left empty, even if a player sows in a complete circuit of the board, the original house is skipped and sowing continues in the next hole after it. When the final counter of a sowing lands in a hole with three counters, the owner of that hole captures the counters. If an opponent's holes are all empty, the other player must make a move placing counters in the opponent's row. If not possible, the player captures all the counters in their row. The player who has captured the most counters wins. If the game continues in a repeating loop, the players can agree to end the game and capture the counters remaining in their row.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Enindji\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 (track \"Track\" \"1,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (map { (pair P1 FirstSite) (pair P2 LastSite) })\n            (piece \"Seed\" Shared)\n        }\n    )\n    (rules\n        (start (set Count 4 to:(sites Track)))\n        (play\n            (if\n                (is Proposed \"End\")\n                (or (move Vote \"End\") (move Vote \"No\"))\n                (or\n                    (if (is Cycle) (move Propose \"End\"))\n                    (do\n                        (move\n                            Select\n                            (from (sites Mover) if:(< 0 (count at:(from))))\n                            (then\n                                (sow\n                                    if:(= (count at:(to)) 4)\n                                    apply:(fromTo\n                                        (from (to))\n                                        (to\n                                            (if\n                                                (is In (to) (sites P1))\n                                                (mapEntry 1)\n                                                (mapEntry 2)\n                                            )\n                                        )\n                                        count:(count at:(to))\n                                    )\n                                    includeSelf:False\n                                )\n                            )\n                        )\n                        ifAfterwards:(< 0 (count in:(sites Next)))\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (and (no Moves Mover) (no Moves Next))\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+ (count at:(mapEntry P1)) (count in:(sites P1)))\n                        )\n                        (score\n                            P2\n                            (+ (count at:(mapEntry P2)) (count in:(sites P2)))\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nShono is a two-row mancala-style board game played by the Fang people of Gabon, Equatorial Guinea, and Cameroon.\n</description>\n<rules>\n\"2x6 board with two stores. Five counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter lands in a hole in the opponent's row containing one or two counters, thus making it contain two or three counters, they are captured. Any other holes in the opponent's row which also contain two or three counters, in an unbroken sequence preceding the hole where the first capture was made, are captured. When a player sows around the board, the hole from which the counters were taken is left empty. Play ends when one player cannot play from their row, and players capture any remaining counters in their holes. The player with the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Shono\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 (track \"Track\" \"1,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (map { (pair P1 FirstSite) (pair P2 LastSite) })\n            (piece \"Seed\" Shared)\n        }\n    )\n    (rules\n        (start (set Count 5 to:(sites Track)))\n        (play\n            (move\n                Select\n                (from (sites Mover) if:(< 0 (count at:(from))))\n                (then\n                    (sow\n                        if:(and\n                            (is In (to) (sites Next))\n                            (or (= (count at:(to)) 2) (= (count at:(to)) 3))\n                        )\n                        apply:(fromTo\n                            (from (to))\n                            (to (mapEntry (mover)))\n                            count:(count at:(to))\n                        )\n                        includeSelf:False\n                        backtracking:True\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Mover)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+ (count at:(mapEntry P1)) (count in:(sites P1)))\n                        )\n                        (score\n                            P2\n                            (+ (count at:(mapEntry P2)) (count in:(sites P2)))\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nGopher is a simple game made by Mark Steere to be easy to program.\n</description>\n<rules>\nThe first player begins the game by placing a stone anywhere on the board. Then, starting with the second player, players take turns placing a stone orthogonally adjacent to exactly one enemy stone and no friendly stones.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Gopher\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 6))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (play\n            (if\n                (= 0 (count Moves))\n                (move Add (to (sites Empty)))\n                (move\n                    Add\n                    (to\n                        (sites Empty)\n                        if:(and\n                            (= 0 (count Sites in:(sites Around (to) Own)))\n                            (= 1 (count Sites in:(sites Around (to) Enemy)))\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDo Guti is a blockade game from what is now Pakistan. Graffiti on early monuments suggest this game could be medieval in date.\n</description>\n<rules>\nA square, with diagonals, but one side of the square has been removed. Two pieces per player. Players alternate turns placing a piece on an empty spot on the board. When the pieces are placed, players alternate turns moving one of their pieces to an empty adjacent spot along the lines. The player who blocks the other from being able to move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Do Guti\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (remove\n                        (rectangle 3 3 diagonals:Alternating)\n                        vertices:{1 3 5 7}\n                    )\n                    edges:{ { 3 0} { 0 1 } { 1 4 } }\n                )\n                use:Vertex\n            )\n            (hand Each)\n            (piece \"Disc\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Disc\" \"Hand\" count:2))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSpots was created by Cameron Browne for Ludii. It is played on a hexagonal board.\n</description>\n<rules>\nPlayers take turns marking any unmarked cell with no marked neighbour. Player who can\u2019t move loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Spots\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Marker\" Neutral)\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (piece \"Marker0\")\n                (to\n                    (sites Empty)\n                    if:(=\n                        (count\n                            Sites\n                            in:(sites\n                                Around\n                                (to)\n                                Orthogonal\n                                if:(is In (to) (sites Occupied by:Neutral))\n                            )\n                        )\n                        0\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPong Hau K'i is a blocking game documented during the nineteenth century East Asia, but medieval graffiti suggests that it may be even older.\n</description>\n<rules>\nPieces begin on opposite sides of the square. Players take turns moving the piece to an empty spot either orthogonally or diagonally, but one orthogonal direction is forbidden. The player who blocks the other player from being able to move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Pong Hau K'i\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (remove\n                        (rectangle 3 3 diagonals:Alternating)\n                        vertices:{1 3 5 7}\n                    )\n                    edges:{ { 3 0} { 0 1 } { 1 4 } }\n                )\n                use:Vertex\n            )\n            (hand Each)\n            (piece \"Disc\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            { (place \"Disc1\" { \"A3\" \"C3\"}) (place \"Disc2\" { \"A1\" \"C1\" }) }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThe game is variant of Amazons with Bishops.\n</description>\n<rules>\nThe game is played on a 8x8 board. Each player has four pieces. Two things happen on a turn: a piece can move any number of squares diagonally, but cannot jump over other pieces and cannot cross or enter a square occupied by another piece or a ball. It can then shoot a ball orthogonally from any distance. If a player cannot move or shoot, he loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Agapi\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Bishop\" Each (move Slide Diagonal (then (moveAgain))))\n            (piece \"Dot\" Neutral)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Bishop1\" {\"C1\" \"F1\" \"A3\" \"H3\"})\n                (place \"Bishop2\" {\"C8\" \"F8\" \"A6\" \"H6\"})\n            }\n        )\n        (play\n            (if\n                (is Even (count Moves))\n                (forEach Piece)\n                (move Shoot (piece \"Dot0\") Orthogonal)\n            )\n        )\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nInvented by William Daniel Troyka in 2002, Blue Nile is a modern game played on a hexagonal board.\n</description>\n<rules>\nPlayed on a hexagonal board with five spaces per side. Players take turns placing stones on an empty space. The stone must be adjacent to the last stone played but cannot be adjacent to any other. The last player to be able to make a legal move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Blue Nile\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Marker\" Neutral)\n        }\n    )\n    (rules\n        phases:{\n            (phase\n                \"start\"\n                P1\n                (play (move Add (piece (id \"Marker0\")) (to (sites Empty))))\n                (nextPhase \"play\")\n            )\n            (phase\n                \"play\"\n                (play\n                    (move\n                        Add\n                        (piece \"Marker0\")\n                        (to\n                            (sites\n                                Around\n                                (last To)\n                                if:(and\n                                    (is Empty (to))\n                                    (=\n                                        (count\n                                            Sites\n                                            in:(difference\n                                                (sites\n                                                    Around\n                                                    (to)\n                                                    if:(not\n                                                        (is\n                                                            In\n                                                            (to)\n                                                            (sites Empty)\n                                                        )\n                                                    )\n                                                )\n                                                (last To)\n                                            )\n                                        )\n                                        0\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nRatio is a board game that can be played with many rulesets.\n</description>\n<rules>\n\"First, the giant takes place on one of the top sites. Centre site in the opening move for the giant is not allowed. In any subsequent moves, the giant is allowed to enter the centre. The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board. The giant wins if it reaches the bottom sites and the dwarves win if they block the giant to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ratio\"\n    (players { (player S) (player N) })\n    (equipment\n        {\n            (board\n                (add\n                    (remove\n                        (merge\n                            {\n                                (rectangle 3 3 diagonals:Alternating)\n                                (shift 0 2 (wedge 2))\n                                (shift 0 -1 (rotate 180 (wedge 2)))\n                            }\n                        )\n                        vertices:{3 5 1}\n                    )\n                    edges:{ { 0 3} { 1 5 } { 2 7 } { 0 1 } }\n                )\n                use:Vertex\n            )\n            (piece \"Foot\"\n                P1\n                (move\n                    Step\n                    Adjacent\n                    (to\n                        if:(and\n                            (if\n                                (= 1 (count Turns))\n                                (!= (centrePoint) (to))\n                                True\n                            )\n                            (is Empty (to))\n                        )\n                    )\n                )\n            )\n            (piece \"Gnome\"\n                P2\n                (move\n                    Step\n                    (directions { Forwards Rightward Leftward })\n                    (to if:(is Empty (to)))\n                )\n            )\n            (hand P1)\n            (regions\n                \"Home\"\n                P2\n                (intersection (sites Outer) (expand (sites Bottom)))\n            )\n            (regions \"Home\" P1 (sites Top))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Gnome2\"\n                    (intersection (sites Outer) (expand (sites Bottom)))\n                )\n                (place \"Foot1\" (handSite P1))\n            }\n        )\n        phases:{\n            (phase\n                \"Opening\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to (expand (sites Top)))\n                        (then (moveAgain))\n                    )\n                )\n                (nextPhase \"Main\")\n            )\n            (phase \"Main\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (is In (where \"Foot\" P1) (sites P2)) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nForge is a two-player game played on an NxM square board. I will consider here an 8x6 board.\n</description>\n<rules>\nMOVEMENT - A stone must move as far as it can (no jumps) in a forward direction (orthogonal or diagonal). - At the first move, a player may choose any of his stones to move. - After that, a player must move a stone that is adjacent to the last moved enemy stone. If that is not possible, the player may choose any unblocked of his stones to move. - There is no capturing. GOAL - Wins the player that moved the last stone.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Forge\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board (rectangle 8 6) use:Vertex)\n            (piece \"Ball\" Each (move Slide (directions Forwards of:All)))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Ball1\" (expand (sites Bottom)))\n                (place \"Ball2\" (expand (sites Top)))\n            }\n        )\n        phases:{\n            (phase \"Opening\" (play (forEach Piece)) (nextPhase \"Main\"))\n            (phase\n                \"Main\"\n                (play\n                    (priority\n                        {\n                            (forEach\n                                Piece\n                                (move\n                                    Slide\n                                    (from\n                                        (from)\n                                        if:(is\n                                            In\n                                            (from)\n                                            (sites Around (last To) All)\n                                        )\n                                    )\n                                    (directions Forwards of:All)\n                                )\n                            )\n                            (forEach Piece)\n                        }\n                    )\n                )\n            )\n        }\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTron is a video game based on the movie Tron by Walt Disney Pictures from 1982.\n</description>\n<rules>\nIn the game, played on a grid of any size, two players move their pieces simultaneously, which leave a trail behind them. The first player to run into one of the trails or the edge of the board loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tron\"\n    (players 2)\n    (equipment\n        {\n            (board (square 10))\n            (piece \"King\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to\n                        (apply\n                            (if\n                                (is Occupied (to))\n                                (trigger \"Collision\" (mover))\n                            )\n                        )\n                    )\n                    (then (add (piece (id \"Square\" Mover)) (to (last From))))\n                )\n            )\n            (piece \"Square\" Each)\n        }\n    )\n    (rules\n        (start { (place \"King1\" coord:\"E5\") (place \"King2\" coord:\"F6\") })\n        (play (forEach Piece))\n        (end (if (is Triggered \"Collision\" Mover) (result Next Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDodo is a dead simple game where the goal is to run out of moves.\n</description>\n<rules>\nOn your turn you move one of your pieces one step onto an empty cell in one of the three forwards directions. Black's pieces move towards the bottom of the board, while White's pieces move towards the top. If, at the beginning of your turn, none of your pieces can move, you win.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Dodo\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board (rotate 30 (hex 4)))\n            (piece \"Disc\" Each (move Step Forwards (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Disc1\" {0 1 2 3 4 5 6 7 9 10 11 15 16})\n                (place \"Disc2\" {20 21 25 26 27 29 30 31 32 33 34 35 36})\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Mover) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<rules>\nEach player moves the same snail. You must move the snail to any adjacent place which doesn't have a leaf. Every time you move the snail, the previous place is filled by a leaf. The player wins when the snail is moved over the position with its colour or if the opponent is blocked.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Slimetrail\"\n    (players 2)\n    (equipment\n        {\n            (board (rotate -30 (hex Diamond 11)))\n            (piece \"Snail\"\n                Shared\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (add (piece (id \"Leaf\" Neutral)) (to (last From))))\n                )\n            )\n            (piece \"Leaf\" Neutral)\n        }\n    )\n    (rules\n        (start (place \"Snail\" (centrePoint)))\n        (play (forEach Piece Shared))\n        (end\n            {\n                (if (no Moves Next) (result Mover Win))\n                (if (= (last To) 120) (result P1 Win))\n                (if (= (last To) 0) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDomineering is a mathematical game, typically played on a sheet of paper with a grid, and with dominoes. Players take turns placing dominoes until one can no longer play.\n</description>\n<rules>\nTwo players have a collection of dominoes which they place on the grid in turn, covering up squares. One player places tiles vertically, while the other places them horizontally. The first player who cannot move loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Domineering\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 6 6))\n            (tile \"Horz\" P1 { R F } numSides:4)\n            (tile \"Vert\" P2 { F } numSides:4)\n        }\n    )\n    (rules\n        (play (move Add (piece (mover) state:0) (to (sites Empty))))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nL game was invented by Edward do Bono in 1967. It is a blocking game played by moving pieces which take up several spaces on a board.\n</description>\n<rules>\nPlayed on a board of 4x4 squares. Each player controls a 3x2 L-shaped piece, and there are two 1x1 pieces which either player can manipulate. On a turn, a player moves the L piece to a new available position, and then has the option to move one of the 1x1 pieces. When a player cannot move their L piece, they lose.\n</rules>\n</query>\n</task>",
        "solution": "(game \"L Game\"\n    (players 2)\n    (equipment\n        {\n            (board (square 4))\n            (piece \"Dot\" Neutral)\n            (tile \"L\" Each { { L F R F F } { R F L F F } })\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Dot0\" {\"A4\" \"D1\"})\n                (place \"L1\" coord:\"C1\" state:0)\n                (place \"L2\" coord:\"B4\" state:2)\n            }\n        )\n        (play\n            (if\n                (is Prev Mover)\n                (or\n                    (move Pass)\n                    (move\n                        (from (sites Occupied by:Neutral))\n                        (to (sites Empty))\n                    )\n                )\n                (move\n                    (from (sites Occupied by:Mover))\n                    (to (union (sites Empty) (sites Occupied by:Mover)))\n                    (then (moveAgain))\n                )\n            )\n        )\n        (end\n            (if\n                (and (not (is Mover (next))) (no Moves Next))\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nRoots is a variant of the game Root.\n</description>\n<rules>\nThe game is played on a hexagonal board with six squares per side. The initial stones are placed in the corners, alternating colours. Players take it in turns to place a stone of their colour on an empty square. The stone must be adjacent to a single previously placed allied stone. The last player to make a legal move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Roots\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 6))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Disc1\" (sites {5 40 90}))\n                (place \"Disc2\" (sites {0 50 85}))\n            }\n        )\n        (play\n            (move\n                Add\n                (to\n                    (sites Empty)\n                    if:(=\n                        (count Sites in:(sites Around (to) Own Orthogonal))\n                        1\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBe the last to play by creating opportunities for future placements while blocking your opponent's options.\n</description>\n<rules>\nThe game is played on a 9x9 board. At the start of the game, each player places 8 pieces in turn on the game board. Once all 16 pieces are on the board, each player places a piece in turn, but the stone must have at least 2 friendly pieces adjacent to it (orthogonally and diagonally). The last player to place a piece wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Wong\"\n    (players 2)\n    (equipment\n        {\n            (board (square 9) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        phases:{\n            (phase\n                \"Setup\"\n                (play (move Add (to (sites Empty))))\n                (nextPhase\n                    (<= 16 (count Sites in:(sites Occupied by:All)))\n                    \"Placement\"\n                )\n            )\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        Add\n                        (to\n                            (sites Empty)\n                            if:(<=\n                                2\n                                (count Sites in:(sites Around (to) Own All))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end (if (no Moves Mover) (result Prev Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTemeen Tavag (\\\"Camel hoof\\\") is a blockade game played in Mongolia. It can also be played on a square board, when it is known as D\u00f6rv\u00f6n Bux (the four bulls).\n</description>\n<rules>\n\"An X, with a rounded line connecting the four endpoints of the X, but leaving two unconnected. A circle is drawn between these two unconnected endpoints. Two pieces per player. Players alternate turns placing one of their pieces on an empty point on the board. When all of the pieces are placed, players alternate turns moving one of the pieces to an empty adjacent point on the board, moving along the lines. The player who blocks their opponent from being able to move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Temeen Tavag\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (remove (rotate 45 (concentric {1 4})) edges:{ { 1 4 } })\n                use:Vertex\n            )\n            (hand Each)\n            (piece \"Disc\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Disc\" \"Hand\" count:2))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSlide stones, change enemies to friends, stalemate your opponent.\n</description>\n<rules>\nA stone slides (orthogonal or diagonal) through empty cells, stopping only when encountering another piece or an edge of the board. It then changes into its own color, all enemy stones orthogonally adjacent to it. A players looses if he is stalemated.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Orthokon\"\n    (players 2)\n    (equipment\n        {\n            (board (square 4) use:Vertex)\n            (piece \"Ball\"\n                Each\n                (move\n                    Slide\n                    All\n                    (then\n                        (forEach\n                            Site\n                            (sites Around (last To) Enemy)\n                            (and\n                                (remove (site))\n                                (add (piece (mover)) (to (site)))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start { (place \"Ball1\" (sites Bottom)) (place \"Ball2\" (sites Top)) })\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSlide a shared piece and be the last to do it.\n</description>\n<rules>\nOne player drops the neutral stone on a cell and the other chooses who starts. On each turn, each player slides the neutral stone a number of empty cells in a straight line and each cell passed becomes unavailable for the rest of the game. The first player that cannot move loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Un\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Marker\"\n                Neutral\n                (move Slide (between trail:(id \"Marker\" Shared)))\n            )\n            (piece \"Marker\" Shared)\n        }\n    )\n    (rules\n        (meta (swap))\n        phases:{\n            (phase\n                \"Init\"\n                (play (move Add (piece \"Marker0\") (to (sites Empty))))\n                (nextPhase \"Main\")\n            )\n            (phase \"Main\" (play (forEach Piece Neutral)))\n        }\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nJostle is a two player game. The 10x10 board is initially set up with 16 red and 16 blue checkers. Red andBlue, take turns moving checkers of their own color, one move per turn, starting with Red.\n</description>\n<rules>\nOBJECT OF THE GAME The last player to make a move wins. FRIENDLY AND ENEMY CONNECTIONS A connection, i.e. an orthogonal adjacency between two checkers, is friendly if the two checkers are the same color and enemy if the two checkers are oppositely colored. CHECKER VALUE A checker\u2019s value is its number of friendly connections minus its number of enemy connections. MOVES A checker\u2019s value must increase when it\u2018s moved. Move a checker to an unoccupied, orthogonally adjacent square. There is no capturing in Jostle, only jostling.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Jostle\"\n    (players 2)\n    (equipment\n        {\n            (board (square 10))\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to\n                        if:(and\n                            (is Empty (to))\n                            (<\n                                (+\n                                    (results\n                                        from:(sites { (from) })\n                                        to:(sites Around (from) Orthogonal)\n                                        (if\n                                            (= (from) (to))\n                                            0\n                                            (if\n                                                (is Friend (who at:(to)))\n                                                1\n                                                (if\n                                                    (is Enemy (who at:(to)))\n                                                    -1\n                                                    0\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                                (+\n                                    (results\n                                        from:(sites { (from) })\n                                        to:(sites Around (to) Orthogonal)\n                                        (if\n                                            (= (from) (to))\n                                            0\n                                            (if\n                                                (is Friend (who at:(to)))\n                                                1\n                                                (if\n                                                    (is Enemy (who at:(to)))\n                                                    -1\n                                                    0\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (sites\n                        {23 25 27 32 34 36 43 47 52 63 72 74 76 65 67 56}\n                    )\n                )\n                (place\n                    \"Marker2\"\n                    (sites\n                        {22 24 26 33 35 37 42 46 53 57 62 64 66 73 75 77}\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSnowpaque was created from the software AiAi. It is played on a hexagonal board.\n</description>\n<rules>\nPlayer 1 marks a cell. Then Players take turns marking any unmarked cell with exactly one marked neighbour. Player who can't move loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Snowpaque\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Marker\" Neutral)\n        }\n    )\n    (rules\n        phases:{\n            (phase\n                \"start\"\n                P1\n                (play (move Add (piece (id \"Marker0\")) (to (sites Empty))))\n                (nextPhase \"play\")\n            )\n            (phase\n                \"play\"\n                (play\n                    (move\n                        Add\n                        (piece \"Marker0\")\n                        (to\n                            (sites Empty)\n                            if:(=\n                                (count\n                                    Sites\n                                    in:(sites\n                                        Around\n                                        (to)\n                                        Orthogonal\n                                        if:(is\n                                            In\n                                            (to)\n                                            (sites Occupied by:Neutral)\n                                        )\n                                    )\n                                )\n                                1\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSNORT (Simon NORTon) is played on an 8 x 8 grid of squares.\n</description>\n<rules>\nTwo players, black and white, take turns dropping pieces onto empty squares (that are not orthogonally adjacent to another enemy's piece) until no more moves are available. The last player to make a move wins the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Snort\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Cat\" P1)\n            (piece \"Dog\" P2)\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (to\n                    (difference\n                        (sites Empty)\n                        (sites Around (sites Occupied by:Next) Orthogonal)\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Next) (result P1 Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game is played on any square board (say 8x8).\n</description>\n<rules>\nTURN - On each turn, each player drops a neutral stone on an empty cell provided that it does not share the same row, column or diagonal with all the stones already on board. GOAL - Wins the last player to move\n</rules>\n</query>\n</task>",
        "solution": "(game \"First Attack\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Ball\" Shared)\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (piece \"Ball\")\n                (to\n                    (sites Empty)\n                    if:(all\n                        Sites\n                        (sites Direction from:(to) Adjacent)\n                        if:(is Empty (site))\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nOumoul Kono is a blockade game played in Korean during the nineteenth century.\n</description>\n<rules>\nThe board is a square, with the diagonals drawn. A circle is drawn around the midpoint of the top side of the square. Two pieces per player, the pieces for one player on the top corners and the other on the remaining corners. Players alternate turns moving along the lines on the board, the player on the top corners moving first, but can never move along the line with the circle. The player who blocks their opponent from being able to move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Oumoul Kono\"\n    (players 2)\n    (equipment\n        {\n            (board (square 2 diagonals:Solid) use:Vertex)\n            (piece \"Disc\"\n                Each\n                (move\n                    Step\n                    (to\n                        if:(and\n                            {\n                                (or\n                                    {\n                                        (and\n                                            (!= (from) (coord \"A3\"))\n                                            (!= (from) (coord \"C3\"))\n                                        )\n                                        (and\n                                            (= (from) (coord \"C3\"))\n                                            (!= (to) (coord \"A3\"))\n                                        )\n                                        (and\n                                            (= (from) (coord \"A3\"))\n                                            (!= (to) (coord \"C3\"))\n                                        )\n                                    }\n                                )\n                                (is Empty (to))\n                            }\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start { (place \"Disc1\" (sites Bottom)) (place \"Disc2\" (sites Top)) })\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTugul Shodra is a blockade game played by Tuvinian children in Siberia.\n</description>\n<rules>\nThree vertical lines, and two horizontal lines intersecting them along their top end points and their midpoints. Three pieces per player, arranged on the intersections of opposite vertical lines. Players alternate turns moving one of their pieces to an adjacent spot. The object of the game is to block the opponent's pieces from moving.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tugul Shodra\"\n    (players 2)\n    (equipment\n        {\n            (board (remove (square 3) edges:{ { 0 1} { 1 2 } }) use:Vertex)\n            (piece \"Disc\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start { (place \"Disc1\" { 2 5 8}) (place \"Disc2\" { 0 3 6 }) })\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nT'uk T'uk is a blocking game played in West Africa. Unlike most other blocking games, it is played on a grid. According to tradition, it is a griot, or storyteller, who challenges a shepherd to the game, but the griot knows the trick of how to win every time.\n</description>\n<rules>\nSquare grid of 36, 64, 100, or 144 squares. Each player has one piece lined up in each square on opposite sides of the square. Players may move their piece forward or backwards orthogonally any distance. The player who blocks the opponent from being able to move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"T'uk T'uk\"\n    (players 2)\n    (equipment\n        {\n            (board (square 6))\n            (piece \"Marker\" Each (move Slide Orthogonal))\n        }\n    )\n    (rules\n        (start\n            { (place \"Marker1\" (sites Bottom)) (place \"Marker2\" (sites Top)) }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nQuantum Leap was invented in 2013 by N\u00e9stor Romeral Andr\u00e9s. It can be played on a hexagonal grid of any size.\n</description>\n<rules>\nPlay begins with the supply of pieces (30 of each colour) randomly distributed on the board, so each cell contains only one stone and there is one free space left. This free space can be anywhere except the centre space. Each player has an allocated colour. Before the game starts, Black can swap the positions of any two stones on the board. White then starts the game. Players alternate turns during the game until one of them cannot make a valid move, thereby losing the game. On a turn, a player must make one capture. A player makes a capture by leaping in a straight line in any of the 6 directions exactly as many spaces as friendly pieces surround its original position, and landing on an enemy piece, which is removed from the game. The player who cannot make a capture loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Quantum Leap\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Marker\"\n                Each\n                (move\n                    Hop\n                    Orthogonal\n                    (between\n                        (exact\n                            (-\n                                (count\n                                    Sites\n                                    in:(sites\n                                        Around\n                                        (from)\n                                        Orthogonal\n                                        if:(is Friend (who at:(to)))\n                                    )\n                                )\n                                1\n                            )\n                        )\n                        if:True\n                    )\n                    (to if:(is Enemy (who at:(to))) (apply (remove (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker2\" (centrePoint))\n                (place Random {\"Marker2\"} count:29)\n                (place Random {\"Marker1\"} count:30)\n            }\n        )\n        phases:{\n            (phase\n                \"Swap\"\n                (play\n                    (or\n                        (move Pass)\n                        (move\n                            Select\n                            (from (sites Occupied by:Mover))\n                            (to (sites Occupied by:Next))\n                            (then (swap Pieces (last From) (last To)))\n                        )\n                    )\n                )\n                (nextPhase \"Play\")\n            )\n            (phase \"Play\" (play (forEach Piece)))\n        }\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCol (COLin or COLoring) is played on a graph (here, hexagonal shape).\n</description>\n<rules>\nTwo players, blue and red, take turns coloring empty vertices that are not adjacent to another vertex of the same color, until no more moves are available. The last player to make a move wins the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Col\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Hex\" P1)\n            (piece \"Hex\" P2)\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (to\n                    (difference\n                        (sites Empty)\n                        (sites Around (sites Occupied by:Mover))\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCo Chan Cho is a blocking game that was played by children in the Tonkin region of Vietnam in the mid twentieth century. The game was usually drawn on the ground, and broken pieces of pottery, paper, or straw were used as pieces.\n</description>\n<rules>\nThe board is a square with diagonals drawn, with the bottom side of the square marked with an X. Two pieces per player, which begin on opposite corners of the square, one player on the side with the X and the other to the opposite side. Players alternate turns moving one of their pieces along the lines of the board to an empty adjacent point. Players cannot move along the line marked with an X. When one player cannot move, the opponent wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Co Chan Cho\"\n    (players 2)\n    (equipment\n        {\n            (board (square 2 diagonals:Solid) use:Vertex)\n            (piece \"Disc\"\n                Each\n                (move\n                    Step\n                    (to\n                        if:(and\n                            {\n                                (or\n                                    {\n                                        (and\n                                            (!= (from) (coord \"A1\"))\n                                            (!= (from) (coord \"C1\"))\n                                        )\n                                        (and\n                                            (= (from) (coord \"C1\"))\n                                            (!= (to) (coord \"A1\"))\n                                        )\n                                        (and\n                                            (= (from) (coord \"A1\"))\n                                            (!= (to) (coord \"C1\"))\n                                        )\n                                    }\n                                )\n                                (is Empty (to))\n                            }\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start { (place \"Disc1\" (sites Top)) (place \"Disc2\" (sites Bottom)) })\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPathway is a simple game made by Mark Steere. It was designed to be easy to program.\n</description>\n<rules>\nPlayers take turns placing one of their stones on an empty square. It is not legal to place orthogonally adjacent to only enemy stones and it is not legal to place orthogonally adjacent to more than 1 friendly stone. All other placements onto empty squares are legal. Put differently: You may place adjacent to no stone or to exactly 1 friendly and any number of enemy stones. The first player unable to place a stone has won the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Pathway\"\n    (players 2)\n    (equipment\n        {\n            (board (square 6))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (to\n                    (sites Empty)\n                    if:(or\n                        (all\n                            Sites\n                            (sites Around (to) Orthogonal)\n                            if:(is Empty (site))\n                        )\n                        (=\n                            1\n                            (count\n                                Sites\n                                in:(sites Around (to) Own Orthogonal)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Next Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBamboo is a game by Mark Steere based on a novel but simple placement restriction.\n</description>\n<rules>\nEach turn a player places a stone of their color on an empty hex. The placement is subject to the following restriction: After your placement you may not have a group containing more stones than the number of groups you have on the board. The first player unable to place a stone loses the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Bamboo\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Disc\" Each)\n            (piece \"Disc\" Neutral)\n        }\n    )\n    (rules\n        (play\n            (do\n                (move Add (to (sites Empty)))\n                ifAfterwards:(<=\n                    (max\n                        (results\n                            from:(sites Occupied by:Mover)\n                            to:1\n                            (* 1 (size Group at:(from)))\n                        )\n                    )\n                    (count Groups if:(= (who at:(to)) (mover)))\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nClaustro is a proximity restricted pure placement game in which a player loses as soon as one of there pieces is fully surrounded on their turn. The game is 'cold' and can work on multiple types of grids with the same principle.\n</description>\n<rules>\nBoard starts empty. Place on an empty location, unless it is next to more of your own pieces. Passing is not allowed. You lose if at the end of your turn, one of your stones is surrounded.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Claustro\"\n    (players 2)\n    (equipment\n        {\n            (board (tri Limping (- 4 1)) use:Vertex)\n            (piece \"Ball\" P1)\n            (piece \"Ball\" P2)\n        }\n    )\n    (rules\n        (start (set Score Each 0))\n        (play\n            (move\n                Add\n                (piece (mover))\n                (to\n                    (sites Empty)\n                    if:(<=\n                        0\n                        (-\n                            (count\n                                Pieces\n                                Next\n                                in:(sites Around (to) Orthogonal)\n                            )\n                            (count\n                                Pieces\n                                Mover\n                                in:(sites Around (to) Orthogonal)\n                            )\n                        )\n                    )\n                )\n                (then\n                    (if\n                        (not\n                            (all\n                                Sites\n                                (sites Occupied by:Mover)\n                                if:(can\n                                    Move\n                                    (step\n                                        (from (site))\n                                        Orthogonal\n                                        (to if:(is Empty (to)))\n                                    )\n                                )\n                            )\n                        )\n                        (trigger \"End\" Mover)\n                        (if\n                            (not\n                                (all\n                                    Sites\n                                    (sites Occupied by:Next)\n                                    if:(can\n                                        Move\n                                        (step\n                                            (from (site))\n                                            Orthogonal\n                                            (to if:(is Empty (to)))\n                                        )\n                                    )\n                                )\n                            )\n                            (trigger \"End\" Next)\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (or (is Triggered \"End\" Mover) (is Triggered \"End\" Next))\n                (if (is Triggered \"End\" Mover) (result Mover Loss))\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nD\u00f6rv\u00f6n Cag (The four seasons) is a blockade game played in Mongolia.\n</description>\n<rules>\nA circle, with four points equally spaced along the circumference, as well as a point in the center. A diameter is drawn between two of the outer points and through the center. Two players. Two pieces per player. Players alternate turns placing a piece on the board. When all of the pieces are placed, players alternate turns moving a piece to an empty adjacent point along the lines. The player who blocks the other player from being able to move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Dorvon Cag\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (remove (concentric {1 4}) edges:{ { 1 0 } { 0 3 } })\n                use:Vertex\n            )\n            (hand Each)\n            (piece \"Disc\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Disc\" \"Hand\" count:2))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nA board game similar to the root of a tree.\n</description>\n<rules>\nThe game is played on a hexagonal board with five squares per side and a stone placed in the centre. Players take it in turns to place a stone on an empty space. The stone must be adjacent to a single stone that has already been placed. The last player to make a legal move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Root\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Disc\" Neutral)\n        }\n    )\n    (rules\n        (start { (place \"Disc0\" (sites { 30})) })\n        (play\n            (move\n                Add\n                (piece \"Disc0\")\n                (to\n                    (sites Empty)\n                    if:(=\n                        (count\n                            Sites\n                            in:(sites Around (to) NotEmpty Orthogonal)\n                        )\n                        1\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nShut Off His Lights is a multiplayer version of the electronic game Lights Out.\n</description>\n<rules>\nThe game is played on a Celtic-inspired board. At the beginning of the game, each player controls 12 lights, which are randomly placed on the board. Players take turns moving their own lights as Knights in Chess. This move will extinguish all adjacent lights and activate any unlit adjacent cells. The objective of the game is to strategically move your lights to turn off all of your opponent\u2019s lights, thereby winning the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Shut Off His Lights\"\n    (players 2)\n    (equipment\n        {\n            (board (celtic 4))\n            (piece \"Light\"\n                Each\n                (move\n                    Leap\n                    { { F F R F } { F F L F } }\n                    (to if:(is Empty (to)))\n                    (then\n                        (forEach\n                            Site\n                            (sites Around (last To) includeSelf:True)\n                            (if\n                                (is Occupied (site))\n                                (remove (site))\n                                (add (piece (mover)) (to (site)))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place Random {\"Light1\"} count:12)\n                (place Random {\"Light2\"} count:12)\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSusan was invented by Stephem Linhart in 1991. It is played on a hexagonal board.\n</description>\n<rules>\nPlayers alternate turns. A player's turn consists on either placing piece on an empty field on board, or sliding one of their pieces into an empty one on the board. Players cannot pass. If each player performs three slides in a row then the game ends immediately as a draw. A player wins when any of the opponent's pieces are surrounded and cannot move. If one of a player's own pieces is surrounded on their turn, they lose even if an opponent's stone is surrounded at the same time.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Susan\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Marker\"\n                Each\n                (move Step Orthogonal (to if:(is Empty (to))))\n            )\n        }\n    )\n    (rules\n        (play\n            (or\n                (move Add (to (sites Empty)) (then (set Counter)))\n                (forEach Piece)\n                (then\n                    (priority\n                        (surround\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                if:(is Friend (who at:(between)))\n                                (apply (trigger \"Surrounded\" (mover)))\n                            )\n                            (to if:(is Occupied (to)))\n                        )\n                        (surround\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply (trigger \"Surrounded\" (next)))\n                            )\n                            (to if:(is Occupied (to)))\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if (= (counter) 5) (result Mover Draw))\n                (if\n                    (=\n                        (count\n                            Sites\n                            in:(sites Around (last To) if:(is Empty (to)))\n                        )\n                        0\n                    )\n                    (result Next Win)\n                )\n                (if (is Triggered \"Surrounded\" P1) (result P2 Win))\n                (if (is Triggered \"Surrounded\" P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMadelinette is a game with uncertain history. It is similar to Asian blockade games, but has more pieces and playing spaces.\n</description>\n<rules>\nPlayers move their pieces to an adjacent empty point. The goal is to block the other player from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Madelinette\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (remove\n                        (rectangle 3 3 diagonals:Alternating)\n                        vertices:{7 1}\n                    )\n                    edges:{ { 0 1} }\n                )\n                use:Vertex\n            )\n            (piece \"Counter\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Counter1\" (sites {\"A1\" \"C2\" \"A3\"}))\n                (place \"Counter2\" (sites {\"C1\" \"A2\" \"C3\"}))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMove all your stones to the other edge, but as slow as possible...\n</description>\n<rules>\nOn each turn, each player moves one stone forward (Black moves north, White moves east) to an empty cell. A player can only pass if there is no move option. The first player to pass, loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Migration\"\n    (players { (player E) (player N) })\n    (equipment\n        {\n            (board (square 8) use:Vertex)\n            (piece \"Ball\"\n                Each\n                (move\n                    Step\n                    (directions Forwards of:All)\n                    (to if:(is Empty (to)))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Ball1\" (sites {48 40 41 32 33 34 24 25 26 16 17 8}))\n                (place \"Ball2\" (sites {1 2 3 4 5 6 10 11 12 13 19 20}))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nGurvan Xudag is a blockade game played in Mongolia. Three guardians attempt to herd three calves into their pens.\n</description>\n<rules>\nThree vertical lines, and two horizontal lines intersecting them along their top end points and their midpoints. The ends of the lines which are not connected to one another are the calves' pens. Three pieces per player, one playing as calves (black), and the other as guardians (white), arranged on the intersections of opposite vertical lines. Players alternate turns moving one of their pieces to an adjacent spot. The guardians attempt to trap the calves into the three pens, the calves attempt to block the guardians from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Gurvan Xudag\"\n    (players 2)\n    (equipment\n        {\n            (board (remove (square 3) edges:{ { 0 1} { 1 2 } }) use:Vertex)\n            (piece \"Human\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Cow\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start { (place \"Human1\" (sites Left)) (place \"Cow2\" (sites Right)) })\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if\n                    (and\n                        (all\n                            Sites\n                            (difference (sites Occupied by:P2) (sites Bottom))\n                            if:(= 0 (count at:(site)))\n                        )\n                        (no Moves P2)\n                    )\n                    (result P1 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBlocking game played on a 6x8 or 7x7 board.\n</description>\n<rules>\nEach player has a pawn, that can move to any neighboring cell. After moving, the player places a block to the cell he came from. First player who cannot move loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Snailtrail\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 7 7))\n            (piece \"Pawn\"\n                Each\n                (move Step (to if:(is Empty (to))) (then (moveAgain)))\n            )\n            (piece \"Square\" Neutral)\n        }\n    )\n    (rules\n        (start { (place \"Pawn1\" { \"A1\"}) (place \"Pawn2\" { \"G7\" }) })\n        (play\n            (if\n                (is Even (count Moves))\n                (forEach Piece)\n                (move Add (piece \"Square0\") (to (last From)))\n            )\n        )\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMu Torere is a game played by the Maori of New Zealand. It is unknown how old the game is. The board takes the form of a circle divided into eighths, with eight points on the circumference (kewai) and the central point (putahi) being playing spaces.\n</description>\n<rules>\n\"Play begins with the pieces on the kewai, each player on half of the circle. Players move by moving one piece to an empty adjacent space. Players can only move to the putahi when the piece being moved is next to an opponent's piece. The player that blocks the other from moving is the winner.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Mu Torere\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric {1 8}) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to\n                        if:(and\n                            (is Empty (to))\n                            (or\n                                (not (= (to) (centrePoint)))\n                                (is\n                                    Related\n                                    Adjacent\n                                    (from)\n                                    (sites Occupied by:Next)\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            { (place \"Marker1\" { 1 2 3 8}) (place \"Marker2\" { 4 5 6 7 }) }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCram is a mathematical game played on a sheet of graph paper. It is the impartial version of Domineering and the only difference in the rules is that each player may place their dominoes in either orientation, but it results in a very different game.\n</description>\n<rules>\nThe game is played on a sheet of graph paper, with any set of designs traced out. It is most commonly played on rectangular board like a 6\u00d76 square. Two players have a collection of dominoes which they place on the grid in turn. A player can place a domino either horizontally or vertically. Contrary to the related game of Domineering, the possible moves are the same for the two players, and Cram is then an impartial game. As for all impartial games, there are two possible conventions for victory: in the normal game, the first player who cannot move loses, and on the contrary, in the misere version, the first player who cannot move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Cram\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 6 6))\n            (tile \"Tile\" P1 { F } numSides:4)\n            (tile \"Tile\" P2 { F } numSides:4)\n        }\n    )\n    (rules\n        (play\n            (or\n                (move Add (piece (mover) state:0) (to (sites Empty)))\n                (move Add (piece (mover) state:1) (to (sites Empty)))\n            )\n        )\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nIn this version of the blocking game known as J\u00e4nes Soppi both players have three pieces. It was played by children in K\u00e4rla, Estonia.\n</description>\n<rules>\n3x3 intersecting lines, with triangles extending on opposite ends of the large square and the central line extending to the apices. One player plays as three notched sticks, called hares, and the other as three sharp sticks, known as the hounds. Players alternate turns placing a piece on the board. When the players have placed all of their pieces on the board, they move one of their pieces to an empty adjacent spot along the lines. The first player to block their opponent from being able to move wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Janes Soppi (Symmetrical)\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (remove\n                    (merge\n                        {\n                            (rectangle 3 3 diagonals:Alternating)\n                            (shift 1.5 0.5 (rotate -90 (wedge 2)))\n                            (shift -1.5 0.5 (rotate 90 (wedge 2)))\n                        }\n                    )\n                    edges:{ { 6 4} { 4 2 } { 0 4 } { 4 8 } }\n                )\n                use:Vertex\n            )\n            (hand Each)\n            (piece \"Hound\" P1 (move Step (to if:(is Empty (to)))))\n            (piece \"Hare\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Hound1\" (handSite P1) count:3)\n                (place \"Hare2\" (handSite P2) count:3)\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHo-Bag Gonu is a Korean game with an uncertain history. It is a blockade game, similar to others found throughout Asia.\n</description>\n<rules>\nEach player has three pieces. Players take turns moving a piece to an empty dot. Players cannot return to their starting three dots. Pieces that move into the opponent\u2019s starting three dots cannot exit them. A player wins by blocking the other player from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ho-Bag Gonu\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (merge\n                        {\n                            (rectangle 1 3)\n                            (shift 1 1 (scale 0.5 (concentric {1 4})))\n                            (shift 0 2 (rectangle 1 3))\n                        }\n                    )\n                    edges:{ { 5 1} { 9 7 } }\n                )\n                use:Vertex\n            )\n            (piece \"Disc\"\n                Each\n                (move\n                    Step\n                    (to\n                        if:(or\n                            (and\n                                {\n                                    (is In (from) (sites Next))\n                                    (is In (to) (sites Next))\n                                    (is Empty (to))\n                                }\n                            )\n                            (and\n                                (not (is In (from) (sites Next)))\n                                (if\n                                    (not (is In (from) (sites Mover)))\n                                    (is\n                                        In\n                                        (to)\n                                        (difference\n                                            (sites Empty)\n                                            (sites Mover)\n                                        )\n                                    )\n                                    (is Empty (to))\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n            (regions \"Home\" P1 (sites {\"A1\" \"C1\" \"E1\"}))\n            (regions \"Home\" P2 (sites {\"A5\" \"C5\" \"E5\"}))\n        }\n    )\n    (rules\n        (start { (place \"Disc1\" (sites P1)) (place \"Disc2\" (sites P2)) })\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMathematical game used as an introductory game in the book Winning Ways for your Mathematical Plays.\n</description>\n<rules>\nThis game is played on an empty 1row x n column board with m stones on each side. At each turn, each player must do one of the following actions. Move a stone forward (i.e., left to one player, right to the other) or jump over one enemy stone, landing on the immediate empty cell. The player who makes the last move wins the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Toads and Frogs\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 1 5))\n            (piece \"Toad\"\n                P1\n                E\n                (or\n                    (move\n                        Hop\n                        Forward\n                        (between if:(is Enemy (who at:(between))))\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step Forward (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Frog\"\n                P2\n                W\n                (or\n                    (move\n                        Hop\n                        Forward\n                        (between if:(is Enemy (who at:(between))))\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step Forward (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Toad1\" (expand (sites Left) steps:(- 2 1)))\n                (place \"Frog2\" (expand (sites Right) steps:(- 2 1)))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPentomino tiling puzzles and games are popular in recreational mathematics.\n</description>\n<rules>\nTwo players have a collection of dominoes which they place on the grid in turn, covering up squares. One player places tiles vertically, while the other places them horizontally. The first player who cannot move loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Pentomino\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 6 10))\n            (tile \"Z\" Shared { F R F F L F })\n            (tile \"Y\" Shared { F R F R R F R F F })\n            (tile \"X\" Shared { F L F L L F F L L F R F })\n            (tile \"W\" Shared { F L F R F L F })\n            (tile \"V\" Shared { F F R F F })\n            (tile \"U\" Shared { F L F F L F })\n            (tile \"T\" Shared { F F R F R R F F })\n            (tile \"P\" Shared { F F R F R F })\n            (tile \"N\" Shared { F R F L F F })\n            (tile \"L\" Shared { F R F F F })\n            (tile \"I\" Shared { F F F F })\n            (tile \"F\" Shared { F L F L L F L F R F })\n            (hand Shared size:12)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"F\" (handSite Shared 0))\n                (place \"I\" (handSite Shared 1))\n                (place \"L\" (handSite Shared 2))\n                (place \"N\" (handSite Shared 3))\n                (place \"P\" (handSite Shared 4))\n                (place \"T\" (handSite Shared 5))\n                (place \"U\" (handSite Shared 6))\n                (place \"V\" (handSite Shared 7))\n                (place \"W\" (handSite Shared 8))\n                (place \"X\" (handSite Shared 9))\n                (place \"Y\" (handSite Shared 10))\n                (place \"Z\" (handSite Shared 11))\n            }\n        )\n        (play (move (from (sites Hand Shared)) (to (sites Empty))))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nScore Four is a 3D version of Connect Four on a 4x4x4 board.\n</description>\n<rules>\nPlace a piece of your colour each turn. Win with 4 in a row of your colour.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Score Four\"\n    (players 2)\n    (equipment\n        {\n            (board (skew .5 (scale 1 .5 (square 4))))\n            (piece \"discFlat\" Each)\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (to (forEach (sites Board) if:(< (size Stack at:(site)) 4)))\n                stack:True\n            )\n        )\n        (end (if (is Line 4 byLevel:True) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTic-Tac-Toe is a game of alignment popular among children. It is known from the nineteenth century in England and the United States, but may be older.\n</description>\n<rules>\nPlay occurs on a 3x3 grid. One player places an X, the other places an O and players take turns placing their marks in the grid, attempting to get three in a row of their colour.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tic-Tac-Toe\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3))\n            (piece \"Disc\" P1)\n            (piece \"Cross\" P2)\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nShiva is a game of alignment played by the Tiv people of Nigeria. It's a rare game of alignment that only allows rows of no more than three pieces.\n</description>\n<rules>\n5x6 or 6x6 board. Twelve pieces per player. Players take turns placing pieces on the board. Once all the pieces are on the board, players may move one piece orthogonally one space during their turn. Players cannot create a line of more than three in an orthogonal direction, and cannot make a line of three during the placement phase. If three pieces are in an orthogonal line, they cannot be moved again. If a player makes three rows before the opponent makes one, it is an automatic win.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Shiva\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 6))\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (if\n                    (not (is Line 3 Orthogonal through:(from)))\n                    (move\n                        Step\n                        Orthogonal\n                        (to if:(is Empty (to)))\n                        (then\n                            (if\n                                (is Line 3 Orthogonal)\n                                (if\n                                    (= (value Player Mover) Off)\n                                    (set Value Mover 1)\n                                    (set\n                                        Value\n                                        Mover\n                                        (+ (value Player Mover) 1)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (do\n                        (move (from (handSite Mover)) (to (sites Empty)))\n                        ifAfterwards:(not (is Line 3 Orthogonal))\n                    )\n                )\n                (nextPhase\n                    (and\n                        (all\n                            Sites\n                            (sites Hand P1)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                        (all\n                            Sites\n                            (sites Hand P2)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (do\n                        (forEach Piece)\n                        ifAfterwards:(not (is Line 4 Orthogonal))\n                    )\n                )\n            )\n        }\n        (end (if (= (value Player Mover) 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nXanan Zirge is an alignment game played in Mongolia. Players attempt to place their pieces three in a row, or in a square.\n</description>\n<rules>\n9x9 intersecting lines. Forty pieces per player. Players alternate turns placing a piece on an empty space on the board. When all of the pieces are placed, players alternate turns moving a piece to an empty adjacent spot on the board. When a player places three of their pieces in an orthogonal or diagonal line, they remove one of the opponent's pieces. Players also remove one of the opponent's pieces when they place four pieces so that they are one the four corners of one of the squares on the board. Pieces which are in these patterns cannot be removed from the board. The player who removes all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Xanan Zirge\"\n    (players 2)\n    (equipment\n        {\n            (board (square 9) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then\n                        (if\n                            (or\n                                (is Line 3 All)\n                                (is Pattern { F R F R F R F })\n                            )\n                            (moveAgain)\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:40))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Next container:\"Board\")\n                                if:(and\n                                    (not (is Line 3 All through:(site)))\n                                    (not\n                                        (is\n                                            Pattern\n                                            { F R F R F R F }\n                                            from:(site)\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (or\n                                        (is Line 3 All)\n                                        (is Pattern { F R F R F R F })\n                                    )\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Next container:\"Board\")\n                                if:(and\n                                    (not (is Line 3 All through:(site)))\n                                    (not\n                                        (is\n                                            Pattern\n                                            { F R F R F R F }\n                                            from:(site)\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nWali is a word used for several games played in West Africa. This particular version was played by the Songhai people of Mali and Niger.\n</description>\n<rules>\n5x6 board, made in the sand. One player plays with twelve sticks and the other with twelve pebbles. The player with the sticks plays first. Players alternate turns placing one of their pieces on an empty space on the board. Players are not permitted to place more than two of their own pieces in an orthogonal row on the board. When all of the pieces are placed, players alternate turns moving one of their pieces orthogonally one space. When a player successfully places three of their pieces in an orthogonal row of three, the player captures one of the opponent's pieces. The player who captures all of their opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Wali\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 6))\n            (hand Each)\n            (piece \"Stick\"\n                P1\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal) (moveAgain)))\n                )\n            )\n            (piece \"Ball\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Stick1\" (handSite P1) count:12)\n                (place \"Ball2\" (handSite P2) count:12)\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (do\n                        (move (from (handSite Mover)) (to (sites Empty)))\n                        ifAfterwards:(not (is Line 3 Orthogonal))\n                    )\n                )\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nRing is a game played by the Warlpiri people of Australia in the mid-twentieth century. Old men described it has always having been played in the town. It was originally reported as a likely imported game, but the ubiquity of alignment games worldwide and the fact that alignment games on circular boards are rare elsewhere show that the game is probably an indigenous development.\n</description>\n<rules>\nA circle with eight radii. Three pieces per player. Each player has three pieces, which must start on the outer ring adjacent to each other. Players alternate turns moving a piece to an empty point along the lines of the board. The player who makes a line of three through the center of the circle wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ring\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric {1 8}) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to (difference (sites Empty) (sites Centre)))\n                    )\n                )\n                (nextPhase Mover \"PlacementAdjacent\")\n            )\n            (phase\n                \"PlacementAdjacent\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to\n                            (difference (sites Empty) (sites Centre))\n                            if:(is\n                                In\n                                (to)\n                                (sites Around (sites Occupied by:Mover))\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            (if\n                (is Line 3 through:(centrePoint) what:(mover))\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nGurgaldaj (Nightingale) is a game of alignment played on a triangular board in Mongolia.\n</description>\n<rules>\nThree concentric triangles, with lines connecting their midpoints and corners. Eight pieces per player. Players alternate turns placing a piece on an empty spot on the board. When all of the pieces are placed, players alternate turns moving a piece to an empty adjacent spot along the lines. When a player places three of their pieces in a row, they remove one of the opponent's pieces from the board. A piece that is in a three-in-a-row pattern cannot be removed. The player who removes all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Gurgaldaj\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Triangle rings:3 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:8))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then (if (is Line 3 Orthogonal) (moveAgain)))\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMarelle Quadruple is an alignment game played in nineteenth century France.\n</description>\n<rules>\n5x5 intersecting lines, with diagonals in the quadrants. Five pieces per player. Players alternate turns placing a piece on the board. Once all of the pieces are placed on the board, players alternate turns moving a piece to an empty adjacent spot on the board. The player who places all five of their pieces in a line wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Marelle Quadruple\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:5))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 5) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSix Men's Morris was popular in Medieval Europe until about 1600 CE. It is an alignment game based on Nine Men's Morris, with similar rules.\n</description>\n<rules>\n\"Same rules as Murray, except a player cannot remove an opponent's piece that is in a three in a row formation unless there are no other options.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Six Men's Morris\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:2) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:6))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nInvented after 1 second's thought.\n</description>\n<rules>\nStart with a tile of each colour placed next to each other. Players take turns adding a tile of their colour touching at least one existing tile. Win by making a line of four (or more) of your colour, but lose by making a line of three of your colour beforehand.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Bravalath\"\n    (players 2)\n    (equipment\n        {\n            (boardless Hexagonal)\n            (tile \"Hex\" Each numSides:6)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Hex1\" (centrePoint))\n                (place \"Hex2\" (ahead (centrePoint) E))\n            }\n        )\n        (play\n            (move\n                Add\n                (to\n                    (sites Playable)\n                    if:(<= 1 (count Sites in:(sites Around (to) NotEmpty)))\n                )\n            )\n        )\n        (end\n            {\n                (if (is Line 4) (result Mover Win))\n                (if (is Line 3) (result Mover Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNiranchy is a game of alignment played in Sri Lanka during the nineteenth century. It was a common game played by people of all ages, often played in breaks between \\\"intervals of business.\\\"\n</description>\n<rules>\nThree concentric squares, with lines connecting the midpoints and diagonals of the squares. Twelve pieces per player. Players alternate turns placing one of their pieces on the board. When all of the pieces are placed, the pieces may be moved to an empty adjacent spot on the board. One player wins by placing three of their pieces in a row. The other player wins by blocking their opponent from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Niranchy\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            {\n                (if (no Moves P2) (result P1 Win))\n                (if (is Line 3 P2) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLes Pendus is a game of alignment from France. It comes in a three-in-a-row variant and a five-in-a-row variant. It is unknown how old these games are in France, but the boards on which they are played have been common since the Roman (three-in-a-row) or medieval (five-in-a-row) period.\n</description>\n<rules>\n\"3x3 board with diagonals. Three pieces per player. Players take turns placing their pieces. Once all pieces have been placed, they may move a piece to any unoccupied spot. The first player to align their three pieces in a row along one of lines on the board is the winner.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Les Pendus\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move (from) (to (sites Empty))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game was observed played by Yoruba people, who called it Akidada, and in Ghana, during the early twentieth century. The board was traced into the sand, and the players used pieces which took the form of sticks made from palm leaves, one player using green sticks and the other using brown.\n</description>\n<rules>\n\"Each player has six pieces. They take turns placing the pieces on the intersections, attempting to make three in a row. If they are unsuccessful after all the pieces are placed, they then take turns moving their piece one spot along one of the lines until someone makes three in a row (Murray 1951: 43).\n</rules>\n</query>\n</task>",
        "solution": "(game \"Achi\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:2) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:6))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nhis game is played on the following 4x4 square board.\n</description>\n<rules>\nMOVE - On each turn, each player move one of his stones into an adjacent orthogonal empty cell. GOAL - Wins the player that makes a (orthogonal or diagonal) 3 in-a-row.\n</rules>\n</query>\n</task>",
        "solution": "(game \"A Simple Game\"\n    (players 2)\n    (equipment\n        {\n            (board (square 4) use:Vertex)\n            (piece \"Ball\" Each (move Step Orthogonal (to if:(is Empty (to)))))\n            (hand Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Ball1\"\n                    (intersection\n                        (sites Phase 0)\n                        (union (sites Top) (sites Bottom))\n                    )\n                )\n                (place\n                    \"Ball2\"\n                    (intersection\n                        (sites Phase 1)\n                        (union (sites Top) (sites Bottom))\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (is Line 3 All) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMylna is an alignment game played in Iceland. It is closely related to other games played on this board, such as Nine Men\u00b4s Morris.\n</description>\n<rules>\nPlayed on a board of three concentric squares, with a line bisecting the perimeters of each square on each side, but not extending inside the perimeter of the central square. Play occurs on the intersections of the lines and the corners of the squares. Each player has nine pieces. Play begins with each player placing pieces on empty points. If they make three in a row along the lines, they can remove one of the opponent's pieces. They cannot remove an opponent's piece that is in a three-in-a-row formation. Once all pieces are placed, players take turns moving pieces one spot to an adjacent point along the lines. If a player makes three in a row, an opponent's piece is removed as in the first phase of the game. The game is won when the opponent is reduced to two pieces. A player may also win by blocking their opponent from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Mylna\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal) (moveAgain)))\n                )\n            )\n            (hand Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then (if (is Line 3 Orthogonal) (moveAgain)))\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end\n            {\n                (if (<= (count Pieces Next) 2) (result Next Loss))\n                (if (no Moves Next) (result Mover Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThree Men's Morris is a simple alignment game that is still played today, that has been played in Europe for centuries. It may also appear in Roman sources, and similar boards have been found as graffiti at Roman sites.\n</description>\n<rules>\n3x3 intersecting lines with diagonals. Play occurs on the intersections of the lines. Each player has three pieces. Play begins with each player placing pieces on empty points. If they make three in a row along the lines, they win. Once all pieces are place, players take turns moving pieces one spot to an adjacent point along the lines trying to make three in a row.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Three Men's Morris\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTriodi is an alignment game played in Greece. Boards for this game have been found in Greece going back to antiquity, and it was still played there in the early twentieth century.\n</description>\n<rules>\nThree concentric squares, the midpoints of the squares connected with lines. Nine pieces per player. Players alternate turns placing a piece on an empty spot on the board. When all of the pieces are placed, the players alternate turns moving a piece to an empty adjacent spot along the lines. During either phase, when a player places three of their pieces in a row along the lines, the player removes any one of the opponent's pieces. The player who reduces the opponent to two pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Triodi\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTauru is an alignment game played by the Bariba people in what is now Benin. It is closely related to the game Dara, but instead of the player to capture the most pieces, the player to make the last possible capture wins. It is played by adult men, but at the time it was recorded was increasingly played by young men who were Wasangari, or in line to rule.\n</description>\n<rules>\n5x6 board. Each player has twelve pieces. Players alternate placing their pieces until they are all placed on the board. The goal is to make a line of three, which allows the player to capture one of the opponent's pieces. Once the pieces are all on the board, they may be moved one space orthogonally. In the case that a move creates two lines of three, only one capture is made. The player who makes the last possible capture wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tauru\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 6))\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then (if (is Line 3) (moveAgain)))\n                        )\n                    )\n                )\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAltan Xaraacaj (Golden swallows) is an alignment game played in Mongolia. One player plays as golden swallows (the black pieces) and the other plays as spotted swallows (the white pieces).\n</description>\n<rules>\n5x5 intersecting lines, with diagonals in each quadrant. Six pieces per player. Players alternate turns placing one of their pieces on an empty spot on the board. When all of the pieces are placed, they alternate turns moving one of their pieces to an empty adjacent spot along the lines of the board. During either phase, when a player places three of their pieces in a row, they may remove one of the opponent's pieces from the board. Pieces which are in a three-in-a-row arrangement cannot be removed from the board. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Altan Xaraacaj\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:6))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFart is an alignment game played by young people of El Oued, Algeria. In this version, players must place their pieces in a row of five to win.\n</description>\n<rules>\n5x5 board. Twelve pieces per player. Players alternate turns placing two pieces on the board. When all of the pieces are placed, players alternate turns moving one piece orthogonally any distance. The first player to place five of their pieces in an orthogonal or diagonal line wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Fart (5x5)\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5))\n            (piece \"Marker\" Each (move Slide Orthogonal))\n            (hand Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to\n                            (difference (sites Board) (centrePoint))\n                            if:(is Empty (to))\n                        )\n                        (then (if (not (is Prev Mover)) (moveAgain)))\n                    )\n                )\n                (nextPhase Mover (is Empty (handSite Mover)) \"Move\")\n            )\n            (phase \"Move\" (play (forEach Piece)))\n        }\n        (end (if (is Line 5) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDjara-Badakh is a simple game of alignment played by children in Somalia.\n</description>\n<rules>\n3x3 intersecting lines. Three pieces per player. Players alternate turns placing a piece on an empty spot on the board. When all of the pieces are placed, players alternate turns moving a piece to an empty adjacent spot. The first player to place their three pieces along one of the lines wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Djara-Badakh\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMlabalaba (more frequently known as Morabaraba) is an alignment game played in South Africa.\n</description>\n<rules>\nThree concentric squares, with lines connecting the corners and midpoints of the squares. Twelve pieces per player. In the first phase, players take turns placing pieces on an empty spot on the board. If they place three pieces so they are in a line, forming a \\\"meul.\\\" they remove one of the opponent's pieces that is not in a \\\"meul.\\\" Once all the pieces are placed, the second phase begins, in which players take turns moving one piece to an adjacent empty spot. When a \\\"meul\\\" is formed, the player removes one of the opponent's pieces that is not in a \\\"meul.\\\" When one player is reduced to three pieces, they may move their pieces to any empty spot on the board. The player who reduces their opponent to two pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Mlabalaba\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (if\n                    (= 3 (count Pieces Mover))\n                    (move (from (from)) (to (sites Empty)))\n                    (move Step (to if:(is Empty (to))))\n                    (then (if (is Line 3 Orthogonal) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then (if (is Line 3 Orthogonal) (moveAgain)))\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end\n            (forEach\n                NonMover\n                if:(= 2 (count Pieces Player))\n                (result Player Loss)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSujjua is a game of alignment played in India. In the Karwi subdivision, it is played in the meeting place of the village. It is also found as graffiti on a ruined temple nearby, leaving the possibility open that the game is much older.\n</description>\n<rules>\nThree concentric squares with lines connecting their midpoints. Nine pieces per player. Players alternate turns placing pieces on the board or moving one piece on the board to an adjacent empty spot. The first player to get three of their pieces in a row wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Sujjua\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (move Step Orthogonal (to if:(is Empty (to))))\n            )\n            (hand Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        (play\n            (or\n                (if\n                    (not\n                        (all\n                            Sites\n                            (sites Hand Mover)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                    )\n                    (move (from (handSite Mover)) (to (sites Empty)))\n                )\n                (forEach Piece)\n            )\n        )\n        (end (if (is Line 3 Orthogonal) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTic-Tac-Four is a Tic-Tac-Toe variant invented by Matthew Stephenson for Ludii.\n</description>\n<rules>\nThe same rules as Tic-Tac-Toe are used with four players in a 5x5 board. The third and fourth players play with \\\"Y\\\" and \\\"Z\\\".\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tic-Tac-Four\"\n    (players 4)\n    (equipment\n        {\n            (board (square 5))\n            (piece \"Disc\" P1)\n            (piece \"Cross\" P2)\n            (piece \"Y\" P3)\n            (piece \"Z\" P4)\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMany variants on the concept of noughts and crosses exist. This version was created by Alan Parr. It is played on a 3x3 or 3x4 board with a supply of red, yellow, and green markers.\n</description>\n<rules>\nThe object is to get a line of three of the same color. On each turn, you may do ONE of the following: (1) Put a red counter in an empty square. (2) Replace a red counter with a yellow one. (3) Replace a yellow counter with a green one.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Traffic Lights\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 4))\n            (piece \"Square\" Shared)\n            (piece \"Triangle\" Shared)\n            (piece \"Disc\" Shared)\n        }\n    )\n    (rules\n        (play\n            (or\n                {\n                    (move Add (piece \"Square\") (to (sites Empty)))\n                    (move\n                        Select\n                        (from (sites Occupied by:Shared component:\"Square\"))\n                        (then\n                            (promote (last To) (piece {\"Triangle\"}) Shared)\n                        )\n                    )\n                    (move\n                        Select\n                        (from (sites Occupied by:Shared component:\"Triangle\"))\n                        (then (promote (last To) (piece {\"Disc\"}) Shared))\n                    )\n                }\n            )\n        )\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTsoro Yemutatu is an alignment game from Zimbabwe. This version, played on a square board, is played by boys and young men, but sometimes adults and is usually scratched on the ground and played with stones.\n</description>\n<rules>\n3x3 intersecting lines, with diagonals drawn in the large square. Three pieces per player. Players alternate turns placing a stone on an empty point on the board. When all of the pieces have been placed, players alternate turns moving one of their pieces to any empty point. The first player to place three of their pieces in a line wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tsoro Yemutatu\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move (from) (to (sites Empty))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTsoro Yemutatu is an alignment game played by boys, young men, and sometimes adults in Zimbabwe. This version is played on a triangular board, drawn on the ground and played with stones.\n</description>\n<rules>\nTriangle, with a line from the apex bisecting the base, and a line bisecting this one and the opposite sides. Three pieces per player. Players alternate turns placing a piece on one of the empty points on the board. When all of the pieces have been placed, players alternate turns moving any one of their pieces to the empty point on the board. The first player to make a line of three wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tsoro Yemutatu (Triangle)\"\n    (players 2)\n    (equipment\n        {\n            (board (scale 1 2 (wedge 3)) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move (from) (to (sites Empty))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nInvented in 1995 by David L. Smith, Andantino is a tile-placing game using hexagonal tiles published by Nestor Games.\n</description>\n<rules>\nThe game starts with a tile of each color touching one another. Players take turns placing tiles which must touch at least two other tiles. A player wins by either completely surrounding one or more of the opponent's tiles, or by creating a straight line of five tiles.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Andantino\"\n    (players 2)\n    (equipment\n        {\n            (boardless Hexagonal)\n            (tile \"Hex\" Each numSides:6)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Hex1\" (centrePoint))\n                (place \"Hex2\" (ahead (centrePoint) E))\n            }\n        )\n        (play\n            (move\n                Add\n                (to\n                    (sites Playable)\n                    if:(<= 2 (count Sites in:(sites Around (to) NotEmpty)))\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (or (is Loop surround:Next) (is Line 5))\n                    (result Mover Win)\n                )\n                (if\n                    (= (count Moves) (* (count Players) 24))\n                    (result Mover Draw)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nRound Merels is a hypothesized game based on the frequent discovery of this pattern as graffiti on Roman and later monuments. It may be similar to a simple merels game but on a round board.\n</description>\n<rules>\n\"Eight spots arranged in a circle around a central spot. Opposite spots are connected by a diameter through the central spot.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Round Merels\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric {1 8}) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end\n            (if\n                (is Line 3 through:(centrePoint) what:(mover))\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nEngijn Zirge is a simple game of alignment played in Mongolia.\n</description>\n<rules>\n3x3 intersecting lines, with diagonals. Three pieces per player. Players alternate turns placing pieces on the board. Once all of the pieces have been placed, the players alternate turns moving a piece to an empty adjacent spot on the board. The first player to place their pieces in a row along one of the lines wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Engijn Zirge\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSliding queens to make a 4 in-a-row.\n</description>\n<rules>\nOn each turn, each player must move one friendly stone. Stones slide (orthogonally or diagonally) over a line of empty cells (like a non-capturing chess queen). Wins the player that makes a 4 in-a-row.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Queen's Four\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 12 15))\n            (piece \"Ball\" Each (move Slide))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Ball1\" (sites {7 22 67 82 127 142}))\n                (place \"Ball2\" (sites {37 52 97 112 157 172}))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (is Line 4) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNine Holes is an alignment game played at least since the seventeenth century in Great Britain, but likely goes back to the Roman Empire.\n</description>\n<rules>\n3x3 intersecting lines. Three pieces per player. Players alternate turns placing pieces on an empty spot on the board. When all pieces are placed, players alternate turns moving a piece to any empty spot on the board. The first player to place their pieces in an orthogonal row along the lines wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Nine Holes\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move (from) (to (sites Empty))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3 Orthogonal) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTriodi is a name for alignment games in Greece. This game is played by children on the island of Chios.\n</description>\n<rules>\n3x3 intersecting lines. Three pieces per player. Players alternate turns placing a piece on the board. When all of the pieces have been placed, the players alternate turns moving a piece to an empty adjacent spot. A piece which is surrounded on opposite sides by pieces belonging to the opponent cannot be moved. The player who places three of their stones in a row along one of the lines wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Triodi (Chios)\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (if\n                    (not\n                        (or\n                            (if\n                                (and\n                                    (!= (ahead (from) N) (from))\n                                    (!= (ahead (from) S) (from))\n                                )\n                                (and\n                                    (= (next) (who at:(ahead (from) N)))\n                                    (= (next) (who at:(ahead (from) S)))\n                                )\n                            )\n                            (if\n                                (and\n                                    (!= (ahead (from) E) (from))\n                                    (!= (ahead (from) W) (from))\n                                )\n                                (and\n                                    (= (next) (who at:(ahead (from) E)))\n                                    (= (next) (who at:(ahead (from) W)))\n                                )\n                            )\n                        )\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTule Paid is an alignment game played in the Assam region of India.\n</description>\n<rules>\nThree concentric squares, with lines connecting the diagonals and the midpoints of the sides. Twelve pieces per player. Players alternate turns placing a piece on an empty spot on the board. When a player places three pieces in a row along one of the lines on the board, they remove one of the pieces belonging to the opponent. When all of the pieces have been placed, players alternate turns moving a piece to an empty adjacent spot along the lines. The first player to capture all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tule Paid\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then (if (is Line 3) (moveAgain)))\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAkidada is a simple game of alignment played by Yoruba people in what is now Ghana.\n</description>\n<rules>\n3x3 intersecting lines. Three sticks per player, the sticks angled toward the player to indicate ownership. Players alternate turns placing sticks on the board. Once all of the sticks are placed, players alternate turns moving a stick to any empty spot on the board. The first player to place three sticks in an orthogonal row along the lines wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Akidada\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3) use:Vertex)\n            (hand Each)\n            (piece \"Stick\" Each (move (from) (to (sites Empty))))\n        }\n    )\n    (rules\n        (start (place \"Stick\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3 Orthogonal) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKeryo-Pente was invented by Rollie Tesh in 1983, as an alternative way to mitigate the first-player advantage in Pente. As in Pente, players compete to be the first to form an orthogonal or diagonal line of five stones. However, in Keryo-Pente players may capture two or three opposing stones rather than only two; the threshold to win the game by capture also increases from 10 to 15 stones. This variation reduces the first-player advantage by significantly increasing the second player's defensive options.\n</description>\n<rules>\nKeryo-Pente is played on a 19x19 Go board. White goes first, and plays their first move on the centre point (unless playing Freestyle). After the opening, players alternate playing one stone of their colour onto any empty point. If their placement results in a pair or a line of three enemy stones being sandwiched between two of their own stones, those enemy stones are captured. The first player to form an orthogonal or diagonal line of five (or more) of their stones, or to capture 15 enemy stones, wins the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Keryo-Pente\"\n    (players 2)\n    (equipment\n        {\n            (board (square 19) use:Vertex)\n            (piece \"Ball\" Each)\n        }\n    )\n    (rules\n        (start (set Score Each 0))\n        phases:{\n            (phase\n                \"Opening\"\n                (play (move Add (to (sites \"J10\"))))\n                (nextPhase \"General\")\n            )\n            (phase\n                \"General\"\n                (play\n                    (move\n                        Add\n                        (to (sites Empty))\n                        (then\n                            (custodial\n                                (from (last To))\n                                All\n                                (between\n                                    if:(is Next (who at:(between)))\n                                    (apply (remove (between)))\n                                )\n                                (to\n                                    if:(and\n                                        (or\n                                            (=\n                                                3\n                                                (count\n                                                    Steps\n                                                    Vertex\n                                                    All\n                                                    (last To)\n                                                    (to)\n                                                )\n                                            )\n                                            (=\n                                                4\n                                                (count\n                                                    Steps\n                                                    Vertex\n                                                    All\n                                                    (last To)\n                                                    (to)\n                                                )\n                                            )\n                                        )\n                                        (is Mover (who at:(to)))\n                                    )\n                                )\n                                (then (addScore Mover 1))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end\n            {\n                (if (is Line 5 All) (result Mover Win))\n                (if (> (score Mover) 14) (result Mover Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis is a variant of Tic-Tac-Toe.\n</description>\n<rules>\nTic Tactics is for 2 to 4 players. The goal is to place three pieces of the same color in a diagonal, horizontal, or vertical row. The pieces may be in a single 3x3 square or bridge two of the 3x3 squares. The board consists of nine 3x3 squares with 1x1 squares that connect all nine 3x3 squares. All four colors are used when playing. With two players each player plays two colors. Each player plays one disc each turn and alternates between their two colors.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tic Tactics\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (remove\n                    (square 11)\n                    cells:{\n                        3 7 14 25 18 29 33 34 35 37 38 39 41 42 43 47 58 69 51\n                        62 73 77 78 79 81 82 83 85 86 87 91 102 113 95 106 117\n                    }\n                )\n            )\n            (piece \"Disc\" Each)\n            (piece \"Cross\" Each)\n        }\n    )\n    (rules\n        (play\n            (if\n                (or (= (% (count Turns) 4) 0) (= (% (count Turns) 4) 1))\n                (move Add (piece (mover)) (to (sites Empty)))\n                (move Add (piece (+ 2 (mover))) (to (sites Empty)))\n            )\n        )\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nWur\u00e9 Dun\u00e9 (\\\"Devil's Game\\\") is a simple game of alignment played in many cultures in West Africa.\n</description>\n<rules>\n3x3 intersecting lines, with diagonals. Three pieces per player. Players alternate turns placing one of their pieces on the board. Once all of the pieces are placed, players take turns moving one of their pieces to an adjacent empty spot. The first player to make an orthogonal line with their pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Wure Dune\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move Step All (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3 Orthogonal) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBroken Line is a game played on a board tiling by hexagon. The goal is to make a line with stones connected diagonally.\n</description>\n<rules>\nPlayers take turns placing their pieces on one empty space on the board, with the goal of making a line with stones connected diagonally of at least length 4.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Broken Line\"\n    (players 2)\n    (equipment\n        {\n            (board (hex Diamond 11))\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (meta (swap))\n        (play (move Add (to (sites Empty))))\n        (end (if (is Line 4 Diagonal) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDra is a game popular in West Africa, particularly in the areas of the Sahel and across several groups including the Touareg, Hausa, Bambara, Bozo, Sourai, and Fula. Typically, one player plays with twelve sticks, the other with twelve stones.\n</description>\n<rules>\n5x6 board. Each player has twelve pieces. Players alternate placing their pieces until they are all placed on the board. Players cannot make a row of three pieces in the placement phase. Once the pieces are all on the board, they may be moved one space orthogonally. The goal is to make a line of three, which allows the player to capture one of the opponent's pieces. In the case that a move creates two lines of three, only one capture is made. The player who captures the most pieces wins. Matches are typically played to a score of ten, with a player scoring one point by winning a game, and two points for winning without any of their pieces being captured.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Dra\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 6))\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (do\n                        (move (from (handSite Mover)) (to (sites Empty)))\n                        ifAfterwards:(not (is Line 3 Orthogonal))\n                    )\n                )\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n                (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n            )\n        }\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game is played on the following 10x4 square board.\n</description>\n<rules>\nTURNS - At each turn, each player must move one of his stones - A stone moves (orthogonal and diagonal) forward to an empty cell. GOAL - A player wins by making a (orthogonal or diagonal) 4 in-a-row.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Roll-Ing to Four\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board (rectangle 10 4) use:Vertex)\n            (piece \"Ball\"\n                Each\n                (move\n                    Step\n                    (directions Forwards of:All)\n                    (to if:(is Empty (to)))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Ball1\" (sites {\"A1\" \"B1\" \"C1\" \"B6\" \"C6\" \"D6\"}))\n                (place \"Ball2\" (sites {\"A5\" \"B5\" \"C5\" \"B10\" \"C10\" \"D10\"}))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (is Line 4 All) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nT'mbl is an alignment game played by Chaamba children of Algeria.\n</description>\n<rules>\n3x3 intersecting lines, with diagonals drawn in the square. Three pieces per player, which begin on the three points on opposite sides of the board. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The first player to place three of their pieces in a row along one of the lines which is not one of the sides of the square, wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"T'mbl\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3 diagonals:Alternating) use:Vertex)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            { (place \"Marker1\" (sites Top)) (place \"Marker2\" (sites Bottom)) }\n        )\n        (play (forEach Piece))\n        (end\n            (if\n                (and\n                    (is In (centrePoint) (sites Occupied by:Mover))\n                    (is Line 3)\n                )\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSelbia is an alignment game played in the Bordj Bou Arreridj region of Algeria in the early twentieth century.\n</description>\n<rules>\n3x3 intersecting lines with diagonals in the square. Three pieces per player. Players alternate turns placing a piece on the board. The player who places three pieces in a row along one of the lines of the board wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Selbia\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        (play (move (from (handSite Mover)) (to (sites Empty))))\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAqrad is an alignment game played by the Tuareg people in the Haggar region of Algeria. The game is usually played in the sand, and stones and camel droppings are used as pieces.\n</description>\n<rules>\n7x6 board. Eighteen pieces per player. Players alternate turns placing a piece on the board. When all of the pieces have been placed, players alternate turns moving a piece to an adjacent empty square in an orthogonal direction. When a player places three of their pieces in an orthogonal line, they capture one of the opponent's pieces. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Aqrad\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 7 6))\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:18))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSplice is an evolution of Spline that can be played with a Series: Shibumi set.\n</description>\n<rules>\nThe board starts empty. Players take turns placing either: a ball of their colour on any hole or any platform that contains at least one red ball, or a red ball on any hole or any platform. A player wins by making a flat line spanning side to side, or corner to corner, on any level, composed entirely of friendly and neutral balls (at least one of each). If the placement of a red ball achieves this for both players, then the mover wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Splice\"\n    (players 2)\n    (equipment\n        {\n            (board (square 4 pyramidal:True) use:Vertex)\n            (piece \"Ball\" Each)\n            (piece \"Ball\" Neutral)\n            (hand Each)\n            (hand Shared)\n        }\n    )\n    (rules\n        (start { (place \"Ball\" \"Hand\" count:16) (place \"Ball0\" 32 count:16) })\n        (play\n            (or\n                (move\n                    (from (handSite Mover))\n                    (to\n                        (sites Empty)\n                        if:(and\n                            (is Flat)\n                            (is\n                                Within\n                                (id \"Ball\" Neutral)\n                                in:(sites Layer (layer of:(to)))\n                            )\n                        )\n                    )\n                )\n                (move\n                    (from (handSite Shared))\n                    (to (sites Empty) if:(is Flat))\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (is\n                        Line\n                        (- (count Rows) (layer of:(last To)))\n                        SameLayer\n                        whats:{ (id \"Ball\" Mover) (id \"Ball\" Neutral) }\n                        throughHowMuch:2\n                    )\n                    (result Mover Win)\n                )\n                (if\n                    (is\n                        Line\n                        (- (count Rows) (layer of:(last To)))\n                        SameLayer\n                        whats:{ (id \"Ball\" Next) (id \"Ball\" Neutral) }\n                        throughHowMuch:2\n                    )\n                    (result Next Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFart is an alignment game played by young people in El Oued, Algeria. This version requires the player to place seven of their pieces in a row.\n</description>\n<rules>\n7x7 board. 24 pieces per player. Players alternate turns placing two pieces on the board. When all of the pieces are placed, players alternate turns moving one piece orthogonally any distance. The first player to place seven of their pieces in an orthogonal or diagonal line wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Fart (7x7)\"\n    (players 2)\n    (equipment\n        {\n            (board (square 7))\n            (piece \"Marker\" Each (move Slide Orthogonal))\n            (hand Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:24))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to\n                            (difference (sites Board) (centrePoint))\n                            if:(is Empty (to))\n                        )\n                        (then (if (not (is Prev Mover)) (moveAgain)))\n                    )\n                )\n                (nextPhase Mover (is Empty (handSite Mover)) \"Move\")\n            )\n            (phase \"Move\" (play (forEach Piece)))\n        }\n        (end (if (is Line 7) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMulabalaba is an alignment game played in the Livingtone district of Zambia.\n</description>\n<rules>\nThree concentric squares, with lines connecting the corners and the midpoints of the sides. Twelve pieces per player. Players alternate turns placing a piece on the board. When a player makes a line of three of their pieces, they may remove one of the opponent's pieces. When all of the pieces have been placed, players alternate turns moving a piece to an empty adjacent spot along the lines of the board. A piece in the four outside corner spaces is allowed to move to any empty spot on the board. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Mulabalaba\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (if\n                    (is In (from) (sites Corners))\n                    (move (from (from)) (to (sites Empty)))\n                    (move Step (to if:(is Empty (to))))\n                    (then (if (is Line 3) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then (if (is Line 3) (moveAgain)))\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (forEach NonMover if:(no Pieces Player) (result Player Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTic-Tac-Die is played as per Tic-Tac-Toe except that players roll a D9 dice each turn to dictate where they move (dice pips show cell index to move to).\n</description>\n<rules>\nPlay occurs on a 3x3 grid. One player places an X, the other places an O and players take turns placing their marks in the grid, attempting to get three in a row. The die is showing the cell index to place a piece.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tic-Tac-Die\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3))\n            (piece \"Disc\" P1)\n            (piece \"Cross\" P2)\n            (dice d:9 from:0 num:1)\n        }\n    )\n    (rules\n        (play\n            (do\n                (roll)\n                next:(if\n                    (is Empty (count Pips))\n                    (move\n                        Add\n                        (piece\n                            (if (is Mover P1) (id \"Disc\" P1) (id \"Cross\" P2))\n                        )\n                        (to (count Pips))\n                    )\n                    (move Pass (then (moveAgain)))\n                )\n            )\n        )\n        (end\n            {\n                (if (is Line 3) (result Mover Win))\n                (if (is Full) (result Mover Draw))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSan-Noku-Narabe is a simple game of alignment played in Japan, typically in small villages and by children as well as adults. It is notably one of the only documented games played by the Ainu people.\n</description>\n<rules>\n3x3 intersecting lines. Three pieces per player. Players alternate turns placing a piece on an empty spot on the board. Once all of the pieces are placed, players move a piece to any empty spot on the board. The first player to make an orthogonal row of three along the lines of the board wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"San-Noku-Narabe\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move (from) (to (sites Empty))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3 Orthogonal) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nShisima is played by the Tiriki people in Kenya on an octagonal board. The board represents a source of water (\\\"shisima\\\") in the center, and the pieces are imbalavali, \\\"water insects.\\\" It is a game of alignment.\n</description>\n<rules>\nEach player has three pieces. Pieces are initially placed three-in a row on side nearest the player. Pieces can move to an adjacent space connected to it by a line. The goal is to create three in a row through the central space.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Shisima\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric {1 8}) use:Vertex)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start { (place \"Marker1\" { 1 8 7}) (place \"Marker2\" { 3 4 5 }) })\n        (play (forEach Piece))\n        (end\n            (if\n                (and (= (what at:(centrePoint)) (mover)) (is Line 3))\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nEpelle is a simple game of alignment played by the Urhobo people of Nigeria.\n</description>\n<rules>\n3x3 intersecting lines with diagonals. Play occurs on the intersections of the lines. Players each have three pieces, initially placed on the sides closest to the player. Players move the pieces to an adjacent unoccupied intersection along the lines. The goal is to make three in a row which cannot be in the starting position.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Epelle\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 diagonals:Alternating) use:Vertex)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n        }\n    )\n    (rules\n        (start { (place \"Marker1\" (sites P1)) (place \"Marker2\" (sites P2)) })\n        (play (forEach Piece))\n        (end\n            (if\n                (and\n                    (not\n                        (all\n                            Sites\n                            (sites Occupied by:Mover)\n                            if:(is In (site) (sites Mover))\n                        )\n                    )\n                    (is Line 3)\n                )\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFanorona Telo is a simple game of alignment played by children of the Merina people of Madagascar.\n</description>\n<rules>\n3x3 intersecting lines with diagonals. Play occurs on the intersections of the lines. Each player has three pieces. Play begins with each player placing pieces on empty points. If they make three in a row along the lines, they win. Once all pieces are placed, players take turns moving pieces one spot to an adjacent point along the lines trying to make three in a row.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Fanorona Telo\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNao Guti is a game of alignment played in South Asia, with nine pieces on a board that is widely used throughout the world.\n</description>\n<rules>\nThree concentric squares, with lines connecting the midpoints. Nine pieces per player. Players alternate turns placing a piece on the board on an empty spot. When all the pieces have been placed, the players alternate turns moving a piece to an empty adjacent spot along the lines of the board. During either phase, if a player places three of their pieces in a row along the lines on the board, the player removes one of the opponent's pieces. The player who removes all the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Nao Guti\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSplade is an evolution of Spline for 3 players that can be played with a Series: Shibumi set.\n</description>\n<rules>\nThe board starts empty. Starting with white (then black and red), players take turns placing a marble of their colour on an empty space or platform (2\u00d72 arrangement of marbles). Whenever a full line with exactly 2 colors is formed, the game ends. The winner is the player with a color in that line whose position in the player order is immediately after the other player with a color in that line.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Splade\"\n    (players 3)\n    (equipment\n        {\n            (board (square 4 pyramidal:True) use:Vertex)\n            (piece \"Ball\" Each)\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty) if:(is Flat))))\n        (end\n            {\n                (if\n                    (is\n                        Line\n                        (- (count Rows) (layer of:(last To)))\n                        SameLayer\n                        whats:{ (id \"Ball\" Mover) (id \"Ball\" Next) }\n                        throughHowMuch:2\n                    )\n                    (result Next Win)\n                )\n                (if\n                    (is\n                        Line\n                        (- (count Rows) (layer of:(last To)))\n                        SameLayer\n                        whats:{ (id \"Ball\" Mover) (id \"Ball\" Prev) }\n                        throughHowMuch:2\n                    )\n                    (result Mover Win)\n                )\n                (forEach\n                    NonMover\n                    if:(= (count Active) 2)\n                    (result Player Loss)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nZurgaan Tal is a game of alignment from Mongolia played on a hexagonal board.\n</description>\n<rules>\nThree concentric hexagons, with lines connecting the corners and midpoints of the sides. Seventeen pieces per player. Players alternate turns placing one of their pieces on an empty spot on the board. When all of the pieces are placed, they alternate turns moving one of their pieces to an empty adjacent spot along the lines of the board. During either phase, when a player places three of their pieces in a row, they may remove one of the opponent's pieces from the board. Pieces which are in a three-in-a-row arrangement cannot be removed from the board. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Zurgaan Tal\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (rotate 30 (concentric Hexagon rings:3 joinCorners:True))\n                use:Vertex\n            )\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:17))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then (if (is Line 3) (moveAgain)))\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSpline was invented in 2011 by N\u00e9stor Romeral Andr\u00e9s. It is a game of alignment in which marbles are stacked on top of one another.\n</description>\n<rules>\nStarting with white, each player places a marble on an empty space or platform (2x2 arrangement of marbles). The first player making a full line of his color on any layer wins. Lines may be diagonal. This is, for a 4x4 set, a 4-in-a-row on the first layer, or a 3-in-a-row on the 2nd layer, or a 2-in-a-row on the 3rd layer.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Spline\"\n    (players 2)\n    (equipment\n        {\n            (board (square 4 pyramidal:True) use:Vertex)\n            (piece \"Ball\" Each)\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty) if:(is Flat))))\n        (end\n            (if\n                (is Line (- (count Rows) (layer of:(last To))) SameLayer)\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNerenchi Keliya is an alignment game played in Sri Lanka. Graffiti on earlier monuments may suggest the game has a certain degree of antiquity on the island.\n</description>\n<rules>\nThree concentric squares with lines connecting the midpoints of the squares. Nine pieces per player. Players alternate turns placing one of their pieces on an empty space. If a player places three of their pieces along one of the straight lines, they take another turn. Once all of the pieces are on the board, players take turns moving a piece to an empty space on the board. When a player creates a line of three in this phase, the player removes one of the opponent's pieces, and receives another turn. The player who reduces the opponent to two pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Nerenchi Keliya\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to (sites Empty))\n                        (then\n                            (if\n                                (and\n                                    (is Line 3)\n                                    (not\n                                        (all\n                                            Sites\n                                            (sites Hand Mover)\n                                            if:(= 0 (count Cell at:(site)))\n                                        )\n                                    )\n                                )\n                                (moveAgain)\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    (and\n                        (all\n                            Sites\n                            (sites Hand P1)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                        (all\n                            Sites\n                            (sites Hand P2)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play (forEach Piece))\n                (nextPhase Mover (is Line 3) \"Capture\")\n            )\n            (phase\n                \"Capture\"\n                (play\n                    (move\n                        Remove\n                        (sites Occupied by:Enemy container:\"Board\")\n                        (then (moveAgain))\n                    )\n                )\n                (nextPhase Mover \"Movement\")\n            )\n        }\n        (end\n            (forEach\n                Player\n                if:(<= (count Pieces Player) 2)\n                (result Player Loss)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMarelle Triple is a game of alignment played in France. Described in the nineteenth century, it is played on a board common worldwide, with slight variations in the rules.\n</description>\n<rules>\nThree concentric squares, the corners and midpoints of the squares connected with lines. Nine pieces per player. Players alternate turns placing a piece on an empty spot on the board. When all of the pieces are placed, the players alternate turns moving a piece to an empty adjacent spot along the lines. During either phase, when a player places three of their pieces in a row along the orthogonal lines (not along the diagonal lines), the player removes any one of the opponent's pieces. When a player is reduced to four pieces, they may move a piece to any open spot on the board. The player who reduces the opponent to two pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Marelle Triple\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then\n                        (if\n                            (or\n                                {\n                                    (is Line 3 N exact:True)\n                                    (is Line 3 S exact:True)\n                                    (is Line 3 E exact:True)\n                                    (is Line 3 W exact:True)\n                                }\n                            )\n                            (moveAgain)\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (or\n                                        {\n                                            (is Line 3 N exact:True)\n                                            (is Line 3 S exact:True)\n                                            (is Line 3 E exact:True)\n                                            (is Line 3 W exact:True)\n                                        }\n                                    )\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (if\n                            (> (count Pieces Mover) 4)\n                            (forEach Piece)\n                            (move\n                                (from (sites Occupied by:Mover))\n                                (to (sites Empty))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nYavalax is inspired by both Yavalath and Connect6.\n</description>\n<rules>\nGoal: Simultaneously create two or more rows of exactly four stones of your color. Play: White starts by placing a white stone at an empty cell. Players then take turns placing two stones of their color at empty cells, one stone after another. In each placement, players are not allowed to create a single 4-in-a-row of their color, unless that placement simultaneously creates at least one other 4-in-a-row of their color to win the game. This means that players may NOT make a single 4-in-a-row of their color on the first placement of their turn even if they can make a second 4-in-a-row on their second placement. In no event are players allowed to create 5 (or more) -in-a-row of their color. The first player to make simultaneous 4-in-a-rows of their color wins immediately, whether it was their first or second placement.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Yavalax\"\n    (players 2)\n    (equipment\n        {\n            (board (square 13))\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        phases:{\n            (phase\n                \"Opening\"\n                (play (move Add (to (sites Empty))))\n                (nextPhase \"General\")\n            )\n            (phase\n                \"General\"\n                (play\n                    (do\n                        (move\n                            Add\n                            (to (sites Empty))\n                            (then (if (not (is Prev Mover)) (moveAgain)))\n                        )\n                        ifAfterwards:(and\n                            (not (is Line 5))\n                            (!=\n                                1\n                                (+\n                                    {\n                                        (if (is Line 4 N exact:True) 1 0)\n                                        (if (is Line 4 NE exact:True) 1 0)\n                                        (if (is Line 4 E exact:True) 1 0)\n                                        (if (is Line 4 SE exact:True) 1 0)\n                                    }\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end\n            (if\n                (<=\n                    2\n                    (+\n                        {\n                            (if (is Line 4 N exact:True) 1 0)\n                            (if (is Line 4 NE exact:True) 1 0)\n                            (if (is Line 4 E exact:True) 1 0)\n                            (if (is Line 4 SE exact:True) 1 0)\n                        }\n                    )\n                )\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBolotudu is a game of alignment that was played by the Bambara people of West Africa. It is a game in which the goal is to get two pieces in a row, but this is forbidden during the placement phase of the game.\n</description>\n<rules>\n6x6 grid. Twelve pieces per player. In the first phase, players alternate turns placing their pieces on an empty space on the board. They are forbidden from placing two of their own pieces orthogonally adjacent to one another. Once all of the pieces are placed, players alternate turns moving the pieces in an orthogonal direction to an empty adjacent spot. When they place a piece so that two are in a row, they capture one of the opponent's pieces. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Bolotudu\"\n    (players 2)\n    (equipment\n        {\n            (board (square 6))\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 2 Orthogonal) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to\n                            (difference\n                                (sites Empty)\n                                (sites\n                                    Around\n                                    (sites Occupied by:Mover)\n                                    Orthogonal\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move Remove (sites Occupied by:Next))\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis is a variant of Gomoku with losing conditions.\n</description>\n<rules>\nThe game is played on a 11x11 board. Players take turns placing stones in an attempt to make 5 in a row. But if a line of 4 or a line of more than 5 is made, the player loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ketatu\"\n    (players 2)\n    (equipment\n        {\n            (board (square 11))\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end\n            {\n                (if (is Line 5 All Mover exact:True) (result Mover Win))\n                (if (is Line 6 All Mover) (result Mover Loss))\n                (if (is Line 4 All Mover) (result Mover Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nUnfair is an asymmetric N-in-a-row game invented by Stephen Tavener in 2015. The two players have different goals and place different numbers of pieces per turn.\n</description>\n<rules>\nPlayed on a square grid 11x11 or larger. White goes first and places two pieces every turn, Black places four pieces per turn. White wins if they make an orthogonal line of four pieces; Black wins if they make an orthogonal line of 7 pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Unfair\"\n    (players 2)\n    (equipment\n        {\n            (board (square 11) use:Vertex)\n            (piece \"Ball\" Each)\n        }\n    )\n    (rules\n        (play\n            (or\n                (move\n                    Add\n                    (to (sites Empty) if:(= (id P1) (mover)))\n                    (then (if (= 0 (count MovesThisTurn)) (moveAgain)))\n                )\n                (move\n                    Add\n                    (to (sites Empty) if:(= (id P2) (mover)))\n                    (then (if (< (count MovesThisTurn) 3) (moveAgain)))\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (and (= (id P1) (mover)) (is Line 4 Orthogonal))\n                    (result Mover Win)\n                )\n                (if\n                    (and (= (id P2) (mover)) (is Line 7 Orthogonal))\n                    (result Mover Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPentalath was invented by Cameron Browne in 2009. It is a connection game with the goal of creating a group of five in a row, but with complications.\n</description>\n<rules>\nThe board starts empty. White plays first. Players take turns placing a piece of their colour on an empty cell. Passing is not allowed. After each move, the opponent's pieces with no freedom are captured and removed from the board. A piece has freedom if the group it belongs to touches an empty cell. It is not allowed to place a piece in a space without freedom, unless that move captures the other player's pieces to create freedom. The game ends when one of the players wins a game by making a line of five (or more) stones of their colour.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Pentalath\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (intersect { (hex 7) (shift -5.20 0 (hex Rectangle 7 14)) })\n            )\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play\n            (do\n                (move\n                    Add\n                    (to (sites Empty))\n                    (then\n                        (enclose\n                            (from (last To))\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                        )\n                    )\n                )\n                ifAfterwards:(> (count Liberties Orthogonal) 0)\n            )\n        )\n        (end (if (is Line 5) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSpava is a game for the Shibumi set, made as an entry for Shibumi Challenge.\n</description>\n<rules>\nTwo players, White and Black, take turns adding either a ball of their colour or a neutral red ball. A player wins by completing a line of length L of their colour on any LxL level. A player loses by completing a line of length L-1 on any LxL level. Lines can be orthogonal or diagonal but must contain at least two balls.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Spava\"\n    (players 2)\n    (equipment\n        {\n            (board (square 4 pyramidal:True) use:Vertex)\n            (piece \"Ball\" Each)\n            (piece \"Ball\" Neutral)\n            (hand Each)\n            (hand Shared)\n        }\n    )\n    (rules\n        (start { (place \"Ball\" \"Hand\" count:16) (place \"Ball0\" 32 count:16) })\n        (play\n            (or\n                (move (from (handSite Mover)) (to (sites Empty) if:(is Flat)))\n                (move\n                    (from (handSite Shared))\n                    (to (sites Empty) if:(is Flat))\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (and\n                        (is\n                            Line\n                            (- (count Rows) (layer of:(last To)))\n                            SameLayer\n                            what:(id \"Ball\" Mover)\n                        )\n                        (<= 2 (- (count Rows) (layer of:(last To))))\n                    )\n                    (result Mover Win)\n                )\n                (if\n                    (and\n                        (is\n                            Line\n                            (- (- (count Rows) (layer of:(last To))) 1)\n                            SameLayer\n                            what:(id \"Ball\" Mover)\n                        )\n                        (<= 2 (- (- (count Rows) (layer of:(last To))) 1))\n                    )\n                    (result Next Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nYavalade was invented in 2012 by N\u00e9stor Romeral Andr\u00e9s. It is a derivative of Yavalath.\n</description>\n<rules>\nWhite player takes a red piece and places a white piece on top of it, placing the stack before them. Black player takes a white piece and places a black piece on top of it, placing the stack before them. Red player takes a black piece and places a red piece on top of it, placing the stack before them. Starting with White, players take turns placing a piece of their colour on an empty space of the board until the victory condition is reached. The aim of the game is to create a 5-in-a-row containing both and only both colours of your stack.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Yavalade\"\n    (players 3)\n    (equipment\n        {\n            (board (rotate 90 (hex 5)))\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end\n            {\n                (if (is Line 5 whats:{1 3}) (result P1 Win))\n                (if (is Line 5 whats:{1 2}) (result P2 Win))\n                (if (is Line 5 whats:{2 3}) (result P3 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nOrder and Chaos is an asymmetric variant of the game tic-tac-toe on a 6\u00d76 gameboard.\n</description>\n<rules>\nThe game starts with the board empty. Order plays first, then turns alternate. On each turn, a player places either an X or an O on any open square. Order aims to get five like pieces in a row either vertically, horizontally, or diagonally. Chaos aims to fill the board without completion of a line of five like pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Order and Chaos\"\n    (players 2)\n    (equipment\n        {\n            (board (square 6))\n            (piece \"Disc\" Shared)\n            (piece \"Cross\" Shared)\n            (hand Shared size:2)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Disc\" (handSite Shared))\n                (place \"Cross\" (handSite Shared 1))\n            }\n        )\n        (play (move (from (sites Hand Shared)) (to (sites Empty)) copy:True))\n        (end\n            {\n                (if (is Line 5) (result P1 Win))\n                (if (no Moves Next) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nXonin Shatar (Sheep Chess) is a game of alignment played in Mongolia.\n</description>\n<rules>\nThree concentric squares, with lines connecting the corners and the midpoints of the sides. Twelve pieces per player. Players alternate turns placing a piece on an empty spot on the board. When all of the pieces have been placed, players alternate turns moving a piece to an empty adjacent spot along the lines. During either phase, when a player places three of their pieces in a row, they remove one of the opponent's pieces. Pieces which are in a three-in-a-row pattern cannot be removed from the board. The player who removes all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Xonin Shatar (Simple)\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then (if (is Line 3) (moveAgain)))\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNgr\u00e9 \u00c9 \u00c9 is an alignment game played in the Republic of Congo by children.\n</description>\n<rules>\n3x3 intersecting lines with diagonals. Three pieces per player. Players alternate turns placing a piece on an empty spot on the board. When a player succeeds in making a line of three with their pieces, they win.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ngre E E\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        (play (move (from (handSite Mover)) (to (sites Empty))))\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\n3D version of Tic-Tac-Toe on a 5 spaces board.\n</description>\n<rules>\nWhite starts and, in turn, pieces are placed on any one of 5 spaces, including on other pieces. The object is to get 3 same color pieces in a row - horizontally, vertically or diagonally.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Agilidade\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (skew\n                    .5\n                    (scale\n                        1\n                        .5\n                        (merge\n                            {\n                                (wedge 2 2)\n                                (shift 0 1 (rotate 180 (wedge 2 2)))\n                            }\n                        )\n                    )\n                )\n                use:Vertex\n            )\n            (piece \"discFlat\" Each)\n            (hand Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place Stack \"discFlat1\" (handSite P1) count:7)\n                (place Stack \"discFlat2\" (handSite P2) count:7)\n            }\n        )\n        (play (move (from (handSite Mover)) (to (sites Board))))\n        (end (if (is Line 3 byLevel:True) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTrianon is a game played on a 5x5 board.\n</description>\n<rules>\nTURN - On each turn, each player drops a stone on an empty cell GOAL - A player loses if he has 3 friendly stones on an orthogonal or diagonal line (they don't need to be adjacent to each other).\n</rules>\n</query>\n</task>",
        "solution": "(game \"Trianon\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5) use:Vertex)\n            (piece \"Ball\" Each)\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end\n            (if\n                (or\n                    {\n                        (=\n                            3\n                            (count\n                                Sites\n                                in:(forEach\n                                    (sites Row (row of:(last To)))\n                                    if:(is Friend (who at:(site)))\n                                )\n                            )\n                        )\n                        (=\n                            3\n                            (count\n                                Sites\n                                in:(forEach\n                                    (sites Column (column of:(last To)))\n                                    if:(is Friend (who at:(site)))\n                                )\n                            )\n                        )\n                        (=\n                            3\n                            (count\n                                Sites\n                                in:(forEach\n                                    (union\n                                        (sites\n                                            Direction\n                                            from:(last To)\n                                            NE\n                                            included:True\n                                        )\n                                        (sites Direction from:(last To) SW)\n                                    )\n                                    if:(is Friend (who at:(site)))\n                                )\n                            )\n                        )\n                        (=\n                            3\n                            (count\n                                Sites\n                                in:(forEach\n                                    (union\n                                        (sites\n                                            Direction\n                                            from:(last To)\n                                            NW\n                                            included:True\n                                        )\n                                        (sites Direction from:(last To) SE)\n                                    )\n                                    if:(is Friend (who at:(site)))\n                                )\n                            )\n                        )\n                    }\n                )\n                (result Mover Loss)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDesigned in the early 2000s by Elliot Rudell and published by The Happy Puzzle Company and ThinkFun.\n</description>\n<rules>\nEach player has 6 Chess queens. It is played on a 5x5 board. The starting position has the queens arranged on opposite sides, alternating white-black-white-black in each space. The pieces move as queens in Chess. The first player to line up four queens in a row wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"All Queens Chess\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5))\n            (piece \"Queen\" Each (move Slide))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Queen1\"\n                    (union\n                        {\n                            (difference (sites Bottom) (sites Phase 1))\n                            (intersection\n                                (sites Left)\n                                (sites Row (/ (count Rows) 2))\n                            )\n                            (difference (sites Top) (sites Phase 0))\n                        }\n                    )\n                )\n                (place\n                    \"Queen2\"\n                    (union\n                        {\n                            (difference (sites Bottom) (sites Phase 0))\n                            (intersection\n                                (sites Right)\n                                (sites Row (/ (count Rows) 2))\n                            )\n                            (difference (sites Top) (sites Phase 1))\n                        }\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (is Line 4) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAlquerque de Tres is a simple alignment game described in the Libro de los Juegos of Alfonso X. The board on which it is played is found at Roman sites, and so it is possible that the game is much older. It is depicted as played by children.\n</description>\n<rules>\n3x3 intersecting lines, with diagonal lines of the board. Three pieces per player. players alternate turns placing a piece on one of the empty spots. The player who places their pieces in a line wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Alquerque de Tres\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        (play (move (from (handSite Mover)) (to (sites Empty))))\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAt first glance, this early Knizia title may seem like an easier version of Connect Four played on a 4x7 grid. However, in Complica, when a piece is placed, it does not remain there for the entire game.\n</description>\n<rules>\nThe game is played on a 7x4 board. On each turn, players must drop a stone of their color into the lowest possible empty cell of a column. If the column is full, the player's stone is placed on top and the bottom stone is removed. A player wins by creating a line of four stones of their own color, either diagonally or orthogonally. If both players have a 4-in-a-row, the game continues.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Complica\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 1 4))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (to (sites Board))\n                stack:True\n                (then\n                    (if\n                        (= (size Stack at:(last To)) 8)\n                        (move Remove (last To) level:0)\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (and\n                        (is Line 4 P1 byLevel:True)\n                        (not (is Line 4 P2 byLevel:True))\n                    )\n                    (result P1 Win)\n                )\n                (if\n                    (and\n                        (is Line 4 P2 byLevel:True)\n                        (not (is Line 4 P1 byLevel:True))\n                    )\n                    (result P2 Win)\n                )\n                (if (= 80 (count Moves)) (result All Draw))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSquava is a Yavalath variant on a 5x5 board.\n</description>\n<rules>\nPlayers alternate turns placing one of their pieces on the board. The first person to make a line of four, but without first making a line of three, wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Squava\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5))\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (meta (swap))\n        (play (move Add (to (sites Empty))))\n        (end\n            {\n                (if (is Line 4) (result Mover Win))\n                (if (is Line 3) (result Mover Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPente was invented by Gary Gabriel in 1983, and was inspired by Ninuki-Renju. In Pente, players compete to be the first to form an orthogonal or diagonal line of five stones, or to capture ten opposing stones. Pente does not have the complex opening protocol or specific positional restrictions of Ninuki-Renju. The first player has a strong advantage, but the Pro Pente opening variation gives Black more even winning chances.\n</description>\n<rules>\nPente is played on a 19x19 Go board. White goes first, and plays their first move on the centre point (unless playing Freestyle). In the Pro Pente variation, White's second move must be at least 3 points away from the centre. After the opening, players alternate playing one stone of their colour onto any empty point. If their placement results in a pair of enemy stones being sandwiched between two of their own stones, those enemy stones are captured. The first player to form an orthogonal or diagonal line of five (or more) of their stones, or to capture 10 enemy stones, wins the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Pente\"\n    (players 2)\n    (equipment\n        {\n            (board (square 19) use:Vertex)\n            (piece \"Ball\" Each)\n        }\n    )\n    (rules\n        (start (set Score Each 0))\n        phases:{\n            (phase\n                \"Opening\"\n                (play (move Add (to (sites \"J10\"))))\n                (nextPhase \"General\")\n            )\n            (phase\n                \"General\"\n                (play\n                    (move\n                        Add\n                        (to (sites Empty))\n                        (then\n                            (custodial\n                                (from (last To))\n                                All\n                                (between\n                                    if:(is Next (who at:(between)))\n                                    (apply (remove (between)))\n                                )\n                                (to\n                                    if:(and\n                                        (=\n                                            3\n                                            (count\n                                                Steps\n                                                Vertex\n                                                All\n                                                (last To)\n                                                (to)\n                                            )\n                                        )\n                                        (is Mover (who at:(to)))\n                                    )\n                                )\n                                (then (addScore Mover 1))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end\n            {\n                (if (is Line 5 All) (result Mover Win))\n                (if (> (score Mover) 9) (result Mover Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n\n</query>\n</task>",
        "solution": "(game \"Yavalanchor\"\n    (players 2)\n    (equipment\n        {\n            (board (rotate 90 (hex 5)))\n            (piece \"Marker\" Each)\n            (piece \"Marker\" Shared)\n            (hand Shared)\n        }\n    )\n    (rules\n        (meta (swap))\n        (start (place \"Marker\" (handSite Shared)))\n        (play\n            (or\n                (move\n                    Add\n                    (to\n                        (sites\n                            Around\n                            (sites Occupied by:Shared component:\"Marker\")\n                            if:(is Empty (to))\n                        )\n                    )\n                )\n                (move (from (handSite Shared)) (to (sites Empty)) copy:True)\n            )\n        )\n        (end\n            (forEach\n                Player\n                if:(and\n                    (or\n                        (= (what at:(last To)) (id \"Marker\" Player))\n                        (= (what at:(last To)) (id \"Marker\"))\n                    )\n                    (is Line 5 whats:{ (id \"Marker\" Player) (id \"Marker\") })\n                )\n                (result Player Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nWinkers is a challenging and strategic game that requires players to carefully place their colored stones on top of neutral stones on a hexagonal board, with the ultimate goal of achieving a line of three stones of their color to win.\n</description>\n<rules>\nWinkers is a two-player game played on a hexagonal board with hexagonal tiles. Each player begins with 10 stones of their chosen color and an additional 10 neutral stones. On each turn, a player must either place a neutral stone on an empty hexagonal tile, place a stone of their color on top of any empty neutral stone, or pass their turn if they are unable to make a valid move. The objective of the game is to be the first player to achieve a row of three stones of their color, either horizontally, vertically, or diagonally on adjacent hexagonal tiles. If the first player uses all of their stones without achieving a row of three, they automatically lose the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Winkers\"\n    (players 2)\n    (equipment\n        {\n            (board (hex Hexagon 3))\n            (hand Each size:2)\n            (piece \"Marker\" Each)\n            (piece \"MarkerNeutral\" Shared)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker\" \"Hand\" count:10)\n                (place \"MarkerNeutral\" (handSite 1 1) count:10)\n                (place \"MarkerNeutral\" (handSite 2 1) count:10)\n            }\n        )\n        (play\n            (or\n                (move (from (handSite Mover 1)) (to (sites Empty)))\n                (move\n                    (from (handSite Mover 0))\n                    (to\n                        (difference\n                            (difference\n                                (sites Occupied by:Shared)\n                                (handSite 2 1)\n                            )\n                            (handSite 1 1)\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if (is Line 3 Mover) (result Mover Win))\n                (if\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    (result Mover Loss)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDai Hasami Shogi is a Hasami Shogi variant played with Go pieces.\n</description>\n<rules>\nPlayed on a 9x9 board with nine Go pieces per player occupying their two nearest ranks. Pieces move as a rook in Shogi. Pieces may also move by hopping over an adjacent piece of any color. This does not capture the piece, and multiple hops are not allowed in on turn. The goal is to create an orthogonal line of five of a player's pieces outside the player's starting rows.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Dai Hasami Shogi\"\n    (players 2)\n    (equipment\n        {\n            (board (square 9))\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Slide Orthogonal)\n                    (move\n                        Hop\n                        Orthogonal\n                        (between if:(is Occupied (between)))\n                        (to if:(is Empty (to)))\n                    )\n                    (then\n                        (or\n                            (custodial\n                                (from (last To))\n                                Orthogonal\n                                (between\n                                    (max 1)\n                                    if:(is Enemy (who at:(between)))\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Friend (who at:(to))))\n                            )\n                            (surround\n                                (from (last To))\n                                Orthogonal\n                                (between\n                                    if:(and\n                                        (is In (between) (sites Corners))\n                                        (is Enemy (who at:(between)))\n                                    )\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Friend (who at:(to))))\n                            )\n                        )\n                    )\n                )\n            )\n            (regions P1 (expand (sites Bottom)))\n            (regions P2 (expand (sites Top)))\n        }\n    )\n    (rules\n        (start { (place \"Marker1\" (sites P1)) (place \"Marker2\" (sites P2)) })\n        (play (forEach Piece))\n        (end\n            {\n                (if\n                    (is Line 5 Orthogonal if:(not (is In (to) (sites Mover))))\n                    (result Mover Win)\n                )\n                (if\n                    (and (< (count Pieces P1) 5) (< (count Pieces P2) 5))\n                    (result Mover Draw)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game is played on an empty 4x4 square board. Each player has 8 stones off board.\n</description>\n<rules>\n\n</rules>\n</query>\n</task>",
        "solution": "(game \"Moxie\"\n    (players 2)\n    (equipment\n        {\n            (board (square 4))\n            (piece \"Pawn\" Each)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (place \"Pawn\" \"Hand\" count:8))\n        (play\n            (if\n                (is Prev Mover)\n                (move\n                    Hop\n                    (from (last To))\n                    (between\n                        if:(is Enemy (who at:(between)))\n                        (apply (remove (between)))\n                    )\n                    (to if:(is Empty (to)))\n                    (then\n                        (if\n                            (can\n                                Move\n                                (move\n                                    Hop\n                                    (from (last To))\n                                    (between\n                                        if:(is Enemy (who at:(between)))\n                                        (apply (remove (between)))\n                                    )\n                                    (to if:(is Empty (to)))\n                                )\n                            )\n                            (moveAgain)\n                        )\n                    )\n                )\n                (priority\n                    {\n                        (forEach\n                            Piece\n                            (move\n                                Hop\n                                (between\n                                    if:(is Enemy (who at:(between)))\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Empty (to)))\n                                (then\n                                    (if\n                                        (can\n                                            Move\n                                            (move\n                                                Hop\n                                                (from (last To))\n                                                (between\n                                                    if:(is\n                                                        Enemy\n                                                        (who at:(between))\n                                                    )\n                                                    (apply (remove (between)))\n                                                )\n                                                (to if:(is Empty (to)))\n                                            )\n                                        )\n                                        (moveAgain)\n                                    )\n                                )\n                            )\n                        )\n                        (or\n                            (if\n                                (is Occupied (handSite Mover))\n                                (move\n                                    (from (handSite Mover))\n                                    (to (sites Empty))\n                                )\n                            )\n                            (forEach\n                                Piece\n                                (move Step (to if:(is Empty (to))))\n                            )\n                        )\n                    }\n                )\n            )\n        )\n        (end\n            {\n                (forEach\n                    NonMover\n                    if:(<= (count Pieces Player) 2)\n                    (result Player Loss)\n                )\n                (if (is Line 3 All) (result Mover Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nConnect6 is a game invented by I-Chen Wu in Taiwan in 2003 and played on a Go board. The goal of the game is to make a line of six pieces.\n</description>\n<rules>\nPlayed on a Go-like board (6x6 or larger, but a 19x19 go board is ideal) with two colors of stones (usually white and black). Black goes first by placing one stone. Play continues with each player playing two stones per turn. The first player to make a line of six in a row wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Connect6\"\n    (players 2)\n    (equipment\n        {\n            (board (square 19) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        phases:{\n            (phase\n                \"Opening\"\n                (play (move Add (to (sites Empty))))\n                (nextPhase \"Playing\")\n            )\n            (phase\n                \"Playing\"\n                (play\n                    (move\n                        Add\n                        (to (sites Empty))\n                        (then (if (is Even (count Moves)) (moveAgain)))\n                    )\n                )\n                (nextPhase \"Playing\")\n            )\n        }\n        (end (if (is Line 6 All) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nVertiges is a vertical alignment game for two focused and strategic players.\n</description>\n<rules>\nTo win, one of the two players must align 5 pieces of their color horizontally, vertically, or diagonally. At the beginning of the game, the pieces are placed on either side of the game board according to a specific pattern. In turn, a player moves a single piece of their color in any direction\u2014horizontally, vertically, or diagonally\u2014and by any number of spaces. Attention! You can only move one piece, in one direction, and it is forbidden to jump over a piece.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Vertiges\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (remove\n                    (square 12)\n                    vertices:{\n                        0 1 2 3 8 9 10 11 12 13 14 21 22 23 24 25 34 35 36 47\n                        96 107 108 109 118 119 120 121 122 129 130 131 132 133\n                        134 135 140 141 142 143\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Marker\" Each (move Slide All))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    {\"A8\" \"A6\" \"L7\" \"L5\" \"F1\" \"G1\" \"E12\" \"H12\" \"I4\" \"D9\"}\n                )\n                (place\n                    \"Marker2\"\n                    {\"A7\" \"A5\" \"L8\" \"L6\" \"E1\" \"H1\" \"F12\" \"G12\" \"I9\" \"D4\"}\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (is Line 5 All) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDriesticken is a simple game of alignment played in the Netherlands in the seventeenth century.\n</description>\n<rules>\n3x3 intersecting lines. Three pieces per player. Players alternate turns placing pieces on an empty spot on the board. When all pieces are placed, players alternate turns moving a piece to any empty spot on the board. The first player to place their pieces in an orthogonal row along the lines wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Driesticken\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move (from) (to (sites Empty))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3 Orthogonal) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFivalath is a game invented by N\u00e9stor Romeral Andr\u00e9s in 2020 that was inspired by Yavalath. Players must make a line of five of their pieces to win, but will lose if they make a line of 4 first.\n</description>\n<rules>\nPlayed on a square grid (8x8 or larger) with two players. Players alternate placing one stone of their colour on the board on any empty point. If a player makes a line of five pieces, either orthogonally or diagonally, they win; but if they make a line of four pieces, they lose.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Fivalath\"\n    (players 2)\n    (equipment\n        {\n            (board (square 10) use:Vertex)\n            (piece \"Ball\" Each)\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end\n            {\n                (if (is Line 5 All) (result Mover Win))\n                (if (is Line 4 All) (result Mover Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFettas is an alignment game played in Morocco. It was described by Moroccan immigrants in France, who described games played during their childhood.\n</description>\n<rules>\nThree concentric squares, with lines connecting the midpoints of the sides. Eleven pieces per player. Players alternate turns placing a piece on the board. When a player lines up three of their pieces in a row along one of the lines of the board, the player removes one of the opponent's pieces. When all of the pieces are placed, players move their pieces one spot along the lines of the board. The player who captures all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Fettas\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:11))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCentripetal Force is a paper-and-pencil game for two players inspired by Connect4, but using four different directions from which you can drop the tokens. It was invented by Gabriele Soranzo during a school lesson to play with his classmate simply with paper and pen without being seen by the professor.\n</description>\n<rules>\nAt the beginning of the game, the board is empty except for the central cell which is occupied by a square which belongs to neither player. The first player plays with crosses, the second with circles. Each player, on his turn, must place his marker on the grid onto an empty cell respecting the following rule: the marker is dropped from one of the four sides of the board choosing a row or a column, and, proceeding in a straight line so that it goes inside of the board, it stops in front of the first obstacle (a marker of any of the two players, or the central square). Pretty much the same as what happens in Connect4, except here there are four dropping directions. If the marker reaches the opposite side without encountering any obstacles, the move is illegal. To win the game you need to be the first to form an horizontal, vertical, or diagonal line of at least five of your markers. If there are no available moves, the game ends in a draw.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Centripetal Force\"\n    (players 2)\n    (equipment\n        {\n            (board (square 15))\n            (piece \"Cross\" P1)\n            (piece \"Disc\" P2)\n            (piece \"Square\" Neutral)\n        }\n    )\n    (rules\n        (start (place \"Square0\" coord:\"H8\"))\n        (play\n            (move\n                Add\n                (to\n                    (forEach\n                        (sites Empty)\n                        if:(and\n                            (<\n                                0\n                                (count\n                                    Pieces\n                                    in:(sites Around (site) Orthogonal)\n                                )\n                            )\n                            (or\n                                {\n                                    (and\n                                        (=\n                                            0\n                                            (count\n                                                Pieces\n                                                All\n                                                in:(sites\n                                                    LineOfSight\n                                                    at:(site)\n                                                    N\n                                                )\n                                            )\n                                        )\n                                        (=\n                                            1\n                                            (count\n                                                Pieces\n                                                in:(sites Around (site) S)\n                                            )\n                                        )\n                                    )\n                                    (and\n                                        (=\n                                            0\n                                            (count\n                                                Pieces\n                                                All\n                                                in:(sites\n                                                    LineOfSight\n                                                    at:(site)\n                                                    S\n                                                )\n                                            )\n                                        )\n                                        (=\n                                            1\n                                            (count\n                                                Pieces\n                                                in:(sites Around (site) N)\n                                            )\n                                        )\n                                    )\n                                    (and\n                                        (=\n                                            0\n                                            (count\n                                                Pieces\n                                                All\n                                                in:(sites\n                                                    LineOfSight\n                                                    at:(site)\n                                                    W\n                                                )\n                                            )\n                                        )\n                                        (=\n                                            1\n                                            (count\n                                                Pieces\n                                                in:(sites Around (site) E)\n                                            )\n                                        )\n                                    )\n                                    (and\n                                        (=\n                                            0\n                                            (count\n                                                Pieces\n                                                All\n                                                in:(sites\n                                                    LineOfSight\n                                                    at:(site)\n                                                    E\n                                                )\n                                            )\n                                        )\n                                        (=\n                                            1\n                                            (count\n                                                Pieces\n                                                in:(sites Around (site) W)\n                                            )\n                                        )\n                                    )\n                                }\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if (is Line 5) (result Mover Win))\n                (if (no Moves Next) (result All Draw))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLiu Tsi is a simple game of alignment played in China during the seventeenth century, but which is likely much older.\n</description>\n<rules>\n3x3 intersecting lines, with diagonals. Three pieces per player. Players alternate turns placing a piece on an empty spot on the board. Once all of the pieces are placed, the players alternate turns moving a piece to an empty adjacent spot along the lines. The first player to place three pieces in a line wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Liu Tsi\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNeutreeko is a simple game played on a board with 5\u00d75 squares with only 6 pieces. The name is a portmanteau of Neutron and Teeko, two games on which it is based.\n</description>\n<rules>\nPieces move by sliding orthogonally or diagonally until blocked by the edge of the board or another piece. The object of the game is to arrange your pieces in a line of three either orthogonally or diagonally.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Neutreeko\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5))\n            (piece \"Ball\"\n                Each\n                (move\n                    (from (from))\n                    (to (sites LineOfSight Farthest at:(from)))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Ball1\" (coord \"C4\"))\n                (place \"Ball1\" (coord \"B1\"))\n                (place \"Ball1\" (coord \"D1\"))\n                (place \"Ball2\" (coord \"C2\"))\n                (place \"Ball2\" (coord \"B5\"))\n                (place \"Ball2\" (coord \"D5\"))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKats\u00e9la is an alignment game played by the Chokwe people of Angola.\n</description>\n<rules>\nThree intersecting lines, with diagonals drawn in the square. Two players. Three pieces per player, one playing as red and the other as white. The red player plays first and places their piece in the central spot. Players alternate turns placing one of their pieces on an empty space on the board. When all of the pieces are placed, players alternate turns moving one of their pieces to an empty adjacent spot on the board along the lines. The first player to place three of their pieces in a row wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Katsela\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Opening\"\n                (play (move (from (handSite Mover)) (to (centrePoint))))\n                (nextPhase \"Placing\")\n            )\n            (phase\n                \"Placing\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Moving\"\n                )\n            )\n            (phase \"Moving\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\n3 6 9 is an original scoring game.\n</description>\n<rules>\nThis game is played on an empty 9x9 square board with 81 stones of just one color. Turns - At each turn, each player drop a stone at an empty cell. For every 3 stones in any (non contiguous) line (orthogonal or diagonal) the player gets 1 point; For every 6 stones in any (non contiguous) line (orthogonal or diagonal) the player gets 2 points; For every 9 stones in any (non contiguous) line (orthogonal or diagonal) the player gets 3 points; When the board is full, the game ends. The player with the higher score wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"3 6 9\"\n    (players 2)\n    (equipment\n        {\n            (board (square 9))\n            (piece \"Disc\" Shared)\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (piece \"Disc\")\n                (to (sites Empty))\n                (then\n                    (and\n                        {\n                            (if\n                                (is Line 9 N exact:True contiguous:False)\n                                (addScore Mover (/ 9 3))\n                            )\n                            (if\n                                (is Line 6 N exact:True contiguous:False)\n                                (addScore Mover (/ 6 3))\n                            )\n                            (if\n                                (is Line 3 N exact:True contiguous:False)\n                                (addScore Mover (/ 3 3))\n                            )\n                            (if\n                                (is Line 9 E exact:True contiguous:False)\n                                (addScore Mover (/ 9 3))\n                            )\n                            (if\n                                (is Line 6 E exact:True contiguous:False)\n                                (addScore Mover (/ 6 3))\n                            )\n                            (if\n                                (is Line 3 E exact:True contiguous:False)\n                                (addScore Mover (/ 3 3))\n                            )\n                            (if\n                                (is Line 9 NE exact:True contiguous:False)\n                                (addScore Mover (/ 9 3))\n                            )\n                            (if\n                                (is Line 6 NE exact:True contiguous:False)\n                                (addScore Mover (/ 6 3))\n                            )\n                            (if\n                                (is Line 3 NE exact:True contiguous:False)\n                                (addScore Mover (/ 3 3))\n                            )\n                            (if\n                                (is Line 9 NW exact:True contiguous:False)\n                                (addScore Mover (/ 9 3))\n                            )\n                            (if\n                                (is Line 6 NW exact:True contiguous:False)\n                                (addScore Mover (/ 6 3))\n                            )\n                            (if\n                                (is Line 3 NW exact:True contiguous:False)\n                                (addScore Mover (/ 3 3))\n                            )\n                        }\n                    )\n                )\n            )\n        )\n        (end (if (is Full) (byScore)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nInspired by the traditional Tic-Tac-Toe game beloved of high-school students, Taktik is a simple but highly enjoyable game.\n</description>\n<rules>\nMOVE - Each stone may slide any number of empty cells on any direction (they cannot jump other stones). GOAL - Wins the player that aligns his 4 stones.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Taktik\"\n    (players 2)\n    (equipment\n        {\n            (board (rotate 90 (hex Prism 5 8)))\n            (piece \"Ball\"\n                Each\n                (move\n                    Slide\n                    (directions { FL FR BL BR Rightward Leftward } of:All)\n                )\n            )\n            (piece \"Square\" Neutral)\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Square0\"\n                    {\n                        \"A5\" \"A4\" \"A3\" \"B5\" \"B6\" \"C7\" \"J3\" \"K4\" \"K5\" \"L5\" \"L6\"\n                        \"L7\"\n                    }\n                )\n                (place \"Ball1\" (coord \"A2\"))\n                (place \"Ball1\" (coord \"D8\"))\n                (place \"Ball1\" (coord \"K6\"))\n                (place \"Ball1\" (coord \"J4\"))\n                (place \"Ball2\" (coord \"B4\"))\n                (place \"Ball2\" (coord \"C6\"))\n                (place \"Ball2\" (coord \"L8\"))\n                (place \"Ball2\" (coord \"I2\"))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (is Line 4) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFive Men's Morris is attested in the seventeenth century, but it is possible that it was played earlier than this. It is played on a Six Men's Morris board, but each player has five pieces. Otherwise, the rules are the same as for Six Men's Morris.\n</description>\n<rules>\n\"Same rules as Murray, except players cannot remove an opponent's piece that is in a three in a row formation unless there are no other options.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Five Men's Morris\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:2) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:5))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nOmega was invented by N\u00e9stor Romeral Andr\u00e9s in 2010. It is described as a cross between Hex and Go.\n</description>\n<rules>\nPlayers take turns placing a piece of each color in an empty site. Play ends at the start of the first players turn, if all the players would not be able to complete their turn. Example: for 2 players less than 4 empty sites. Scores are awarded based on the sizes of the groups of each color on the board, which are multiplied. The player with the highest score wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Omega\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (piece (+ 1 (% (count Moves) (count Players))))\n                (to (sites Empty))\n                (then\n                    (if\n                        (!= (count MovesThisTurn) (- (count Players) 1))\n                        (moveAgain)\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (and\n                    {\n                        (not (is Mover P1))\n                        (is Next P1)\n                        (>\n                            (pow (count Players) 2)\n                            (count Sites in:(sites Empty))\n                        )\n                    }\n                )\n                (byScore\n                    {\n                        (score P1 (* (sizes Group P1)))\n                        (score P2 (* (sizes Group P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBounce is a two-player game played on a square board of any even size.\n</description>\n<rules>\nThe board is initially filled with a checkerboard pattern of red and blue checkers, except the corner squares, which are unoccupied. A group here is a monocolored, orthogonally interconnected group of checkers. If, at the conclusion of your turn, all of your checkers are in one group, you win. Starting with Red, players take turns moving one of their checkers to an unoccupied square. The checker you move must be part of a larger group after your move than it was before your move. If you don't have any legal moves available on your turn, you must instead remove any one of your checkers from the board, concluding your turn.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Bounce\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Marker\"\n                Each\n                (do\n                    (move (from) (to (sites Empty)))\n                    ifAfterwards:(<\n                        (size\n                            Group\n                            at:(last From)\n                            Orthogonal\n                            if:(or (= (to) (from)) (= (who at:(to)) Mover))\n                        )\n                        (size\n                            Group\n                            at:(last To)\n                            Orthogonal\n                            if:(= (who at:(to)) Mover)\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (difference (sites Phase 1) (sites Corners)))\n                (place \"Marker2\" (difference (sites Phase 0) (sites Corners)))\n            }\n        )\n        (play\n            (priority\n                { (forEach Piece) (move Remove (sites Occupied by:Mover)) }\n            )\n        )\n        (end\n            (if\n                (= 1 (count Groups Orthogonal if:(= (who at:(to)) Mover)))\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAbrobad is arabic, for \\\"Windswept Clouds\\\" referring to the art of making swirled patterns by adding pigments on the surface of a liquid and blowing on them, e.g. to make fancy \\\"marbleized\\\" book end papers. The game is a race to connect one's pieces into the fewest possible groups, and as large gaps are impossible, it results in an abrobad visual effect. It may be played on any size hexagonal \\\"limping\\\" board grid.\n</description>\n<rules>\nGoal: You try to both reduce the number of your own groups as much as possible, and also to block your opponent's ability to reduce his groups down to fewer than yours. Whoever decides to end the game must fill the empty spaces with opponent's pieces, and only then, wins by having equal or fewer groups. Play: Starting with the board empty, player's take turns placing a piece of their color on an empty position that does not abut any friendly piece. If it is impossible to place a piece, the player, instead, moves a piece to the first empty position in any direction. But whenever a new opportunity for placement is available, the turn must be used for placement. Ending the Game: The game ends at the choice of the player about to move, but only at the beginning of a turn in which there is no forced placement. Before scoring, the empty spaces are filled with the opponent's pieces. The player who ended the game wins unless the opponent has fewer groups. Because the empty spaces are filled with opponent's pieces, a player who ends the game too soon will lose. On the other hand, since ties go to the player who ends the game, it is important to end the game as soon as you can actually win. Variations: Options are available to select the board size, and also to use other movement rules, instead of the standard one.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Abrobad\"\n    (players 2)\n    (equipment\n        {\n            (board (hex Limping 2))\n            (piece \"Hex\" Each)\n        }\n    )\n    (rules\n        (play\n            (priority\n                (move\n                    Add\n                    (to\n                        (sites Empty)\n                        if:(= 0 (count Sites in:(sites Around (to) Own)))\n                    )\n                )\n                (or\n                    (forEach\n                        Piece\n                        (move\n                            Hop\n                            (between (range 0 18) if:(is Occupied (between)))\n                            (to if:(is Empty (to)))\n                        )\n                    )\n                    (move\n                        Propose\n                        \"Conclude\"\n                        (then\n                            (if\n                                (is Proposed \"Conclude\")\n                                (add\n                                    (piece (next))\n                                    (to (sites Empty))\n                                    (then\n                                        (and\n                                            (set\n                                                Score\n                                                Mover\n                                                (count\n                                                    Groups\n                                                    if:(=\n                                                        (who at:(to))\n                                                        (mover)\n                                                    )\n                                                )\n                                            )\n                                            (set\n                                                Score\n                                                Next\n                                                (count\n                                                    Groups\n                                                    if:(=\n                                                        (who at:(to))\n                                                        (next)\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (is Proposed \"Conclude\")\n                (if (<= (score Mover) (score Next)) (result Mover Win))\n                (result Next Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTAIJI is a Chinese term that means \u2018Great Duality\u2019 and represents the fight of Good vs. Evil, Light vs. Darkness, YIN vs. YANG.\n</description>\n<rules>\nThe game is played on a 9x9 board. On each turn, a player places a stone of their color on an empty space, and then places an opponent's stone orthogonally adjacent to the stone they just placed. The player with the largest group of orthogonally connected stones of their own color when there are no more possible moves wins the game. If both players have the same size for their largest group, the second player wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Taiji\"\n    (players 2)\n    (equipment\n        {\n            (board (square 9))\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play\n            (if\n                (is Prev Mover)\n                (move\n                    Add\n                    (piece (id \"Marker\" Next))\n                    (to\n                        (intersection\n                            (sites Around (last To) Orthogonal)\n                            (sites Empty)\n                        )\n                    )\n                    (then\n                        (if\n                            (>=\n                                (count\n                                    Sites\n                                    in:(sites Group at:(last To) Orthogonal)\n                                )\n                                (score Next)\n                            )\n                            (set\n                                Score\n                                Next\n                                (count\n                                    Sites\n                                    in:(sites Group at:(last To) Orthogonal)\n                                )\n                            )\n                        )\n                    )\n                )\n                (move\n                    Add\n                    (to\n                        (sites Empty)\n                        if:(>\n                            (count\n                                Sites\n                                in:(intersection\n                                    (sites Around (to) Orthogonal)\n                                    (sites Empty)\n                                )\n                            )\n                            0\n                        )\n                    )\n                    (then\n                        (and\n                            (if\n                                (>=\n                                    (count\n                                        Sites\n                                        in:(sites\n                                            Group\n                                            at:(last To)\n                                            Orthogonal\n                                        )\n                                    )\n                                    (score Mover)\n                                )\n                                (set\n                                    Score\n                                    Mover\n                                    (count\n                                        Sites\n                                        in:(sites\n                                            Group\n                                            at:(last To)\n                                            Orthogonal\n                                        )\n                                    )\n                                )\n                            )\n                            (moveAgain)\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (and (no Moves Next) (= (score Mover) (score Next)))\n                    (result P2 Win)\n                )\n                (if\n                    (and (no Moves Next) (> (score Mover) (score Next)))\n                    (result Mover Win)\n                )\n                (if\n                    (and (no Moves Next) (< (score Mover) (score Next)))\n                    (result Next Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nManalath was invented in 2012 by Dieter Stein and N\u00e9stor Romeral Andr\u00e9s. It is a Yavalath-like game in which the players must create a group of five without first making a group of four.\n</description>\n<rules>\nPlayers take turns placing pieces of any colour. They can't create groups of more than five pieces which are adjacent to each other. A group of 4 pieces is called a quart. A group of 5 pieces is called a quint. Players win if they finish their turn with a friendly quint, but lose if they finish their turn with a friendly quart on the board. Note: The winning and losing conditions for a player are checked after their move, only on their own turn. An end condition (win or loss) is effective when it occurred first and cannot be averted.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Manalath\"\n    (players 2)\n    (equipment\n        {\n            (board (rotate 90 (hex 5)))\n            (piece \"Marker\" Each)\n            (hand Shared size:2)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (handSite Shared))\n                (place \"Marker2\" (handSite Shared 1))\n            }\n        )\n        (play\n            (do\n                (move (from (sites Hand Shared)) (to (sites Empty)) copy:True)\n                ifAfterwards:(< (size Group at:(last To)) 6)\n                (then\n                    (forEach\n                        Site\n                        (sites Occupied by:Mover container:\"Board\")\n                        (if\n                            (= (size Group at:(site)) 5)\n                            (set Var \"Group5\" 1)\n                            (if\n                                (= (size Group at:(site)) 4)\n                                (set Var \"Group4\" 1)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if (= (var \"Group4\") 1) (result Mover Loss))\n                (if (= (var \"Group5\") 1) (result Mover Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nOdd was invented in 2007 by Nick Bentley. It is played on a hexagonal board.\n</description>\n<rules>\nPlayers take turns placing one stone of either color on the board, until it is full. Player One wins if there is an odd number of groups with at least five pieces on the board, Player Two wins otherwise.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Odd\"\n    (players 2)\n    (equipment\n        {\n            (board (rotate 90 (hex 5)))\n            (piece \"Marker\" Each)\n            (hand Shared size:2)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (handSite Shared))\n                (place \"Marker2\" (handSite Shared 1))\n            }\n        )\n        (play (move (from (sites Hand Shared)) (to (sites Empty)) copy:True))\n        (end\n            (if\n                (is Full)\n                (if\n                    (is\n                        Odd\n                        (+\n                            (count Groups if:(= (who at:(to)) P1) min:5)\n                            (count Groups if:(= (who at:(to)) P2) min:5)\n                        )\n                    )\n                    (result P1 Win)\n                )\n                (result P2 Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nOmny is a system of connection games that originated as a generalization of Mark Steere's Gyre. It includes Y as one of its many variations. Luis Bola\u00f1os Mures invented Omny in 2017.\n</description>\n<rules>\nOmny is played on the cells of any hexagonal grid where some or all of the cells are designated star cells. Players take turns placing a stone of one's own color on an empty cell. A group is a set of connected stones of the same color. A cut of a group X is any set of connected cells (empty or occupied by either player) including no stones in X. You win by making a group such that none of its cuts include more than half the cells of the board. For serious play it is advised to play with a balance rule in force. In Mis\u00e8re Omny you lose if you make a group whose cuts each contain no more than half of the star cells.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Omny\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 7))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (play\n            (if\n                (= 1 (var))\n                (or\n                    (move Swap Players P1 P2)\n                    (move Add (to (sites Empty)) (then (set Var 0)))\n                )\n                (move\n                    Add\n                    (to (sites Empty))\n                    (then (if (= 1 (count Moves)) (set Var 1)))\n                )\n            )\n        )\n        (end\n            (if\n                (>=\n                    (count Sites in:(sites Board))\n                    (max\n                        (results\n                            from:(difference\n                                (sites Board)\n                                (sites Group at:(last To))\n                            )\n                            to:2\n                            (*\n                                (to)\n                                (count\n                                    Sites\n                                    in:(intersection\n                                        (sites Board)\n                                        (sites\n                                            Group\n                                            at:(from)\n                                            if:(not\n                                                (is\n                                                    In\n                                                    (to)\n                                                    (sites Group at:(last To))\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFeed the Ducks was invented in 2011 by N\u00e9stor Romeral Andr\u00e9s.It is a game played on a hexagonal board where the goal is to group all of a player's pieces together.\n</description>\n<rules>\nThe game is played in turns. White starts by placing the breadcrumb on any empty space on the board. Now, any and every duck in the six lines radiating out from the breadcrumb move straight toward the breadcrumb as far as they can. There will never be more than one duck in a space, and the ducks stop just before they reach the breadcrumb (a fish gets it first). Then the turn passes to the next player. From now on, on your turn, you must take the breadcrumb and place it on an empty space of the board that is not on any of the six lines radiating from the breadcrumb's previous location and then move the ducks toward the breadcrumb as usual. The game ends when all the ducks of one colour have gathered into a single connected group. In case of both groups (White and Black) are created simultaneously, the player who placed the game-ending breadcrumb wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Feed the Ducks\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Marker\" Each)\n            (piece \"Disc\" Neutral)\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    {\n                        \"A5\" \"C7\" \"D8\" \"F9\" \"H9\" \"I9\" \"I7\" \"I5\" \"F2\" \"C1\" \"A1\"\n                        \"A2\"\n                    }\n                )\n                (place\n                    \"Marker2\"\n                    {\n                        \"A4\" \"A3\" \"B1\" \"D1\" \"E1\" \"G3\" \"H4\" \"I6\" \"I8\" \"G9\" \"E9\"\n                        \"B6\"\n                    }\n                )\n            }\n        )\n        phases:{\n            (phase\n                \"Throw Bread\"\n                (play\n                    (move\n                        Add\n                        (piece \"Disc0\")\n                        (to (sites Empty))\n                        (then (attract (from (last To))))\n                    )\n                )\n                (nextPhase \"Move Bread\")\n            )\n            (phase\n                \"Move Bread\"\n                (play\n                    (move\n                        (from (sites Occupied by:Neutral))\n                        (to\n                            (difference\n                                (sites Empty)\n                                (sites Direction from:(last To))\n                            )\n                        )\n                        (then (attract (from (last To))))\n                    )\n                )\n            )\n        }\n        (end\n            {\n                (if\n                    (= 1 (count Groups if:(= (who at:(to)) P1)))\n                    (result P1 Win)\n                )\n                (if\n                    (= 1 (count Groups if:(= (who at:(to)) P2)))\n                    (result P2 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nYoin is a drawless game for two players: Black and White. It is played on the spaces (cells) of an initially empty hexagonal grid of hexagons (board).Yoin was invented by Luis Bola\u00f1os Mures in 2021.\n</description>\n<rules>\nDefinitions A group is a stone along with all other stones one could reach from it through a series of steps between adjacent stones of its color. The size of a group is the number of stones in it. Play Black plays first, then turns alternate. On your turn, place a stone of your color on an empty cell. When the board is full, the winner is determined as follows: (1) Let n equal 0. (2) The player with fewer groups bigger than n stones wins. (3) If no winner is found, increase n by 1 and go back to (2). The pie rule is used in order to make the game fair. This means White will have the option, on their first turn only, to swap sides with their opponent instead of making a regular move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Yoin\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 7))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (meta (swap))\n        (play\n            (move\n                Add\n                (to (sites Empty))\n                (then\n                    (if\n                        (is Full)\n                        (do\n                            (set Var \"CutOff\" 0)\n                            next:(do\n                                (while\n                                    (and\n                                        (=\n                                            0\n                                            (-\n                                                (count\n                                                    Groups\n                                                    if:(=\n                                                        (id P1)\n                                                        (who at:(to))\n                                                    )\n                                                    min:(var \"CutOff\")\n                                                )\n                                                (count\n                                                    Groups\n                                                    if:(=\n                                                        (id P2)\n                                                        (who at:(to))\n                                                    )\n                                                    min:(var \"CutOff\")\n                                                )\n                                            )\n                                        )\n                                        (!=\n                                            0\n                                            (+\n                                                (count\n                                                    Groups\n                                                    if:(=\n                                                        (id P1)\n                                                        (who at:(to))\n                                                    )\n                                                    min:(var \"CutOff\")\n                                                )\n                                                (count\n                                                    Groups\n                                                    if:(=\n                                                        (id P2)\n                                                        (who at:(to))\n                                                    )\n                                                    min:(var \"CutOff\")\n                                                )\n                                            )\n                                        )\n                                    )\n                                    (set Var \"CutOff\" (+ 1 (var \"CutOff\")))\n                                )\n                                next:(and\n                                    (set\n                                        Score\n                                        P1\n                                        (count\n                                            Groups\n                                            if:(= (id P1) (who at:(to)))\n                                            min:(var \"CutOff\")\n                                        )\n                                    )\n                                    (set\n                                        Score\n                                        P2\n                                        (count\n                                            Groups\n                                            if:(= (id P2) (who at:(to)))\n                                            min:(var \"CutOff\")\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (is Full)\n                {\n                    (if (< (score P1) (score P2)) (result P1 Win))\n                    (if (> (score P1) (score P2)) (result P2 Win))\n                }\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nElea is a simple unification game of pure placement invented by Michael Amundsen in May 2022. There cannot be a tie in Elea.\n</description>\n<rules>\nPlayers take turns placing a stone of their own color on any empty cell of a hexagonal grid of hexagons (a hexhex board). The game is over when the board is full, and the player with the lower score wins. Your score is 1 point per odd-sized group and 2 points even-sized group. In this implementation, you get -1 per odd-sized group and -2 per even-sized group, so the winner will be the player with the higher score.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Elea\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (meta (swap))\n        (play\n            (move\n                Add\n                (to (sites Empty))\n                (then\n                    (and\n                        (set Score Mover 0)\n                        (forEach\n                            Group\n                            Orthogonal\n                            if:(is Mover (who at:(to)))\n                            (if\n                                (is Odd (count Sites in:(sites)))\n                                (and\n                                    (addScore Mover -1)\n                                    (forEach\n                                        Site\n                                        (sites)\n                                        (set State at:(site) 0)\n                                    )\n                                )\n                                (and\n                                    (addScore Mover -2)\n                                    (forEach\n                                        Site\n                                        (sites)\n                                        (set State at:(site) 1)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (is Full) (byScore)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nGygoreg is a deceptively simple unification game invented by Mike Zapawa in 2020.\n</description>\n<rules>\nEach turn you must perform exactly one of the following two actions: 1. Add a friendly piece orthogonally adjacent to one of your pieces. 2. Remove an enemy group. As soon as one player only has 1 group, the game is over and that player is the winner.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Gygoreg\"\n    (players 2)\n    (equipment\n        {\n            (board (square Diamond 10))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Disc1\" (forEach (sites Phase 0) if:(is Odd (site))))\n                (place \"Disc2\" (forEach (sites Phase 0) if:(is Even (site))))\n            }\n        )\n        (play\n            (or\n                (move\n                    Add\n                    (to\n                        (sites\n                            Around\n                            (sites Occupied by:Mover)\n                            Empty\n                            Orthogonal\n                        )\n                    )\n                )\n                (move\n                    Select\n                    (from (sites Occupied by:Enemy))\n                    (then\n                        (forEach\n                            Site\n                            (sites Group at:(last From) Orthogonal)\n                            (remove (site))\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (= 1 (count Groups Orthogonal if:(= (who at:(to)) P1)))\n                    (result P1 Win)\n                )\n                (if\n                    (= 1 (count Groups Orthogonal if:(= (who at:(to)) P2)))\n                    (result P2 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nGroups was created by Richard Hutnik in 1998. It is a connection game with the goal of creating an orthogonally connected group of six.\n</description>\n<rules>\nPieces move to any adjacent empty square or jumping one of their pieces over an adjacent piece to the empty point immediately beyond. The game is won by the first player to move all six pieces into a single orthogonally connected group\n</rules>\n</query>\n</task>",
        "solution": "(game \"Groups\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Disc\"\n                Each\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between if:(is Occupied (between)))\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Disc1\" {\"D3\" \"C4\" \"E4\" \"D5\" \"F5\" \"E6\"})\n                (place \"Disc2\" {\"E3\" \"D4\" \"F4\" \"C5\" \"E5\" \"D6\"})\n            }\n        )\n        (play (forEach Piece))\n        (end\n            (if\n                (= 1 (count Groups Orthogonal if:(= (who at:(to)) Mover)))\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nProduct is played on an empty 5x5 hexagonal board.\n</description>\n<rules>\nGROUP - A connected chain of friendly stones. TURN - Initially, Black drops one stone of either color, then for the remaining turns players drop two stones of either color. GOAL - After the board is full, wins the player with the higher product between its two largest groups. If both products are equal, wins the player with less stones on board (note: draws are impossible).\n</rules>\n</query>\n</task>",
        "solution": "(game \"Product\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end\n            (if\n                (is Full)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (*\n                                (max (sizes Group P1))\n                                (max\n                                    (difference\n                                        (sizes Group P1)\n                                        (max (sizes Group P1))\n                                    )\n                                )\n                            )\n                        )\n                        (score\n                            P2\n                            (*\n                                (max (sizes Group P2))\n                                (max\n                                    (difference\n                                        (sizes Group P2)\n                                        (max (sizes Group P2))\n                                    )\n                                )\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAdere is a 2-player strategy game that lasts about 20 minutes.\n</description>\n<rules>\nThe game is played on a triangular board made up of hexagonal tiles. On each turn, a player can either place a stone of their color on an empty space on the board, or they can move a stone of their color from the top of a stack onto a neighboring opponent's stack of exactly the same height. A player wins the game if, at the start of their turn, a single group of their stones connects all three sides of the board. A stack belongs to the player who has a stone of their color on top of it.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Adere\"\n    (players 2)\n    (equipment\n        {\n            (board (hex Triangle 8))\n            (piece \"Disc\" Each)\n            (regions P1 { (sites Side NE) (sites Side NW) (sites Side S) })\n            (regions P2 { (sites Side NE) (sites Side NW) (sites Side S) })\n        }\n    )\n    (rules\n        (play\n            (or\n                (move Add (to (sites Empty)))\n                (move\n                    Select\n                    (from (sites Occupied by:Mover top:True))\n                    (to\n                        (intersection\n                            (sites Around (from))\n                            (sites Occupied by:Prev top:True)\n                        )\n                        if:(= (size Stack at:(to)) (size Stack at:(from)))\n                    )\n                    (then (fromTo (from (last From)) (to (last To))))\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (and\n                        (not\n                            (all\n                                Sites\n                                (sites Occupied by:P1 top:True)\n                                if:(not (is Connected at:(site) P1))\n                            )\n                        )\n                        (= (mover) P2)\n                    )\n                    (result P1 Win)\n                )\n                (if\n                    (and\n                        (not\n                            (all\n                                Sites\n                                (sites Occupied by:P2 top:True)\n                                if:(not (is Connected at:(site) P2))\n                            )\n                        )\n                        (= (mover) P1)\n                    )\n                    (result P2 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSignum is a drawless connection game for the hexhex board in the vein of Global Connection, but without markings on the board or an initial position. Signum was invented by Michael Amundsen in May 2022.\n</description>\n<rules>\nPlay: Players take turns placing one stone of their color on any empty hex. Goal: When the board is full, the game is over and the player with the higher score is the winner. Scoring: Each stone is worth 1 point for its owner if it is part of a group connecting opposite sides of the board, and -1 point otherwise. The scoring trick that gave the game its name \u2013 namely that each stone is worth either +1 point or -1 point \u2013 was (unbeknownst to the inventor of Signum) discovered by Brian Wittmann (the inventor of Loops) 9 years earlier.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Signum\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 6))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (meta (swap))\n        (play (move Add (to (sites Empty))))\n        (end\n            (if\n                (is Full)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+\n                                (results\n                                    from:(sites Occupied by:P1)\n                                    to:0\n                                    (if\n                                        (or\n                                            {\n                                                (is\n                                                    Connected\n                                                    at:(from)\n                                                    {\n                                                        (sites Side N)\n                                                        (sites Side S)\n                                                    }\n                                                )\n                                                (is\n                                                    Connected\n                                                    at:(from)\n                                                    {\n                                                        (sites Side NW)\n                                                        (sites Side SE)\n                                                    }\n                                                )\n                                                (is\n                                                    Connected\n                                                    at:(from)\n                                                    {\n                                                        (sites Side NE)\n                                                        (sites Side SW)\n                                                    }\n                                                )\n                                            }\n                                        )\n                                        1\n                                        -1\n                                    )\n                                )\n                            )\n                        )\n                        (score\n                            P2\n                            (+\n                                (results\n                                    from:(sites Occupied by:P2)\n                                    to:0\n                                    (if\n                                        (or\n                                            {\n                                                (is\n                                                    Connected\n                                                    at:(from)\n                                                    {\n                                                        (sites Side N)\n                                                        (sites Side S)\n                                                    }\n                                                )\n                                                (is\n                                                    Connected\n                                                    at:(from)\n                                                    {\n                                                        (sites Side NW)\n                                                        (sites Side SE)\n                                                    }\n                                                )\n                                                (is\n                                                    Connected\n                                                    at:(from)\n                                                    {\n                                                        (sites Side NE)\n                                                        (sites Side SW)\n                                                    }\n                                                )\n                                            }\n                                        )\n                                        1\n                                        -1\n                                    )\n                                )\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nGyre is a connection game for a hexhex board designed by Mark Steere.\n</description>\n<rules>\nPlayers take turns placing a stone on an empty cell. A player wins as soon as some or all of their stones form a group with the following property: If all the cells of that group where removed (imagined away) from the board, none of the resulting partitions of the board would contain a majority of the set of cells comprising both the center cell and the perimeter cells (a majority relative to the entire intact board, that is, not of the imagined result of partitioning it).\n</rules>\n</query>\n</task>",
        "solution": "(game \"Gyre\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 7))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (meta (swap))\n        (play (move Add (to (sites Empty))))\n        (end\n            (if\n                (>=\n                    (count\n                        Sites\n                        in:(union (sites Outer) (sites { (centrePoint) }))\n                    )\n                    (max\n                        (results\n                            from:(difference\n                                (sites Board)\n                                (sites Group at:(last To))\n                            )\n                            to:2\n                            (*\n                                (to)\n                                (count\n                                    Sites\n                                    in:(intersection\n                                        (union\n                                            (sites Outer)\n                                            (sites { (centrePoint) })\n                                        )\n                                        (sites\n                                            Group\n                                            at:(from)\n                                            if:(not\n                                                (is\n                                                    In\n                                                    (to)\n                                                    (sites Group at:(last To))\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTroll is a two-player game played on an empty 8x8 square board:\n</description>\n<rules>\nEDGES - Each player owns two opposite edges, say, the first player has top and bottom edges, while the second player has left and right edges. DROP - Each player drops one of his stones on an empty cell. - If at least one opponent stone is between that stone and another friendly stone (orthogonal or diagonal), then all opponent stones that were between those stones flip their colour. - Stones cannot be dropped on the opponent's edges (including corners). GOAL - Wins the first player who manages to do a path connecting his two opposite edges. - Two tiles diagonally aside are not continuous in a path. - The corners belong to both edges.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Troll\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Ball\" Each)\n            (regions P1 { (sites Top) (sites Bottom) })\n            (regions P2 { (sites Left) (sites Right) })\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (to\n                    (if\n                        (is Mover P1)\n                        (difference\n                            (sites Empty)\n                            (union (sites Left) (sites Right))\n                        )\n                        (difference\n                            (sites Empty)\n                            (union (sites Top) (sites Bottom))\n                        )\n                    )\n                )\n                (then\n                    (custodial\n                        (from (last To))\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply\n                                (and\n                                    (remove (between))\n                                    (add\n                                        (piece (id \"Ball\" Mover))\n                                        (to (between))\n                                    )\n                                )\n                            )\n                        )\n                        (to if:(is Friend (who at:(to))))\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (!=\n                        0\n                        (count\n                            Sites\n                            in:(forEach\n                                (sites Occupied by:P1)\n                                if:(is Connected at:(site) Orthogonal P1)\n                            )\n                        )\n                    )\n                    (result P1 Win)\n                )\n                (if\n                    (!=\n                        0\n                        (count\n                            Sites\n                            in:(forEach\n                                (sites Occupied by:P2)\n                                if:(is Connected at:(site) Orthogonal P2)\n                            )\n                        )\n                    )\n                    (result P2 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPlace pieces to connect all three board sides.\n</description>\n<rules>\nPlayers take turns placing one piece of their colour on empty cells; the piece they place may not be adjacent to the last piece placed by their opponent. A player wins by connecting all three board sides with a connected group of their pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Tabu Y\"\n    (players 2)\n    (equipment\n        {\n            (board (hex Triangle 11))\n            (piece \"Disc\")\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (to\n                    (sites Empty)\n                    if:(not (is In (to) (sites Around (last To))))\n                )\n            )\n        )\n        (end (if (is Connected 3 Sides) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBipartisan Y is variant in which each player must place a piece of each color, but wins when all 3 sides are connected with his own color. Play is somewhat in between that of Y and Y Not.\n</description>\n<rules>\nGoal: Connect all three edge colors with a single group of connected stones of your own color. (As in 'Y') Turns alternate. The player seeking to connect with the darker color starts. On each turn the current player places one stone of each color (friendly stone first) onto an empty intersection of the board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Bipartisan Y\"\n    (players 2)\n    (equipment\n        {\n            (board (tri Limping 4) use:Vertex)\n            (piece \"Disc\" Each)\n            (piece \"Counter\" Neutral maxState:2)\n        }\n    )\n    (rules\n        (play\n            (if\n                (is Prev Mover)\n                (move Add (piece (next)) (to (sites Empty)))\n                (move\n                    Add\n                    (piece (mover))\n                    (to (sites Empty))\n                    (then (moveAgain))\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (and\n                        (= 1 (who at:(last To)))\n                        (is\n                            Connected\n                            3\n                            {\n                                (union (sites Side NE) (sites Side N))\n                                (union (sites Side SE) (sites Side S))\n                                (union (sites Side NW) (sites Side SW))\n                            }\n                        )\n                    )\n                    (result P1 Win)\n                )\n                (if\n                    (and\n                        (= 2 (who at:(last To)))\n                        (is\n                            Connected\n                            3\n                            {\n                                (union (sites Side NE) (sites Side N))\n                                (union (sites Side SE) (sites Side S))\n                                (union (sites Side NW) (sites Side SW))\n                            }\n                        )\n                    )\n                    (result P2 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDefector Y is a Y variant based on replacing overcrouded opponent's pieces with your own before your placement. Defection has the effect that completing a single Y fork must be deferred until the opponent is nearby, and thus the opponent can easily sever a fork that is set in an open area of the board. There are also occasions where one offers a defection in order to obtain a nearby defection in return, or to prevent an opponent blocking a critical location, or to allow your own safe play into such a location. The effect also is to cause the board to fill considerably before a win, and to create more contorted connection paths.\n</description>\n<rules>\nGoal: Connect all three edge colors with a single group of connected stones of your own color. (As in 'Y') Turns alternate. The player seeking to connect with the darker color starts. The turns consist of two parts: a conditional conversion of stones in the vicinity of the last placement, followed by one's own placement. The conversion part requires one to examine the opponent's stones around (and including) the last placed stone. Then to convert into your own, any that are surrounded by more of their own color than of yours. This is done one-by-one in any desired order, until the condition no longer applies. When no stone has more friendly neighbors than enemy neighbors, the current player places a new stone onto any empty location. The first player to connect all 3 sides is the winner. If the 122* turn protocol option is selected, the turn begins and ends with a placement, and the conversions occur in between.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Defector Y\"\n    (players 2)\n    (equipment\n        {\n            (board (tri Limping 4) use:Vertex)\n            (piece \"Disc\" Each)\n            (piece \"Counter\" Neutral maxState:2)\n        }\n    )\n    (rules\n        (play\n            (if\n                True\n                (priority\n                    (move\n                        Add\n                        (to\n                            (sites Occupied by:Next)\n                            if:(<\n                                (count\n                                    Pieces\n                                    Mover\n                                    in:(sites Around (to) Orthogonal)\n                                )\n                                (count\n                                    Pieces\n                                    Next\n                                    in:(sites Around (to) Orthogonal)\n                                )\n                            )\n                            (apply (remove (to)))\n                        )\n                        (then (moveAgain))\n                    )\n                    (move Add (to (sites Empty)))\n                )\n                (priority\n                    (move Add (to (sites Empty)) (then (moveAgain)))\n                    (priority\n                        (move\n                            Add\n                            (to\n                                (sites Occupied by:Next)\n                                if:(<\n                                    (count\n                                        Pieces\n                                        Mover\n                                        in:(sites Around (to) Orthogonal)\n                                    )\n                                    (count\n                                        Pieces\n                                        Next\n                                        in:(sites Around (to) Orthogonal)\n                                    )\n                                )\n                                (apply (remove (to)))\n                            )\n                            (then (moveAgain))\n                        )\n                        (move Add (to (sites Empty)))\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (is\n                        Connected\n                        3\n                        {\n                            (union (sites Side NE) (sites Side N))\n                            (union (sites Side SE) (sites Side S))\n                            (union (sites Side NW) (sites Side SW))\n                        }\n                    )\n                    (result Mover Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDiagonal Hex is a variant of Hex in which the connection between each stone is diagonal and not orthogonal.\n</description>\n<rules>\nPlayers take turns placing their pieces on one space on the board, with the goal of connecting the opposite sides of the board corresponding to the color of their pieces with a line of pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Diagonal Hex\"\n    (players 2)\n    (equipment\n        {\n            (board (hex Diamond 11))\n            (piece \"Marker\" Each)\n            (regions P1 { (sites Side NE) (sites Side SW) })\n            (regions P2 { (sites Side NW) (sites Side SE) })\n        }\n    )\n    (rules\n        (meta (swap))\n        (play (move Add (to (sites Empty))))\n        (end (if (is Connected Diagonal Mover) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThe objective of Nex is to create a connected chain of a player's stones linking the opposite edges of the board marked by the player's color.\n</description>\n<rules>\nThe game begins with an empty board. Each player has an allocated color, usually Red and Blue. Players take turns making one of the following: Place a stone of their color AND a neutral stone on empty cells; OR Replace two neutral stones with stones of their color, AND replace a different stone of their color on the board to neutral stone.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Nex\"\n    (players 2)\n    (equipment\n        {\n            (board (hex Diamond 11))\n            (piece \"Marker\" Each)\n            (piece \"Marker\" Neutral)\n            (regions P1 { (sites Side NE) (sites Side SW) })\n            (regions P2 { (sites Side NW) (sites Side SE) })\n        }\n    )\n    (rules\n        (meta (swap))\n        (play\n            (if\n                (is Prev Mover)\n                (if\n                    (is Pending)\n                    (move\n                        Select\n                        (from\n                            (sites Occupied by:Mover)\n                            if:(and\n                                (!= (from) (last From))\n                                (!= (from) (last To))\n                            )\n                        )\n                        (then\n                            (and\n                                (remove (last From))\n                                (add (piece \"Marker0\") (to (last From)))\n                            )\n                        )\n                    )\n                    (move Add (piece \"Marker0\") (to (sites Empty)))\n                )\n                (or\n                    (if\n                        (> (count Pieces \"Marker0\") 1)\n                        (move\n                            Select\n                            (from (sites Occupied by:Neutral))\n                            (to\n                                (sites Occupied by:Neutral)\n                                if:(!= (from) (to))\n                            )\n                            (then\n                                (and\n                                    {\n                                        (remove (last From))\n                                        (remove (last To))\n                                        (add (piece (mover)) (to (last From)))\n                                        (add (piece (mover)) (to (last To)))\n                                        (moveAgain)\n                                        (set Pending)\n                                    }\n                                )\n                            )\n                        )\n                    )\n                    (move Add (to (sites Empty)) (then (moveAgain)))\n                )\n            )\n        )\n        (end (if (is Connected Mover) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nInvented by Randy Cox and Bill Taylor, Chameleon is a Hex variant\n</description>\n<rules>\nPlayed on a Hex board. Players may play a piece of any color piece. The goal is to form a line connecting the player's two sides with either color.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Chameleon\"\n    (players 2)\n    (equipment\n        {\n            (board (hex Diamond 11))\n            (piece \"Marker\" Each)\n            (hand Shared size:2)\n            (regions P1 { (sites Side NE) (sites Side SW) })\n            (regions P2 { (sites Side NW) (sites Side SE) })\n        }\n    )\n    (rules\n        (meta (swap))\n        (start\n            {\n                (place \"Marker1\" (handSite Shared))\n                (place \"Marker2\" (handSite Shared 1))\n            }\n        )\n        (play (move (from (sites Hand Shared)) (to (sites Empty)) copy:True))\n        (end\n            {\n                (if (is Connected Mover) (result Mover Win))\n                (if (is Connected Next) (result Next Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPlace pieces to connect all three board sides.\n</description>\n<rules>\nPlayers take turns placing a piece of their colour on an empty cell. A player wins by connecting all three board sides with a connected group of their pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Y\"\n    (players 2)\n    (equipment\n        {\n            (board (hex Triangle 11))\n            (piece \"Disc\")\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end (if (is Connected 3 Sides) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nEsa Hex is a variant of the game Hex.\n</description>\n<rules>\nThe rules are similar to Hex. Players take turns placing their pieces on one space on the board, with the goal of connecting the opposite sides of the board corresponding to the color of their pieces with a line of pieces. However, in the first turn, P1 places a piece of their colour as first move. Then, players alternate placing two pieces of their colour per turn. No swap rule is needed.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Esa Hex\"\n    (players 2)\n    (equipment\n        {\n            (board (hex Diamond 11))\n            (piece \"Marker\" Each)\n            (regions P1 { (sites Side NE) (sites Side SW) })\n            (regions P2 { (sites Side NW) (sites Side SE) })\n        }\n    )\n    (rules\n        phases:{\n            (phase\n                \"Opening\"\n                P1\n                (play (move Add (to (sites Empty))))\n                (nextPhase \"Playing\")\n            )\n            (phase\n                \"Playing\"\n                (play\n                    (move\n                        Add\n                        (to (sites Empty))\n                        (then (if (= 0 (count MovesThisTurn)) (moveAgain)))\n                    )\n                )\n            )\n        }\n        (end (if (is Connected Mover) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSponnect is a simple connection game for 2 players that can be played with a Series: Shibumi set.\n</description>\n<rules>\nThe board starts with 5 red marbles forming a pyramid in the middle of the board. Starting with white, each player places a marble on an empty space or platform (2x2 arrangement of marbles). A player may also pass if the other player didn't pass on his turn. White wins by forming a chain of touching marbles connecting the east and the west side. Black wins by connecting the south and the north side.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Sponnect\"\n    (players 2)\n    (equipment\n        {\n            (board (square 4 pyramidal:True) use:Vertex)\n            (piece \"Ball\" Each)\n            (piece \"Ball\" Neutral)\n        }\n    )\n    (rules\n        (start { (place \"Ball0\" { 8 10 14 18 20}) })\n        (play\n            (or\n                (move Add (to (sites Empty) if:(is Flat)))\n                (if (not (was Pass)) (move Pass))\n            )\n        )\n        (end\n            {\n                (if\n                    (and\n                        {\n                            (= (who at:(last To)) 2)\n                            (>\n                                (size\n                                    Array\n                                    (array\n                                        (intersection\n                                            (sites Top)\n                                            (sites Group Vertex at:(last To))\n                                        )\n                                    )\n                                )\n                                0\n                            )\n                            (>\n                                (size\n                                    Array\n                                    (array\n                                        (intersection\n                                            (sites Bottom)\n                                            (sites Group Vertex at:(last To))\n                                        )\n                                    )\n                                )\n                                0\n                            )\n                        }\n                    )\n                    (result Mover Win)\n                )\n                (if\n                    (and\n                        {\n                            (= (who at:(last To)) 1)\n                            (>\n                                (size\n                                    Array\n                                    (array\n                                        (intersection\n                                            (sites Right)\n                                            (sites Group Vertex at:(last To))\n                                        )\n                                    )\n                                )\n                                0\n                            )\n                            (>\n                                (size\n                                    Array\n                                    (array\n                                        (intersection\n                                            (sites Left)\n                                            (sites Group Vertex at:(last To))\n                                        )\n                                    )\n                                )\n                                0\n                            )\n                        }\n                    )\n                    (result Mover Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nY (Hex) is a version of Hex created by Eric Piette for Ludii. It is played with hexagonal spaces arranged in a triangular board, 8 spaces on each side is typical.\n</description>\n<rules>\nPlayers take turns placing their pieces on a space on the board, with the goal of connecting all three sides of the triangle with their pieces. Corners count as belonging to both sides they touch.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Y (Hex)\"\n    (players 2)\n    (equipment\n        {\n            (board (tri Hexagon 7) use:Vertex)\n            (piece \"Marker\" Each)\n            (regions \"SSW\" { (sites Side S) (sites Side SW) })\n            (regions \"NNW\" { (sites Side NW) (sites Side N) })\n            (regions \"NESE\" { (sites Side NE) (sites Side SE) })\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end\n            (if\n                (is Connected { (sites \"SSW\") (sites \"NNW\") (sites \"NESE\") })\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAbak is an abstract strategy game for 2 to 6 players and was invented in 2015 by the historian and chemist Prof. Dr. Luc Chanteloup.\n</description>\n<rules>\nThe aim of Abak is to be the first player to connect one of the orange squares in the centre of the board to any one orange squares in the corners by forming a continuous row of counters of one colour. In the first phase, each player places one counter on one of the orange squares in the centre of the board. They continue to take turns to place their counters on a free adjacent square (squares are adjacent if they touch on the sides or diagonally by the points). The counter may be placed beside counters of any colour. Once placed, a counter may not be moved. During the game, if a counter is surrounded by more than 4 occupied squares, that counter is removed. Moreover, if then a counter becomes isolated, it is also removed from the board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Abak\"\n    (players 2)\n    (equipment\n        {\n            (board (square 11))\n            (piece \"Disc\" Each)\n            (regions \"Centre\" (sites Centre))\n            (regions\n                \"CentreRing\"\n                (difference (expand (sites Centre)) (sites Centre))\n            )\n            (regions \"OuterGoals\" (expand (sites Corners)))\n        }\n    )\n    (rules\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        Add\n                        (to (intersection (sites \"CentreRing\") (sites Empty)))\n                    )\n                )\n                (nextPhase (= (count Pieces All) 2) \"Movement\")\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (move\n                        Add\n                        (to (difference (sites Playable) (sites Centre)))\n                        (then\n                            (forEach\n                                Site\n                                (sites Occupied by:All)\n                                (if\n                                    (<=\n                                        4\n                                        (count\n                                            Sites\n                                            in:(intersection\n                                                (sites Around (to))\n                                                (sites Occupied by:All)\n                                            )\n                                        )\n                                    )\n                                    (remove (to))\n                                )\n                                (then\n                                    (forEach\n                                        Site\n                                        (sites Occupied by:All)\n                                        (if\n                                            (=\n                                                0\n                                                (count\n                                                    Sites\n                                                    in:(intersection\n                                                        (sites Around (to))\n                                                        (sites\n                                                            Occupied\n                                                            by:All\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                            (remove (to))\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end\n            (if\n                (is Connected { (sites \"CentreRing\") (sites \"OuterGoals\") })\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<rules>\nThree-Player Hex is played on the Hex board, typically with five cells per side. As in standard Hex, players take turn placing a piece of their color on an empty cell, and the first player to connect the opposite sides of the board marked his color with a chain of his pieces wins. As soon as it it no longer possible for a player to connect his edges, that player is eliminated from the game and may not place any more stones.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Three-Player Hex\"\n    (players 3)\n    (equipment\n        {\n            (board (hex 4))\n            (piece \"Marker\" Each)\n            (regions P1 { (sites Side N) (sites Side S) })\n            (regions P2 { (sites Side NW) (sites Side SE) })\n            (regions P3 { (sites Side SW) (sites Side NE) })\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end\n            {\n                (forEach NonMover if:(is Blocked Player) (result Player Loss))\n                (if (is Connected Mover) (result Mover Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nGonnect was invented by Jo\u00e3o Pedro Neto in 2000. It is played with a Go board and pieces, with the goal of creating a group that connects two opposite sides of the board.\n</description>\n<rules>\nAll the rules of Go apply, except that passing is not allowed. A player loses if he has no legal move. A player wins if they successfully connect two opposite sides of the board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Gonnect\"\n    (players 2)\n    (equipment\n        {\n            (board (square 13) use:Vertex)\n            (piece \"Marker\" Each)\n            (regions P1 { (sites Side N) (sites Side S) })\n            (regions P2 { (sites Side W) (sites Side E) })\n        }\n    )\n    (rules\n        (meta { (swap) (no Repeat) })\n        (play\n            (do\n                (move\n                    Add\n                    (to (sites Empty))\n                    (then\n                        (enclose\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                        )\n                    )\n                )\n                ifAfterwards:(> (count Liberties Orthogonal) 0)\n            )\n        )\n        (end\n            {\n                (if (is Connected Mover) (result Mover Win))\n                (if (no Moves Next) (result Mover Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game is played on a 10x10 board.\n</description>\n<rules>\nGROUP - A diagonal (orthogonal) group is a set of stones of the same color connected by diagonal (orthogonal) adjacency. EDGES - The top and bottom rows are the edges of Black, and the left and right column are the edges of White. TURN - On each turn, each player drops a friendly stone on an empty cell: GOAL - Wins the player that connects his edges with an orthogonal or a diagonal group of friendly stones.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Weave\"\n    (players 2)\n    (equipment\n        {\n            (board (square 10) use:Vertex)\n            (piece \"Ball\" Each)\n            (hand Each)\n            (regions P1 { (sites Left) (sites Right) })\n            (regions P2 { (sites Top) (sites Bottom) })\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end\n            (if\n                (or\n                    (is Connected Orthogonal Mover)\n                    (is Connected Diagonal Mover)\n                )\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHavannah is a connection game invented by Christian Freeling and played on a hexagonal board.\n</description>\n<rules>\nPlayers take turns placing pieces on the board. There are three winning conditions: 1. Connect any three edges (without corner points), or 2. Make a bridge connection between any two corners, or 3. loop around any site.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Havannah\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 8))\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end\n            (if\n                (or\n                    {\n                        (is Loop)\n                        (is Connected 3 SidesNoCorners)\n                        (is Connected 2 Corners)\n                    }\n                )\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThe most elegant drawless square connection game. Stones possess orthodiagonal connectivity, and crosscuts are disallowed.\n</description>\n<rules>\nCrossway is played with a Go set. The board starts out empty. Each player takes possession of all of the stones of one color. Players take turns adding their stones to the board, one stone per turn. A player must never create a crosscut formation. Black makes the first placement of the game. If you have no more available placements, you forfeit your turn and your opponent can continue making placements until completing his goal connection. For White to win, White must form a contiguous sequence of white stones connecting the West edge to the East edge of the board. Each stone in the sequence must be connected to neighboring stones in the sequence by horizontal, vertical, or diagonal adjacencies. Likewise for Black and the North and South edges. A corner is considered to be part of both adjoining edges. Crossway makes use of the pie rule. This means Black makes the first placement, and White has the option of switching colors with Black, and claiming Black's first move as his own. If White chooses to exercise the pie rule, Black then becomes White and now makes the second placement of the game. The pie rule can only be used once and on the second move of the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Crossway\"\n    (players 2)\n    (equipment\n        {\n            (board (square 19) use:Vertex)\n            (piece \"Marker\" Each)\n            (regions P1 { (sites Side N) (sites Side S) })\n            (regions P2 { (sites Side W) (sites Side E) })\n        }\n    )\n    (rules\n        (meta (swap))\n        (play\n            (do\n                (move Add (to (sites Empty)))\n                ifAfterwards:(not\n                    (is Pattern { F R F R F } whats:{ (mover) (next) })\n                )\n            )\n        )\n        (end (if (is Connected All Mover) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSpought is a ball stacking and connection game that can be played with a Series: Shibumi set. It uses a board of 4x4 holes, 8 white balls and 8 black balls.\n</description>\n<rules>\n\n</rules>\n</query>\n</task>",
        "solution": "(game \"Spought\"\n    (players 2)\n    (equipment\n        {\n            (board (square 4 pyramidal:True) use:Vertex)\n            (piece \"Ball\" Each)\n        }\n    )\n    (rules\n        (meta { (noStackOn Fallen) (pin SupportMultiple) (gravity) })\n        (start\n            {\n                (place \"Ball1\" {0 2 8 12 17 20 27 29})\n                (place \"Ball2\" {1 3 7 10 18 22 26 28})\n            }\n        )\n        (play\n            (or\n                (move\n                    (from\n                        (intersection\n                            (sites Layer 0)\n                            (sites Occupied by:Mover)\n                        )\n                    )\n                    (to (sites Empty) if:(is Flat))\n                )\n                (move\n                    (from\n                        (intersection\n                            (sites Layer 1)\n                            (sites Occupied by:Mover)\n                        )\n                    )\n                    (to\n                        (intersection (sites Empty) (sites Layer 1))\n                        if:(is Flat)\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (= (size Array (array (sites Group Vertex at:(last To)))) 8)\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPlace pieces to connect all three board sides.\n</description>\n<rules>\nPlayers take turns placing two pieces of their colour on empty cells. White places only one stone on their first turn. A player wins by connecting all three board sides with a connected group of their pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Master Y\"\n    (players 2)\n    (equipment\n        {\n            (board (hex Triangle 13))\n            (piece \"Disc\")\n        }\n    )\n    (rules\n        phases:{\n            (phase\n                \"Opening\"\n                P1\n                (play (move Add (to (sites Empty))))\n                (nextPhase \"Playing\")\n            )\n            (phase\n                \"Playing\"\n                (play\n                    (move\n                        Add\n                        (to (sites Empty))\n                        (then (if (= 0 (count MovesThisTurn)) (moveAgain)))\n                    )\n                )\n            )\n        }\n        (end (if (is Connected 3 Sides) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nVerge is a territory game of placement and group capture.\n</description>\n<rules>\nVerge is a two-player game played on an initially empty hexhex board. The players take turns placing a stone of their color on an empty hex. The first player UNABLE to place a stone has WON. \u2022 A partitioning group is a group separating two hexes outside the group, in the sense that all paths between the two hexes go through the group. \u2022 You're not allowed to place adjacent to a friendly partitioning group. \u2022 When a group becomes partitioning, remove all nonpartitioning groups adjacent to it. The pie rule is used to balance the game. It can be turned off in the options.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Verge\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 5))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (meta (swap))\n        (play\n            (move\n                Add\n                (to\n                    (difference\n                        (sites Empty)\n                        (sites\n                            Around\n                            (forEach\n                                (sites Occupied by:(player (mover)))\n                                if:(= (mover) (state at:(site)))\n                            )\n                            Orthogonal\n                        )\n                    )\n                )\n                (then\n                    (if\n                        (not\n                            (all\n                                Sites\n                                (union\n                                    (sites Around (last To) Empty)\n                                    (sites Around (last To) Enemy)\n                                )\n                                if:(is\n                                    In\n                                    (site)\n                                    (sites\n                                        Group\n                                        at:(min\n                                            (array\n                                                (union\n                                                    (sites\n                                                        Around\n                                                        (last To)\n                                                        Empty\n                                                    )\n                                                    (sites\n                                                        Around\n                                                        (last To)\n                                                        Enemy\n                                                    )\n                                                )\n                                            )\n                                        )\n                                        if:(not (is Mover (who at:(to))))\n                                    )\n                                )\n                            )\n                        )\n                        (and\n                            (forEach\n                                Site\n                                (sites\n                                    Group\n                                    at:(last To)\n                                    if:(is Mover (who at:(to)))\n                                )\n                                (set State at:(site) (mover))\n                            )\n                            (remove\n                                (sites\n                                    Group\n                                    from:(sites\n                                        Around\n                                        (sites\n                                            Group\n                                            at:(last To)\n                                            if:(is Mover (who at:(to)))\n                                        )\n                                        Enemy\n                                        if:(!= (next) (state at:(to)))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Next Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCavity is a finite Go variant with an elimination goal \u2013 a bit like Mark Steere's Redstone, but without red stones. This game inspired Lifeline.\n</description>\n<rules>\nLike Go, Cavity is played on the points of a square grid, and groups (chains, more precisely) and liberties are defined the same way. An empty region is a group (chain) of empty points, and it is said to be adjacent to a stone if any of its points are. Setup: Starting with Black, place one stone each on any empty point. The setup is over as soon as the players have one stone each on the board. Play: On your turn, place a stone of your color on any point in an empty region that's adjacent to a stone of your color. After placement, first remove all enemy groups that have no liberties, then remove all friendly groups that have no liberties. In this phase, as soon as one player is the only one with stones on the board, the game is over and that player is the winner. The game is balanced with the pie rule.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Cavity\"\n    (players 2)\n    (equipment\n        {\n            (board (square 11) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (meta (swap))\n        phases:{\n            (phase\n                \"Opening\"\n                (play (move Add (to (sites Empty))))\n                (nextPhase\n                    (and\n                        (= 1 (count Sites in:(sites Occupied by:P1)))\n                        (= 1 (count Sites in:(sites Occupied by:P2)))\n                    )\n                    \"Play\"\n                )\n            )\n            (phase\n                \"Play\"\n                (play\n                    (move\n                        Add\n                        (to\n                            (sites Empty)\n                            if:(>\n                                Infinity\n                                (count\n                                    Steps\n                                    Orthogonal\n                                    (step\n                                        (to\n                                            if:(or\n                                                (is Empty (to))\n                                                (is\n                                                    In\n                                                    (to)\n                                                    (sites Occupied by:Mover)\n                                                )\n                                            )\n                                        )\n                                    )\n                                    (to)\n                                    (sites Occupied by:Mover)\n                                )\n                            )\n                        )\n                        (then\n                            (if\n                                (can\n                                    Move\n                                    (enclose\n                                        (from (last To))\n                                        Orthogonal\n                                        (between\n                                            if:(is Enemy (who at:(between)))\n                                            (apply (remove (between)))\n                                        )\n                                    )\n                                )\n                                (enclose\n                                    (from (last To))\n                                    Orthogonal\n                                    (between\n                                        if:(is Enemy (who at:(between)))\n                                        (apply (remove (between)))\n                                    )\n                                )\n                                (enclose\n                                    (from (last To))\n                                    Orthogonal\n                                    (between\n                                        if:(is Mover (who at:(between)))\n                                        (apply (remove (between)))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end\n            (forEach\n                Player\n                if:(and (< 2 (count Moves)) (no Pieces Player))\n                (result Player Loss)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLava is a territorial stacking game invented by Alek Erickson and Michael Amundsen in August 2021.\n</description>\n<rules>\nLava is a territorial stacking game for two players, Red and Black. Play using a Hexhex board size 4 or 5, and a sufficient supply of Red/Black stacking checkers. To setup, place one Red and one Black checker in opposite corners of the hex hex board. Definitions: Stack: One or more checkers occupying the same cell. Control: You control a stack if your color is on top of it. Players take turns, with Black moving first. Each turn, take N checkers (where N is any number from 1 to stack size) from the top of a stack you control and move them N spaces in a straight line to a destination containing N or less checkers. Then, add a new checker of your color to the destination. Stacks may not jump over enemies, but may land on enemy or friendly stacks, thereby burying them. If you at any point cannot make a move, you must pass. This does not end the game, only your turn. When the board is full, the player controlling more stacks wins the game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Lava\"\n    (players 2)\n    (equipment\n        {\n            (board (rotate 30 (hex 4)))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Disc1\" (min (array (sites Board))))\n                (place \"Disc2\" (max (array (sites Board))))\n            }\n        )\n        (play\n            (move\n                Select\n                (from (sites Occupied by:Mover top:True))\n                (to\n                    (sites\n                        Direction\n                        from:(from)\n                        Orthogonal\n                        stop:(= (next) (who at:(to)))\n                        stopIncluded:True\n                        distance:(size Stack at:(from))\n                    )\n                    if:(>= (count Steps (from) (to)) (size Stack at:(to)))\n                )\n                (then\n                    (and\n                        (fromTo\n                            (from (last From))\n                            (to (last To))\n                            count:(count Steps (last From) (last To))\n                            stack:True\n                        )\n                        (add (to (last To)) stack:True)\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (is Full)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (count Sites in:(sites Occupied by:P1 top:True))\n                        )\n                        (score\n                            P2\n                            (count Sites in:(sites Occupied by:P2 top:True))\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCompart is a simple game of territory and timing. Walling off areas of the board with your stones multiplies enemy placements, but be mindful that your opponent will try to use those extra placements to enclose new areas that multiply your own placements. Whoever has fewer stones at the end wins.\n</description>\n<rules>\nPlayed with black and white stones on an initially empty square board. On your turn, for every viable area with one or more empty points, place a stone of your color on one of those points. A viable area is a viable point along with all other such points one can reach from it through a series of steps onto orthogonally adjacent viable points. A viable point is a point that is empty or occupied by a friendly stone. When the board is full, the player with fewer stones on the board wins. If there is a tie, whoever placed the last stone wins. Ties are only possible on even-sized boards. To make the game fair, the second player will have the option, on their first turn only, to swap sides with their opponent instead of making a regular move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Compart\"\n    (players 2)\n    (equipment\n        {\n            (board (square 11) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (meta (swap))\n        (play\n            (move\n                Add\n                (to\n                    (sites Empty)\n                    if:(not (is In (to) (sites (values Remembered))))\n                    (apply (addScore Mover 1))\n                )\n                (then\n                    (do\n                        (forEach\n                            Site\n                            (sites\n                                Group\n                                at:(last To)\n                                if:(not (is Enemy (who at:(to))))\n                            )\n                            (remember Value (site))\n                        )\n                        next:(if\n                            (<\n                                0\n                                (count\n                                    Sites\n                                    in:(difference\n                                        (sites Empty)\n                                        (sites (values Remembered))\n                                    )\n                                )\n                            )\n                            (moveAgain)\n                            (forget Value All)\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (is Full)\n                {\n                    (if (= (score P1) (score P2)) (result Mover Win))\n                    (if True (byScore misere:True))\n                }\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game can be player with just pencil and paper. It is presented at 100 Strategic Games for Pen and Paper by Walter Joris.\n</description>\n<rules>\nEach player starts by droping two friendly stones on empty cells. Then, on each turn, each player passes or drops a friendly stone on an empty cell orthogonally adjacent to another friendly stone. When both players pass, wins the player with more stones. Notice that a player which encloses an area of empty cells, can automatically claim it.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Walking Dots\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        phases:{\n            (phase\n                \"Init\"\n                (play (move Add (to (sites Empty))))\n                (nextPhase\n                    (= 4 (count Sites in:(sites Occupied by:All)))\n                    \"Main\"\n                )\n            )\n            (phase\n                \"Main\"\n                (play\n                    (or\n                        (move\n                            Add\n                            (to\n                                (sites\n                                    Around\n                                    (sites Occupied by:Mover)\n                                    Orthogonal\n                                    if:(is Empty (to))\n                                )\n                            )\n                            (then\n                                (enclose\n                                    (from (last To))\n                                    Orthogonal\n                                    (between\n                                        if:(is Enemy (who at:(between)))\n                                        (apply (remove (between)))\n                                    )\n                                )\n                            )\n                        )\n                        (move Pass)\n                    )\n                )\n            )\n        }\n        (end\n            (if\n                (all Passed)\n                (byScore\n                    {\n                        (score P1 (+ (size Territory P1) (count Pieces P1)))\n                        (score P2 (+ (size Territory P2) (count Pieces P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAtari Go is a simplified version of Go where the first person to capture a stone wins.\n</description>\n<rules>\nThe rules are identical to Go, except the winning condition is to be the first to capture a stone.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Atari Go\"\n    (players 2)\n    (equipment\n        {\n            (board (square 19) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play\n            (do\n                (move\n                    Add\n                    (to (sites Empty))\n                    (then\n                        (enclose\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply\n                                    (and\n                                        (trigger \"CaptureMade\" Next)\n                                        (remove (between))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n                ifAfterwards:(> (count Liberties Orthogonal) 0)\n            )\n        )\n        (end (if (is Triggered \"CaptureMade\" Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPlayers steer cellular automata to dominate the board.\n</description>\n<rules>\nPlay on an equilateral hexagonal triangle-tessellated grid. The board is seeded randomly with a black stone, a white stone, and a neutral stone. Players take turn seeding new groups. Every placement triggers growth of all enemy groups, where growth is defined as adding a stone to all empty cells adjacent to a group. When the board fills up, the person who has more pieces on the board wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Inkblots\"\n    (players 2)\n    (equipment\n        {\n            (board (tri Hexagon 7))\n            (tile \"Triangle\" Each)\n            (tile \"Triangle\" Neutral)\n        }\n    )\n    (rules\n        (meta (swap))\n        (start (place Random {\"Triangle1\" \"Triangle2\" \"Triangle0\"}))\n        (play\n            (move\n                Add\n                (to (sites Empty))\n                (then\n                    (add\n                        (piece (id \"Triangle\" Next))\n                        (to\n                            (intersection\n                                (expand (sites Occupied by:Next) Orthogonal)\n                                (sites Empty)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (no Moves Next)\n                (byScore\n                    {\n                        (score P1 (count Pieces P1))\n                        (score P2 (count Pieces P2))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n\n</query>\n</task>",
        "solution": "(game \"Ataxx\"\n    (players 2)\n    (equipment\n        {\n            (board (square 7))\n            (piece \"Marker\"\n                Each\n                (or\n                    (move\n                        (from)\n                        (to (sites Around (from)) if:(is Empty (to)))\n                        copy:True\n                    )\n                    (move\n                        (from)\n                        (to\n                            (difference\n                                (expand origin:(from) steps:2)\n                                (expand origin:(from))\n                            )\n                            if:(is Empty (to))\n                        )\n                    )\n                    (then\n                        (forEach\n                            Site\n                            (intersection\n                                (sites Around (last To))\n                                (sites Occupied by:Next)\n                            )\n                            (and\n                                (remove (site))\n                                (add (piece (id \"Marker\" Mover)) (to (site)))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (set Score Each 2)\n                (place \"Marker1\" {\"A1\" \"G7\"})\n                (place \"Marker2\" {\"A7\" \"G1\"})\n            }\n        )\n        (play\n            (forEach\n                Piece\n                (then\n                    (and\n                        (set Score P1 (count Sites in:(sites Occupied by:P1)))\n                        (set Score P2 (count Sites in:(sites Occupied by:P2)))\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (or (= (count Sites in:(sites Occupied by:Next)) 0) (is Full))\n                (byScore)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nWeiqi is a territory game that is one of the oldest surviving games today. It is the ancestor of Go, and its rules are largely the same. It originated in China, and inspired similar games throughout East Asia, most notably Go in Japan and Baduk in Korea.\n</description>\n<rules>\nPlayed on a 19x19 board. The board begins empty. One player plays as black, the other as white. The black player begins by placing a piece on one of the intersections on the board. Players alternate turns placing a piece on the board. A player may pass at any time. A piece or a group of pieces are captured when they are completely surrounded on all sides on adjacent intersections by the opposing player. Stones may be placed in a position where they are surrounded. Stones cannot be placed to recreate a previous position. The game ends when both players pass consecutively. Players then fill in the spaces in their captured territory with their own pieces. Players total the number of intersections their pieces occupy. The player with the highest total wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Weiqi\"\n    (players 2)\n    (equipment\n        {\n            (board (square 19) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (meta (no Repeat))\n        (play\n            (or\n                (move\n                    Add\n                    (to (sites Empty))\n                    (then\n                        (enclose\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                        )\n                    )\n                )\n                (move Pass)\n            )\n        )\n        (end\n            (if\n                (all Passed)\n                (byScore\n                    {\n                        (score P1 (+ (count Pieces P1) (size Territory P1)))\n                        (score P2 (+ (count Pieces P2) (size Territory P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nReversi is a game purportedly invented in the early nineteenth century by either Lewis Waterman or John W. Mollett, but may actually be an older game. It is currently sold and marketed as Othello worldwide.\n</description>\n<rules>\nReversi is played on an 8x8 board. Pieces are double-sided, with each side distinct in some way from the other. Each side designates ownership of that pieces to a certain player when face-up. Play begins with the players taking turns placing pieces into the central four squares until they are full. Then players may place their pieces next to an opponent's piece, a long as a straight line can be drawn between the new piece and an existing piece belonging to that player that goes through the opponent's piece. The opponent's pieces between the new piece and the old piece are then flipped and now belong to the player who just played. If a player cannot make a legal move, they pass. Play continues until the board is full or neither player cannot make a legal move. The player with the most pieces on the board wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Reversi\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Disc\" Neutral (flips 1 2))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Disc0\"\n                    (difference (sites Centre) (sites Phase 1))\n                    state:1\n                )\n                (place\n                    \"Disc0\"\n                    (difference (sites Centre) (sites Phase 0))\n                    state:2\n                )\n            }\n        )\n        phases:{\n            (phase\n                \"Playing\"\n                (play\n                    (forEach\n                        Site\n                        (sites Empty)\n                        (append\n                            (custodial\n                                (from (site))\n                                (between\n                                    if:(is Enemy (state at:(between)))\n                                    (apply\n                                        (allCombinations\n                                            (add\n                                                (piece \"Disc0\" state:(mover))\n                                                (to (site))\n                                            )\n                                            (flip (between))\n                                        )\n                                    )\n                                )\n                                (to if:(is Friend (state at:(to))))\n                            )\n                            (then\n                                (and\n                                    (set\n                                        Score\n                                        P1\n                                        (count Sites in:(sites State 1))\n                                    )\n                                    (set\n                                        Score\n                                        P2\n                                        (count Sites in:(sites State 2))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end (if (all Passed) (byScore)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nOne-Eyed Go is a variant of Go.\n</description>\n<rules>\nOne-Eyed Go follows the same rules as go (e.g. Japanese Rules) with the exception that it is never allowed to place a stone such that your own group has no liberties, even when they would capture other stones. This renders the ko rule superfluous.\n</rules>\n</query>\n</task>",
        "solution": "(game \"One-Eyed Go\"\n    (players 2)\n    (equipment\n        {\n            (board (square 19) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play\n            (or\n                (do\n                    (move Add (to (sites Empty)))\n                    ifAfterwards:(> (count Liberties Orthogonal) 0)\n                    (then\n                        (enclose\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply\n                                    (and\n                                        (addScore Mover 1)\n                                        (remove (between))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n                (move Pass)\n            )\n        )\n        (end\n            (if\n                (all Passed)\n                (byScore\n                    {\n                        (score P1 (+ (score P1) (size Territory P1)))\n                        (score P2 (+ (score P2) (size Territory P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<rules>\nThe game is played on the board of Kensington. It follows the rules of Go except when a capture is made, the pieces captured are flipped.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Lotus\"\n    (players 2)\n    (equipment\n        {\n            (board (rotate 90 (tiling T3464 2)) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play\n            (or\n                (do\n                    (move\n                        Add\n                        (to (sites Empty))\n                        (then\n                            (enclose\n                                (from (last To))\n                                Orthogonal\n                                (between\n                                    if:(is Enemy (who at:(between)))\n                                    (apply\n                                        (and\n                                            (remove (between))\n                                            (add (to (between)))\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                    ifAfterwards:(> (count Liberties) 0)\n                )\n                (move Pass (then (addScore Mover 1)))\n            )\n        )\n        (end\n            (if\n                (all Passed)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+\n                                {\n                                    (score P1)\n                                    (size Territory P1)\n                                    (count Sites in:(sites Occupied by:P1))\n                                }\n                            )\n                        )\n                        (score\n                            P2\n                            (+\n                                {\n                                    (score P2)\n                                    (size Territory P2)\n                                    (count Sites in:(sites Occupied by:P2))\n                                }\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMig Mang is a territory game played in Tibet on a 17x17 board.\n</description>\n<rules>\n17x17 intersecting lines. 151 pieces per player. Each player begins with six larger pieces on the board, on the third line from the perimeter on all four sides, one piece on every fourth intersection, alternating between black and white. These pieces are never moved from the board. There is a star marking at each of these points. Players alternate turns placing one of their pieces on an empty intersection of the board. When a player encloses an area with their pieces, it becomes their territory, and any pieces of the opponent inside it are captured. The opponent cannot place one of their pieces inside a territory won on the previous turn. White plays first. When players can no longer play, the number of counters and each territory are counted to determine the winner.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Mig Mang\"\n    (players 2)\n    (equipment\n        {\n            (board (square 17) use:Vertex)\n            (piece \"Ball\" Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Ball1\"\n                    (sites {\"C7\" \"K15\" \"C15\" \"G3\" \"O11\" \"O3\"})\n                    state:1\n                )\n                (place\n                    \"Ball2\"\n                    (sites {\"C3\" \"K3\" \"C11\" \"G15\" \"O15\" \"O7\"})\n                    state:1\n                )\n            }\n        )\n        (play\n            (move\n                Add\n                (to (sites Empty) if:(= (state at:(to)) 0))\n                (then\n                    (and\n                        (forEach\n                            Site\n                            (sites Empty)\n                            (if\n                                (!= 0 (state at:(site)))\n                                (set State at:(site) 0)\n                            )\n                        )\n                        (enclose\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                if:(or\n                                    (is Enemy (who at:(between)))\n                                    (is Empty (between))\n                                )\n                                (apply\n                                    (and\n                                        (if\n                                            (is Enemy (who at:(between)))\n                                            (remove (between))\n                                        )\n                                        (set State at:(between) (mover))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (and (no Moves P1) (no Moves P2))\n                (byScore\n                    {\n                        (score P1 (+ (count Pieces P1) (size Territory P1)))\n                        (score P2 (+ (count Pieces P2) (size Territory P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBlooGo is a Go variant inspired by the game Blooms by Nick Bentley. In BlooGo, suicide is allowed, no passing is allowed, and the first player to capture a certain number of enemy stones wins.\n</description>\n<rules>\nPlayed on a square grid. The board begins empty. One player plays as Black, the other as White. Players alternate turns placing a piece of their colour on the board; Black plays first. Passing is not allowed. After a move, all opposing pieces without liberties are captured (a stone or group of stones has no liberties if all adjacent points to that stone are occupied). Stones cannot be placed to recreate a previous position. The game ends when one player captures a number of stones equal to a winning threshold agreed upon at the start of the game. Despite not having an explicit territorial goal, this variant produces final positions quite reminiscent of standard Go.\n</rules>\n</query>\n</task>",
        "solution": "(game \"BlooGo\"\n    (players 2)\n    (equipment\n        {\n            (board (square 9) use:Vertex)\n            (piece \"Ball\" Each)\n        }\n    )\n    (rules\n        (meta (no Repeat))\n        (play\n            (move\n                Add\n                (to (sites Empty))\n                (then\n                    (forEach\n                        Site\n                        (sites Occupied by:Next)\n                        (if\n                            (= (count Liberties at:(site) Orthogonal) 0)\n                            (move Remove (site) (then (addScore Mover 1)))\n                        )\n                    )\n                )\n            )\n        )\n        (end { (if (>= (score Mover) 5) (result Mover Win)) })\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFlume is a simple territory game made by Mark Steere. Its placement protocol bears some similarity to Dots and Boxes.\n</description>\n<rules>\nPlayers take turns placing stones of their color on empty squares. If you place orthogonally adjacent to more than 2 stones, regardless of their color, you must place again. You continue until you place orthogonally adjacent to 2 or fewer stones. When the board is full, the player with the most stones on the board is the winner.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Flume\"\n    (players 2)\n    (equipment\n        {\n            (board (square 9))\n            (piece \"Disc\" Each)\n            (piece \"Disc\" Neutral)\n        }\n    )\n    (rules\n        (meta (swap))\n        (start (place \"Disc0\" (sites Outer)))\n        (play\n            (move\n                Add\n                (to (sites Empty))\n                (then\n                    (and\n                        (addScore Mover 1)\n                        (if\n                            (<\n                                2\n                                (count\n                                    Sites\n                                    in:(sites\n                                        Around\n                                        (last To)\n                                        NotEmpty\n                                        Orthogonal\n                                    )\n                                )\n                            )\n                            (moveAgain)\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (is Full) (byScore)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nQuathaxx is a quadHex-tilling variant of Ataxx an arcade game invented in 1990 by the Leland Corporation and was originally called Infection.\n</description>\n<rules>\nEach player begins with three pieces on the six corners of the board. Players move one piece one or two spaces in any direction orthogonally or diagonally. If the piece is moved on space, another piece is added on the origin space. All of the opponent's pieces adjacent to the space to which the player moved now belong to the player who moved. Play ends when all spaces have been filled or one of the players has no remaining pieces. The player with the most pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Quathaxx\"\n    (players 2)\n    (equipment\n        {\n            (board (quadhex 4))\n            (piece \"Marker\"\n                Each\n                (or\n                    (move\n                        (from)\n                        (to (sites Around (from)) if:(is Empty (to)))\n                        copy:True\n                    )\n                    (move\n                        (from)\n                        (to\n                            (difference\n                                (expand origin:(from) steps:2)\n                                (expand origin:(from))\n                            )\n                            if:(is Empty (to))\n                        )\n                    )\n                    (then\n                        (forEach\n                            Site\n                            (intersection\n                                (sites Around (last To))\n                                (sites Occupied by:Next)\n                            )\n                            (and\n                                (remove (site))\n                                (add (piece (id \"Marker\" Mover)) (to (site)))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (set Score Each 2)\n                (place \"Marker1\" {\"L1\" \"L37\" \"AZ19\"})\n                (place \"Marker2\" {\"A19\" \"AO37\" \"AO1\"})\n            }\n        )\n        (play\n            (forEach\n                Piece\n                (then\n                    (and\n                        (set Score P1 (count Sites in:(sites Occupied by:P1)))\n                        (set Score P2 (count Sites in:(sites Occupied by:P2)))\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (or (= (count Sites in:(sites Occupied by:Next)) 0) (is Full))\n                (byScore)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFred Horn designed this game at the 9th Board Games Studies Colloquium, in Brazil, as a kind of challenge to professor Jos\u00e9 Carlos Quadrado to show that it was possible to quickly design a good abstract game. And here it is!\n</description>\n<rules>\nThe central 3x5 area is called the 'can'. TURN - A player must move one of his stones sliding it orthogonally or diagonally over a line of empty cells. Stones inside the can cannot move. GOAL - Wins the player that moves all his stones into the can. If it is no longer possible to move the remaining stones into the can, wins the player with more stones there.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Can The Sardines\"\n    (players 2)\n    (equipment\n        {\n            (board (square 9))\n            (regions\n                \"Can\"\n                (sites\n                    {\n                        \"C4\" \"C5\" \"C6\" \"D4\" \"D5\" \"D6\" \"E4\" \"E5\" \"E6\" \"F4\" \"F5\"\n                        \"F6\" \"G4\" \"G5\" \"G6\"\n                    }\n                )\n            )\n            (regions\n                \"Border\"\n                (difference (sites \"Can\") (sites {\"D5\" \"E5\" \"F5\"}))\n            )\n            (piece \"Fish\"\n                Each\n                (if (not (is In (from) (sites \"Can\"))) (move Slide))\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Fish1\" {\"A1\" \"B1\" \"C1\" \"D1\" \"F1\" \"G1\" \"H1\" \"I1\"})\n                (place \"Fish2\" {\"A9\" \"B9\" \"C9\" \"D9\" \"F9\" \"G9\" \"H9\" \"I9\"})\n            }\n        )\n        (play\n            (if\n                (not\n                    (all\n                        Sites\n                        (sites \"Border\")\n                        if:(is In (site) (sites Occupied by:All))\n                    )\n                )\n                (forEach Piece)\n            )\n        )\n        (end\n            {\n                (forEach\n                    Player\n                    if:(all\n                        Sites\n                        (sites Occupied by:Player)\n                        if:(is In (site) (sites \"Can\"))\n                    )\n                    (result Player Win)\n                )\n                (if\n                    (no Moves Mover)\n                    (byScore\n                        {\n                            (score\n                                P1\n                                (count\n                                    Sites\n                                    in:(forEach\n                                        (sites \"Can\")\n                                        if:(= (who at:(site)) P1)\n                                    )\n                                )\n                            )\n                            (score\n                                P2\n                                (count\n                                    Sites\n                                    in:(forEach\n                                        (sites \"Can\")\n                                        if:(= (who at:(site)) P2)\n                                    )\n                                )\n                            )\n                        }\n                    )\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThrow pieces a certain distance based on their value.\n</description>\n<rules>\nEach player places 2 pieces on the board perimeter with value 0. During each player's turn they can either increase the value of a piece by 1, or place a new piece on an empty site. New pieces must be placed N spaces away from an existing piece, where N is the value of that piece. New pieces always start with value 0. The game ends when all spots on the board are filled or all players pass. The player with the most pieces on the board wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Chucka\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 4))\n            (piece \"Disc\" Each)\n        }\n    )\n    (rules\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        Add\n                        (piece (mover))\n                        (to (intersection (sites Outer) (sites Empty)))\n                        (then (addScore Mover 1))\n                    )\n                )\n                (nextPhase Mover (= (count Pieces Mover) 2) \"Movement\")\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (or\n                        {\n                            (move\n                                Select\n                                (from (sites Occupied by:Mover))\n                                (to\n                                    (intersection\n                                        (sites\n                                            Around\n                                            (from)\n                                            distance:(value Piece at:(from))\n                                            Orthogonal\n                                        )\n                                        (sites Empty)\n                                    )\n                                )\n                                (then\n                                    (and\n                                        (add\n                                            (piece (id \"Disc\" Mover))\n                                            (to (last To))\n                                        )\n                                        (addScore Mover 1)\n                                    )\n                                )\n                            )\n                            (move\n                                Select\n                                (from (sites Occupied by:Mover))\n                                (then\n                                    (set\n                                        Value\n                                        at:(last From)\n                                        (+ (value Piece at:(last From)) 1)\n                                    )\n                                )\n                            )\n                            (move Pass)\n                        }\n                    )\n                )\n            )\n        }\n        (end (if (or (is Full) (all Passed)) (byScore)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMacBeth is a hexagonal translation of Reversi/Othello. Players alternately place stones of their colour so as to cause custodial capture of lines of opposing pieces, which then flip to the player's colour. The player who has the most stones on the board when no more moves are possible wins the game.\n</description>\n<rules>\nReversi is played on a hexhex-6 board with some cells removed. Pieces are double-sided, with each side distinct in some way from the other. Each side designates ownership of that pieces to a certain player when face-up. In Reversi Mode, play begins with the players taking turns placing pieces into the central six hexagons until they are full; in Othello mode, the central six hexagons are pre-filled with alternating Black and White discs. Then players may place their pieces next to an opponent's piece, as long as a straight line can be drawn between the new piece and an existing piece belonging to that player that goes through the opponent's piece. The opponent's pieces between the new piece and the old piece are then flipped and now belong to the player who just played. If a player cannot make a legal move, they pass. Play continues until the board is full or neither player can make a legal move. The player with the most pieces on the board wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"MacBeth\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (remove\n                    (hex 6)\n                    cells:{\n                        7 9 11 22 24 26 28 41 43 45 47 49 62 64 66 68 79 81 83\n                    }\n                )\n            )\n            (piece \"Disc\" Neutral (flips 1 2))\n        }\n    )\n    (rules\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        Add\n                        (piece \"Disc0\" state:(mover))\n                        (to (intersection (sites Empty) (sites Centre)))\n                    )\n                )\n                (nextPhase Mover (>= (count Moves) 5) \"Playing\")\n            )\n            (phase\n                \"Playing\"\n                (play\n                    (forEach\n                        Site\n                        (sites Empty)\n                        (append\n                            (custodial\n                                (from (site))\n                                (between\n                                    if:(is Enemy (state at:(between)))\n                                    (apply\n                                        (allCombinations\n                                            (add\n                                                (piece \"Disc0\" state:(mover))\n                                                (to (site))\n                                            )\n                                            (flip (between))\n                                        )\n                                    )\n                                )\n                                (to if:(is Friend (state at:(to))))\n                            )\n                            (then\n                                (and\n                                    (set\n                                        Score\n                                        P1\n                                        (count Sites in:(sites State 1))\n                                    )\n                                    (set\n                                        Score\n                                        P2\n                                        (count Sites in:(sites State 2))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end (if (all Passed) (byScore)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPatok is a game played in Korea that is very similar to Japanese Go and Chinese Wei-Qi. There is a customary opening phase, in which players place pieces on certain spaces before beginning.\n</description>\n<rules>\n19x19 intersecting lines. The central, as well as every third spot, in a square with the corners at the fourth point from the corners of the board, are marked. Players alternate turns placing a piece on the board on one of the marked spaces. When all of the marked spaces have been occupied, players may place a piece on any empty spot on the board. If a player surrounds one or more of the opponent's pieces orthogonally, they capture the opponent's pieces. The edge of the board can be included in such an enclosure. A group of pieces which contain two empty or more enclosures cannot be captured by the opponent. Pieces cannot be placed in an enclosure. When no further pieces can be placed, the players count the number of their pieces on the board and the number of empty spaces they enclose, and the player with the higher score wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Patok\"\n    (players 2)\n    (equipment\n        {\n            (board (square 19) use:Vertex)\n            (piece \"Marker\" Each)\n            (regions\n                \"MarkedSites\"\n                (sites\n                    {\n                        \"D4\" \"D7\" \"D10\" \"D13\" \"D16\" \"G4\" \"G16\" \"J4\" \"J10\"\n                        \"J16\" \"M4\" \"M16\" \"P4\" \"P7\" \"P10\" \"P13\" \"P16\"\n                    }\n                )\n            )\n        }\n    )\n    (rules\n        phases:{\n            (phase\n                \"MarkedPlacement\"\n                (play\n                    (move\n                        Add\n                        (to\n                            (intersection (sites Empty) (sites \"MarkedSites\"))\n                        )\n                    )\n                )\n                (nextPhase\n                    (=\n                        0\n                        (count\n                            Sites\n                            in:(intersection\n                                (sites \"MarkedSites\")\n                                (sites Empty)\n                            )\n                        )\n                    )\n                    \"Playing\"\n                )\n            )\n            (phase\n                \"Playing\"\n                (play\n                    (do\n                        (move\n                            Add\n                            (to (sites Empty))\n                            (then\n                                (enclose\n                                    (from (last To))\n                                    Orthogonal\n                                    (between\n                                        if:(is Enemy (who at:(between)))\n                                        (apply\n                                            (and\n                                                (addScore Mover 1)\n                                                (remove (between))\n                                            )\n                                        )\n                                    )\n                                    numException:1\n                                )\n                            )\n                        )\n                        ifAfterwards:(> (count Liberties Orthogonal) 0)\n                    )\n                )\n                (end\n                    (if\n                        (no Moves Next)\n                        (byScore\n                            {\n                                (score P1 (+ (score P1) (size Territory P1)))\n                                (score P2 (+ (score P2) (size Territory P2)))\n                            }\n                        )\n                    )\n                )\n            )\n        }\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPhantom Go is a variant of Go for two players and a referee. The players only see their own stones, but they don't know where the opponent plays. The referee sees the moves of both players and takes care that they only play legal moves.\n</description>\n<rules>\nEach player has his own board, set up so that the opponent cannot see it. The referee has a board of his own on which he plays the moves of both players. He can see both player's boards. To make a move, a player plays a stone on his own board. The referee then checks on his board whether the move is legal and informs both players about the tried move. How exactly the referee comments on the move depends on the rule variant. As long as a player tries to play an illegal move, it's still his turn and he may try another move. After the player has made a legal move, the referee copies the move to his own board. Then, it's the other player's turn.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Phantom Go\"\n    (players 2)\n    (equipment\n        {\n            (board (square 9) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play\n            (or\n                (move\n                    Select\n                    (from (union (sites Empty) (sites Hidden to:Mover)))\n                    (then\n                        (priority\n                            {\n                                (if\n                                    (not (is In (last To) (sites Empty)))\n                                    (and\n                                        {\n                                            (note\n                                                player:Mover\n                                                \"made an illegal move\"\n                                            )\n                                            (note player:Mover \"to play\")\n                                            (moveAgain)\n                                        }\n                                    )\n                                )\n                                (do\n                                    (add\n                                        (to (last To))\n                                        (then\n                                            (and\n                                                {\n                                                    (enclose\n                                                        (from (last To))\n                                                        Orthogonal\n                                                        (between\n                                                            if:(is\n                                                                Enemy\n                                                                (who\n                                                                    at:(between)\n                                                                )\n                                                            )\n                                                            (apply\n                                                                (and\n                                                                    (addScore\n                                                                        Mover\n                                                                        1\n                                                                    )\n                                                                    (remove\n                                                                        (between)\n                                                                    )\n                                                                )\n                                                            )\n                                                        )\n                                                    )\n                                                    (set\n                                                        Hidden\n                                                        at:(last To)\n                                                        to:Next\n                                                    )\n                                                    (note\n                                                        player:Mover\n                                                        \"has moved\"\n                                                    )\n                                                    (note\n                                                        player:Next\n                                                        \"to play\"\n                                                    )\n                                                }\n                                            )\n                                        )\n                                    )\n                                    ifAfterwards:(>\n                                        (count Liberties Orthogonal)\n                                        0\n                                    )\n                                )\n                                (and\n                                    {\n                                        (note\n                                            player:Mover\n                                            \"made an illegal move\"\n                                        )\n                                        (note player:Mover \"to play\")\n                                        (moveAgain)\n                                    }\n                                )\n                            }\n                        )\n                    )\n                )\n                (move Pass)\n            )\n        )\n        (end\n            (if\n                (all Passed)\n                (byScore\n                    {\n                        (score P1 (+ (score P1) (size Territory P1)))\n                        (score P2 (+ (score P2) (size Territory P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nA game created for a Kaggle competition.\n</description>\n<rules>\nThe game is played on an 8x8 board. Each player starts with one stone close to one corner of the board, with each player's stone in opposite corners. Players can either move a stone one space in any direction orthogonally or diagonally, or add a stone onto an empty space. If a stone is moved, another stone is added to the original space and all opposing stones adjacent to the space the player moved to now belong to the player who moved. If a player has no more stone left, he loses. If the board is full, the player with the most stones wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Virus\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Disc\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then\n                        (and\n                            (add (piece (id \"Disc\" Mover)) (to (last From)))\n                            (forEach\n                                Site\n                                (intersection\n                                    (sites Around (last To))\n                                    (sites Occupied by:Next)\n                                )\n                                (and\n                                    (remove (site))\n                                    (add\n                                        (piece (id \"Disc\" Mover))\n                                        (to (site))\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start { (place \"Disc1\" { \"B2\"}) (place \"Disc2\" { \"G7\" }) })\n        (play\n            (or\n                (forEach\n                    Piece\n                    (then\n                        (and\n                            (set\n                                Score\n                                P1\n                                (count Sites in:(sites Occupied by:P1))\n                            )\n                            (set\n                                Score\n                                P2\n                                (count Sites in:(sites Occupied by:P2))\n                            )\n                        )\n                    )\n                )\n                (move\n                    Add\n                    (to (sites Empty) if:(is Empty (to)))\n                    (then\n                        (and\n                            (set\n                                Score\n                                P1\n                                (count Sites in:(sites Occupied by:P1))\n                            )\n                            (set\n                                Score\n                                P2\n                                (count Sites in:(sites Occupied by:P2))\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (= (count Sites in:(sites Occupied by:Next)) 0)\n                    (result Mover Win)\n                )\n                (if\n                    (is Full)\n                    (byScore\n                        {\n                            (score P1 (count Sites in:(sites Occupied by:P1)))\n                            (score P2 (count Sites in:(sites Occupied by:P2)))\n                        }\n                    )\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nRolit is an easy to learn strategy game that\u2019s fun for the whole family. The aim of the game is to capture your opponent\u2019s Rolit balls and turn balls to make them your color. The player with the most Rolit balls of their color wins!\n</description>\n<rules>\nThis is basically 4-player Othello, albeit more \\\"friendly\\\", since you can place a piece of your color even if you have none on the board. It features unique ball-shaped objects that have four colors. You \\\"roll\\\" them to the proper color when converting them, as opposed to flipping in 2-player Othello. The game adds a higher chaos factor in the 3 and 4 player game since you don't have any control over what your opponents do.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Rolit\"\n    (players 4)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Ball\" Neutral)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Ball0\" coord:\"D5\" state:1)\n                (place \"Ball0\" coord:\"E5\" state:2)\n                (place \"Ball0\" coord:\"E4\" state:3)\n                (place \"Ball0\" coord:\"D4\" state:4)\n            }\n        )\n        (play\n            (priority\n                (forEach\n                    Site\n                    (sites Empty)\n                    (append\n                        (custodial\n                            (from (site))\n                            (between\n                                if:(is Enemy (state at:(between)))\n                                (apply\n                                    (allCombinations\n                                        (add\n                                            (piece \"Ball0\" state:(mover))\n                                            (to (site))\n                                        )\n                                        (set State at:(between) (mover))\n                                    )\n                                )\n                            )\n                            (to if:(is Friend (state at:(to))))\n                        )\n                    )\n                )\n                (move\n                    Add\n                    (piece \"Ball0\" state:(mover))\n                    (to (sites Around (sites Occupied by:Neutral) Empty))\n                )\n                (then\n                    (forEach\n                        Player\n                        (set\n                            Score\n                            Player\n                            (count Sites in:(sites State (player)))\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (all Passed) (byScore)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPAINTBUCKET is a flipping game of elimination for two players, White and Black.Paintbucket was designed by Michael Amundsen and Alek Erickson in 2022.\n</description>\n<rules>\nDEFINITION: A group is a maximal set of orthogonally adjacent like-colored pieces. GAMEPLAY: On your turn, flip an enemy group. OBJECTIVE: Eliminate the enemy pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Paintbucket\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (tile \"Square\" Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Square1\" (sites Phase 0))\n                (place \"Square2\" (sites Phase 1))\n            }\n        )\n        (play\n            (move\n                Select\n                (from (sites Occupied by:Next))\n                (then\n                    (add\n                        (to\n                            (sites Group at:(last From) Orthogonal)\n                            (apply (remove (to)))\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPlace stones in line of sight of the most recent stone until it is trapped. Whoever dominates the trapped area wins.\n</description>\n<rules>\nPlay on an equilateral triangular hexagon-tessellated grid. Use a neutral pawn and black/white checkers. Players take turns moving a neutral pawn around on the board (passing is not allowed). The neutral pawn can move any number of empty points, in any direction in a straight line, but cannot move onto, or jump over occupied points. When a player moves the pawn, first they place a checker of their own color, onto the destination point. Then they move the pawn on top of it. When the pawn is trapped, the game is over. At the end of the game, each player gets a point for each checker of their own color adjacent to, or underneath, the pawn. The person with the highest score wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Trike\"\n    (players 2)\n    (equipment\n        {\n            (board (hex Triangle 13))\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (meta (swap))\n        phases:{\n            (phase\n                \"Opening\"\n                P1\n                (play\n                    (move Add (to (sites Empty)) (then (set Var (last To))))\n                )\n                (nextPhase)\n            )\n            (phase\n                \"Play\"\n                (play\n                    (move\n                        Add\n                        (to (sites LineOfSight Empty at:(var)))\n                        (then (set Var (last To)))\n                    )\n                )\n            )\n        }\n        (end\n            (if\n                (no Moves Next)\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+\n                                (if (is Mover P1) 1 0)\n                                (count\n                                    Sites\n                                    in:(intersection\n                                        (sites Around (last To))\n                                        (sites Occupied by:P1)\n                                    )\n                                )\n                            )\n                        )\n                        (score\n                            P2\n                            (+\n                                (if (is Mover P2) 1 0)\n                                (count\n                                    Sites\n                                    in:(intersection\n                                        (sites Around (last To))\n                                        (sites Occupied by:P2)\n                                    )\n                                )\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHexade is Havannah's tactical support act. It does in fact somewhat hold the middle between this game and Gary Gabrel's Pente. It's very easy to learn, because its strategy is fairly straightforward. Tacticians will find it very rewarding.\n</description>\n<rules>\nA pure game of laying with three possible win configurations: a line of six, a triangle of six, or a punctured hexagon of six.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Hexade\"\n    (players 2)\n    (equipment\n        {\n            (board (hex 8))\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (meta (swap))\n        (play\n            (move\n                Add\n                (to (sites Empty))\n                (then\n                    (custodial\n                        (from (last To))\n                        All\n                        (between\n                            if:(is Next (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to\n                            if:(and\n                                (or\n                                    (=\n                                        2\n                                        (count Steps Cell All (last To) (to))\n                                    )\n                                    (=\n                                        3\n                                        (count Steps Cell All (last To) (to))\n                                    )\n                                )\n                                (is Mover (who at:(to)))\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (or\n                    {\n                        (is Pattern { F R F R F R F R F })\n                        (is Line 6)\n                        (is Pattern { F F R R F F R R F })\n                        (is Pattern { F R R F F R R F F })\n                    }\n                )\n                (result Mover Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCumisitha is a game that was played by the Aymara people of southern Peru and Bolivia in the seventeenth century. It was described by chroniclers as similar to the Game of the Goose, but different in many ways, as well as similar to Chess and Alquerque.\n</description>\n<rules>\n\"Board game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Cumisitha\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board\n                (add\n                    (rotate\n                        180\n                        (merge\n                            (shift 0 2 (square 5 diagonals:Alternating))\n                            (wedge 3)\n                        )\n                    )\n                    edges:{ { 27 29} { 29 25 } }\n                )\n                use:Vertex\n            )\n            (piece \"Jaguar\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Dog\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Dog2\"\n                    (union\n                        (expand (sites Bottom) steps:1)\n                        (sites {\"A3\" \"E3\"})\n                    )\n                )\n                (place \"Jaguar1\" coord:\"C7\")\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (<= (count Pieces P2) 6) (result P2 Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game was played on the island of Selayar, Indonesia during the nineteenth century.\n</description>\n<rules>\n\"5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. Sixteen pieces per player, each side arranged on one side of the board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Selayar Game\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (square 5 diagonals:Alternating)\n                        (shift 0 4 (rotate 180 (wedge 3)))\n                        (shift 0 -2 (wedge 3))\n                    }\n                )\n                use:Vertex\n            )\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Empty (to)))\n                    (then\n                        (and\n                            (custodial\n                                (from (last To))\n                                Orthogonal\n                                (between\n                                    (max 1)\n                                    if:(is Enemy (who at:(between)))\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Friend (who at:(to))))\n                            )\n                            (surround\n                                (from (last To))\n                                Orthogonal\n                                (between\n                                    if:(and\n                                        (is Enemy (who at:(between)))\n                                        (is In (between) (sites Corners))\n                                    )\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Friend (who at:(to))))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (union (sites Bottom) (expand (sites Row 2)))\n                )\n                (place \"Marker2\" (union (sites Top) (expand (sites Row 6))))\n            }\n        )\n        (play (forEach Piece top:True))\n        (end\n            {\n                (if (no Moves P2) (result P1 Win))\n                (if (< (count Pieces P1) 2) (result P2 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nUfuba wa Hulana is a game that was played in Comoros during the seventeenth century.\n</description>\n<rules>\n\"5x5 board. Twelve pieces per player. Players alternate turns placing a piece on the board. When the pieces are placed, pieces are captured.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ufuba wa Hulana\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5))\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Empty (to)))\n                    (then\n                        (custodial\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                (max 1)\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Friend (who at:(to))))\n                        )\n                    )\n                )\n            )\n            (hand Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nEleven-Fang is a game played in China. Though the game was described in the late twentieth century, it is likely to be much older, since a board belonging to it was found in a Tang Dynasty tomb, but which could date up to 1936.\n</description>\n<rules>\n\"11x11 intersecting lines.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Eleven-Fang\"\n    (players 2)\n    (equipment\n        {\n            (board (square 11) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (or\n                    (if\n                        (=\n                            1\n                            (+\n                                (count Cell at:(handSite Mover))\n                                (count Pieces Mover)\n                            )\n                        )\n                        (move\n                            Hop\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Empty (to)))\n                        )\n                    )\n                    (move\n                        Slide\n                        (then\n                            (custodial\n                                (from (last To))\n                                (between\n                                    (range 1 (count Rows))\n                                    if:(is Enemy (who at:(between)))\n                                    (apply\n                                        (and\n                                            (remove (between))\n                                            (fromTo\n                                                (from (handSite Mover))\n                                                (to (between))\n                                            )\n                                        )\n                                    )\n                                )\n                                (to if:(is Friend (who at:(to))))\n                            )\n                        )\n                    )\n                )\n            )\n            (hand Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker\" \"Hand\" count:16)\n                (place\n                    \"Marker1\"\n                    (union\n                        (sites Top)\n                        (difference (sites Right) (sites Bottom))\n                    )\n                )\n                (place\n                    \"Marker2\"\n                    (union\n                        (sites Bottom)\n                        (difference (sites Left) (sites Top))\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThe Ludus Rebellionis appears in a sixteenth century Italian manuscript, with three different diagrams. This version is of an asymmetric game, where a King and Queen play against sixteen Pawns.\n</description>\n<rules>\n\"8x8 board. One player plays with a King and Queen, the other as sixteen Pawns. The King begins on the top right corner of the board, the queen on the space to the right of the top left corner of the board. The Pawns begin on alternating squares on the first four rows of the board, starting on the bottom left corner.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ludus Rebellionis (Asymmetric)\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Queen\"\n                P1\n                (move\n                    Step\n                    (to\n                        if:(not (is Friend (who at:(to))))\n                        (apply (if (is Enemy (who at:(to))) (remove (to))))\n                    )\n                )\n            )\n            (piece \"King\"\n                P1\n                (move\n                    Step\n                    (to\n                        if:(not (is Friend (who at:(to))))\n                        (apply (remove (to)))\n                    )\n                )\n            )\n            (piece \"Pawn\" P2 (move Step Forward (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"King1\" coord:\"H8\")\n                (place \"Queen1\" coord:\"B8\")\n                (place\n                    \"Pawn2\"\n                    (difference\n                        (expand (sites Bottom) steps:3)\n                        (sites Phase 1)\n                    )\n                )\n            }\n        )\n        (play\n            (do\n                (forEach Piece)\n                ifAfterwards:(not (is Threatened (id \"King\" Mover)))\n                (then\n                    (if\n                        (and\n                            (= 1 (state at:(where \"King\" Next)))\n                            (is Threatened (id \"King\" Next))\n                        )\n                        (set State at:(where \"King\" Next) 0)\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nApit is a capturing game played in Malaysia in the early twentieth century.\n</description>\n<rules>\n\"8x8 board. An opponent's piece may be captured when it is surrounded on opposite sides by two of the player's pieces. When a player moves a piece between two of the opponent's pieces, both of the opponent's pieces are taken.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Apit\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Marker\"\n                Each\n                (move\n                    Slide\n                    Orthogonal\n                    (then\n                        (and\n                            (intervene\n                                (from (last To))\n                                Orthogonal\n                                (to\n                                    if:(is Enemy (who at:(to)))\n                                    (apply (remove (to)))\n                                )\n                            )\n                            (custodial\n                                (from (last To))\n                                Orthogonal\n                                (between\n                                    if:(is Enemy (who at:(between)))\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Friend (who at:(to))))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (union\n                        {\n                            (sites Row 0)\n                            (sites Row 1)\n                            (sites Row 2)\n                            (sites Row 3)\n                        }\n                    )\n                )\n                (place\n                    \"Marker2\"\n                    (union\n                        {\n                            (sites Row 5)\n                            (sites Row 6)\n                            (sites Row 7)\n                            (sites Row 8)\n                        }\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLu Qi is a game played in medieval China. It was played on a board well-attested throughout Asia and Europe, and was often found next to patterns for Merels games.\n</description>\n<rules>\n\"5x5 lines forming a grid. Diagonals drawn in each quadrant.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Lu Qi\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Marker\"\n                P1\n                (move\n                    Step\n                    (to\n                        if:(and\n                            (is Empty (to))\n                            (not (is In (to) (expand (sites Bottom) steps:2)))\n                        )\n                    )\n                )\n            )\n            (piece \"Marker\"\n                P2\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (meta (no Repeat))\n        (play\n            (or\n                (do\n                    (move\n                        Add\n                        (to (sites Empty))\n                        (then\n                            (enclose\n                                (from (last To))\n                                Orthogonal\n                                (between\n                                    if:(is Enemy (who at:(between)))\n                                    (apply\n                                        (and\n                                            (addScore Mover 1)\n                                            (remove (between))\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                    ifAfterwards:(> (count Liberties Orthogonal) 0)\n                )\n                (move Pass)\n            )\n        )\n        (end\n            (if\n                (all Passed)\n                (byScore\n                    {\n                        (score P1 (+ (score P1) (size Territory P1)))\n                        (score P2 (+ (score P2) (size Territory P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTapt\u00e1na was a game played in Peru. Famously, it is said to have been played by the last Inka emperor, Atahualpa, while he was imprisoned. The board is very similar to Spanish Alquerque, and cannot be dated to before the Spanish conquest.\n</description>\n<rules>\n\"Played on an Alquerque board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Taptana\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Marker\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Marker\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSmasandyutakankarikrida is a game with leaping captures played in India. It was forbidden to be played in the home, and only was played in lonely places like a cemetery or forest.\n</description>\n<rules>\n\"5x5 intersecting lines, with diagonals in the four quadrants. Triangles on opposite sides of the board, with the apex intersecting with the midpoint of the side. A line from the apex bisecting the base, and a line bisecting this line and the opposite sides of the triangle. Sixteen pieces per player, which begin on opposite sides of the board. Pieces are captured by hopping over an adjacent opponent's piece to an empty spot immediately on the opposite side of the opponent's piece. The player who reduces their opponent to four pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Smasandyutakankarikrida\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (shift -2 -4 (wedge 5))\n                        (rectangle 5 5 diagonals:Alternating)\n                        (shift -2 4 (rotate 180 (wedge 5)))\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Marker\"\n                Each\n                (or\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Marker1\"\n                    (union\n                        (expand (sites Bottom) steps:1)\n                        (expand origin:(coord \"I3\") steps:5 W)\n                    )\n                )\n                (place\n                    \"Marker2\"\n                    (union\n                        (expand (sites Top) steps:1)\n                        (expand origin:(coord \"A7\") steps:5 E)\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAiyawatstani is a capturing game played at the Acoma Pueblo of New Mexico. According to oral tradition, it came with the Acoma people when they came from the north.\n</description>\n<rules>\n\"5x5 intersecting lines, with diagonals in each small square. Twenty-two pieces per player, one black and one white, arranged on the four rows (counting the points where diagonals cross as rows) closest to each player; the central point remains empty, the black player places two pieces on the outer points and the white player places two on the inner two points.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Aiyawatstani\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5 diagonals:Solid) use:Vertex)\n            (piece \"Counter\"\n                Each\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Counter1\"\n                    (union\n                        {\n                            (sites {\"C5\" \"G5\"})\n                            (sites Row 0)\n                            (sites Row 1)\n                            (sites Row 2)\n                            (sites Row 3)\n                        }\n                    )\n                )\n                (place\n                    \"Counter2\"\n                    (union\n                        {\n                            (sites {\"A5\" \"I5\"})\n                            (sites Row 5)\n                            (sites Row 6)\n                            (sites Row 7)\n                            (sites Row 8)\n                        }\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTotol\u00f3spi is the name used for at least two games played by the Hopi of Arizona. This game is poorly described, but it is played on a square board with 55 pieces per player, and appears to be a capturing game.\n</description>\n<rules>\n\"11x11 lines, with a diagonal from the top left corner to the bottom right corner. 55 pieces per player, arranged on either side of the diagonal on the intersections. Pieces may move along the diagonal, but not across it. Players may move one or more pieces, based on certain positions the pieces are in. Opponent's pieces may be captured. Pieces always move toward the bottom right corner.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Totolospi (War)\"\n    (players { (player NE) (player SW) })\n    (equipment\n        {\n            (board\n                (add\n                    (square 11)\n                    edges:{\n                        {10 20} {20 30} {30 40} {40 50} {50 60} {60 70}\n                        {70 80} {80 90} {90 100} {100 110}\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Counter\"\n                Each\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Counter1\"\n                    (expand\n                        (intersection (sites Bottom) (sites Left))\n                        steps:9\n                    )\n                )\n                (place\n                    \"Counter2\"\n                    (expand (intersection (sites Top) (sites Right)) steps:9)\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDame is a Draughts game played in Poland. It is not the game colloquially known as Polish Draughts, which probably originated in France.\n</description>\n<rules>\n\"8x8 board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Dame\"\n    (players { (player N) (player S) })\n    (equipment\n        {\n            (board (square 8))\n            (piece \"Counter\"\n                Each\n                (or\n                    {\n                        (move Step Diagonal (to if:(is Empty (to))))\n                        (move\n                            Hop\n                            Diagonal\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Empty (to)))\n                        )\n                        (do\n                            (move\n                                Hop\n                                Orthogonal\n                                (between\n                                    before:1\n                                    after:2\n                                    if:(is Enemy (who at:(between)))\n                                    (apply (remove (between)))\n                                )\n                                (to if:(is Empty (to)))\n                            )\n                            ifAfterwards:(is In (last To) (sites Phase 0))\n                        )\n                    }\n                    (then\n                        (if\n                            (is In (last To) (sites Next))\n                            (promote (last To) (piece \"DoubleCounter\") Mover)\n                        )\n                    )\n                )\n            )\n            (piece \"DoubleCounter\"\n                Each\n                (or\n                    (move Slide)\n                    (move\n                        Hop\n                        (between\n                            before:(count Rows)\n                            after:(count Rows)\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Counter1\"\n                    (difference\n                        (expand (sites Bottom) steps:(- 3 1))\n                        (sites Phase 1)\n                    )\n                )\n                (place\n                    \"Counter2\"\n                    (difference\n                        (expand (sites Top) steps:(- 3 1))\n                        (sites Phase 1)\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nRaquilthue is a game played by the Ca\u00f1icul Mapuche community in Argentina. It is a hunt game, of a type popular among indigenous communities in the region. One player plays as a single lion, and the other as fourteen dogs.\n</description>\n<rules>\n\"7x7 grid, connected to a smaller 5x5 grid with a line connecting the two at their center lines. One player plays as one lion, which begins on the central spot of the top line of the smaller grid, the other as fourteen dogs, which begin on the points of the bottom two lines of the larger grid. Pieces move along the lines of the board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Raquithue\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (merge { (rectangle 4 7) (shift 1 4.5 (rectangle 4 5)) })\n                    edges:{ { 24 30} }\n                )\n                use:Vertex\n            )\n            (piece \"Lion\"\n                P1\n                (or\n                    {\n                        (move\n                            Hop\n                            Orthogonal\n                            (between\n                                if:(and\n                                    (is Enemy (who at:(between)))\n                                    (not\n                                        (is\n                                            In\n                                            (between)\n                                            (union (sites Bottom) (sites Top))\n                                        )\n                                    )\n                                )\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Empty (to)))\n                        )\n                        (move Step Orthogonal (to if:(is Empty (to))))\n                        (if\n                            (= 1 (state at:(from)))\n                            (move\n                                Slide\n                                Orthogonal\n                                (between (exact 2) if:(is Empty (between)))\n                                (then (set State at:(last To) 0))\n                            )\n                        )\n                    }\n                )\n            )\n            (piece \"Dog\"\n                P2\n                (move\n                    Hop\n                    Orthogonal\n                    (between\n                        if:(and\n                            (is Enemy (who at:(between)))\n                            (not\n                                (is\n                                    In\n                                    (between)\n                                    (union (sites Bottom) (sites Top))\n                                )\n                            )\n                        )\n                        (apply (remove (between)))\n                    )\n                    (to if:(is Empty (to)))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Lion1\" (sites {\"D8\"}))\n                (place \"Dog2\" (expand (sites Bottom)))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (<= (count Pieces Next) 3) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTalyn Buga (Plains deer) is hunt game played in Mongolia.\n</description>\n<rules>\n\"5x9 intersecting lines, with diagonals in each 3x3 square of the board. On one short side, a square with diagonals, with one corner as the midpoint of one of the sides of the main board. on the other short side, a triangle, with a line bisecting the base and another bisecting this line and intersecting with the other two sides of the triangle. The triangle's apex is the midpoint of the opposite side as the square. One player plays as two deer, one of which which begins on a point in the small square intersecting with the main board, the other in the triangle. The other player plays with 22, 24, or 26 hunters, half of which begin in the main part of the board. Pieces move to an adjacent empty spot along the lines of the board. The deer may capture an adjacent dog by hopping over it to an empty space immediately on the opposite side of it along the lines of the board. The player playing as the hunters may place a remaining piece on an empty spot on the board as their turn. The goal of the deer is to capture all of the dogs, the goal of the dogs is to block the deer from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Talyn Buga\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (rotate 45 (shift 1.5 8.2 (square 2 diagonals:Solid)))\n                        (shift 0.67 -1.32 (scale 0.66 (wedge 3)))\n                        (rectangle 9 5 diagonals:Alternating)\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Deer\"\n                P1\n                (and\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n            (piece \"Dog\" P2 (move Step (to if:(is Empty (to)))))\n            (hand P2)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Deer1\" (sites {\"C11\" \"C3\"}))\n                (place\n                    \"Dog2\"\n                    (forEach\n                        (sites Outer)\n                        if:(not\n                            (is\n                                In\n                                (site)\n                                (expand\n                                    (union (sites Top) (sites Bottom))\n                                    steps:2\n                                )\n                            )\n                        )\n                    )\n                )\n                (place \"Dog2\" (handSite P2) count:13)\n            }\n        )\n        (play\n            (or\n                (forEach Piece)\n                (if\n                    (is Mover P2)\n                    (move (from (handSite P2)) (to (sites Empty)))\n                )\n            )\n        )\n        (end\n            {\n                (if (no Moves P1) (result P2 Win))\n                (if (no Pieces P2) (result P1 Win))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFortresse is a game played in Switzerland. It is similar to the game Asalto, but is played with fewer pieces.\n</description>\n<rules>\n\"The game Fortresse is played by two players on a noshape board with nobasis tiling. All players play with Markers. Rules for Pieces: Markers step adjacent. Players take turns moving. Setup: Place a Marker for player one at the vertexes with coordinates [C6, E6]. Place a Marker for player two at the union of each vertex of the 2 row and the bottom sites of the board expanded by 2 steps.. Rules: Move one of your pieces. Aim: If there are no pieces owned by Player 2, player one wins If there are no pieces owned by Player 1 or player one cannot move or 0 is equal to the number of sites in the difference between the top sites of the board expanded by 2 steps and sites occupied by any component owned by P2, player two wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Fortresse\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    (shift\n                        0\n                        (/ (- 7 3) 2)\n                        (rectangle 3 7 diagonals:Alternating)\n                    )\n                    (shift\n                        (/ (- 7 3) 2)\n                        0\n                        (rectangle 7 3 diagonals:Alternating)\n                    )\n                )\n                use:Vertex\n            )\n            (piece \"Marker\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Marker\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (sites {\"C6\" \"E6\"}))\n                (place\n                    \"Marker2\"\n                    (union (sites Row 2) (expand (sites Bottom) steps:2))\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Pieces P2) (result P1 Win))\n                (if\n                    (or\n                        (or (no Pieces P1) (no Moves P1))\n                        (=\n                            0\n                            (count\n                                Sites\n                                in:(difference\n                                    (expand (sites Top) steps:2)\n                                    (sites Occupied by:P2)\n                                )\n                            )\n                        )\n                    )\n                    (result P2 Win)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLay Gwet Kyah is a hunt game played in Myanmar during the nineteenth century.\n</description>\n<rules>\n\"Played on a board with 4x4 squares. Unsure whether played on the lines or the spaces. One player plays as three tigers (larger pieces), while the other plays as eleven or twelve smaller pieces. The tigers may hop over a smaller piece to capture it. The goal of the tigers is to capture the little pieces, the goal of the little pieces is to block the tigers from being able to move.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Lay Gwet Kyah\"\n    (players 2)\n    (equipment\n        {\n            (board (square 5) use:Vertex)\n            (piece \"Tiger\"\n                P1\n                (and\n                    (move Step (to if:(is Empty (to))))\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                )\n            )\n            (piece \"Marker\" P2 (move Step (to if:(is Empty (to)))))\n            (hand Each)\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Tiger1\" (handSite P1) count:3)\n                (place \"Marker2\" (handSite P2) count:12)\n            }\n        )\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (and\n                        (all\n                            Sites\n                            (sites Hand P1)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                        (all\n                            Sites\n                            (sites Hand P2)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play (forEach Piece))\n                (end\n                    {\n                        (if (no Moves P1) (result P2 Win))\n                        (if (no Pieces P2) (result P1 Win))\n                    }\n                )\n            )\n        }\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nKuang (\\\"Jackrabbit\\\") is a game that was played at by the people of the Santa Clara Pueblo in New Mexico.\n</description>\n<rules>\n\"5x5 intersecting lines, with diagonals drawn in each quadrant. One player plays with a single piece, placed in the central point. The other player plays with twelve pieces, beginning on the first two rows and one piece on each end of the central row.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Kuang\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 5 diagonals:Alternating) use:Vertex)\n            (piece \"Marker\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Marker\"\n                P2\n                (move Step (directions { FR FL }) (to if:(is Empty (to))))\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (sites Centre))\n                (place\n                    \"Marker2\"\n                    (union\n                        (intersection\n                            (union (sites Left) (sites Right))\n                            (sites Row 2)\n                        )\n                        (expand (sites Bottom))\n                    )\n                )\n            }\n        )\n        (play (forEach Piece))\n        (end (if (no Moves Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nComina is a strategy game played in sixteenth and seventeenth century South America.\n</description>\n<rules>\n\"Board game. Not played with dice.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Comina\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (rotate\n                        180\n                        (merge\n                            (shift 0 2 (square 5 diagonals:Alternating))\n                            (wedge 3)\n                        )\n                    )\n                    edges:{ { 27 29} { 29 25 } }\n                )\n                use:Vertex\n            )\n            (piece \"Jaguar\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Dog\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Dog2\"\n                    (union\n                        (expand (sites Bottom) steps:1)\n                        (sites {\"A3\" \"E3\"})\n                    )\n                )\n                (place \"Jaguar1\" coord:\"C7\")\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (<= (count Pieces P2) 6) (result P2 Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCumi is a hunt game played in Bolivia. It is described in Aymara-Spanish dictionaries as the game known in Spanish as \\\"Lion and Sheep.\\\"\n</description>\n<rules>\n\"Hunt game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Cumi\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3))\n                use:Vertex\n            )\n            (piece \"Jaguar\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Dog\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Dog2\"\n                    (union\n                        (expand (sites Bottom) steps:1)\n                        (sites {\"A3\" \"E3\"})\n                    )\n                )\n                (place \"Jaguar1\" coord:\"C7\")\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Pieces Next) (result Next Loss))\n                (if (is Triggered \"Draw\" Mover) (result Mover Draw))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSolitario is a game that was played in Peru in the nineteenth century. The rules of how to play were not documented, but the board is known.\n</description>\n<rules>\n\"5x5 intersecting lines. A triangle intersects with the midpoint of one of the sides. A line connects the apex with the base, and another line bisects this line and intersects with the two sides of the triangle. A hunt game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Solitario\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (merge\n                    {\n                        (square 5)\n                        (shift 0.5 4 (rotate 180 (scale 0.75 1.5 (wedge 3))))\n                    }\n                )\n                use:Vertex\n            )\n            (piece \"Marker\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                        (then\n                            (if\n                                (can\n                                    Move\n                                    (hop\n                                        (from (last To))\n                                        (between\n                                            if:(and\n                                                (not\n                                                    (is\n                                                        In\n                                                        (between)\n                                                        (sites ToClear)\n                                                    )\n                                                )\n                                                (is Enemy (who at:(between)))\n                                            )\n                                        )\n                                        (to if:(is Empty (to)))\n                                    )\n                                )\n                                (moveAgain)\n                            )\n                        )\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Marker\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPuma is a game played in South America and mentioned by Spanish chroniclers, who did not describe the game in detail.\n</description>\n<rules>\n\"The game Puma is played by two players on a noshape board with nobasis tiling. Player one plays with Jaguars. Player two plays with Dogs. Rules for Pieces: Dogs step adjacent. Jaguars hop adjacent or step adjacent. Players take turns moving. Setup: Place a Dog for player two at the union of the bottom sites of the board expanded by 1 steps and the vertexes with coordinates [A3, E3]. Place a Jaguar for player one on site C7.. Rules: Move one of your pieces. Aim: If the next player cannot move, the next player loses If the number of pieces owned by Player 2 is less than or equal to 6, player two loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Puma\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (add\n                    (rotate\n                        180\n                        (merge\n                            (shift 0 2 (square 5 diagonals:Alternating))\n                            (wedge 3)\n                        )\n                    )\n                    edges:{ { 27 29} { 29 25 } }\n                )\n                use:Vertex\n            )\n            (piece \"Jaguar\"\n                P1\n                (or\n                    (move\n                        Hop\n                        (between\n                            if:(is Enemy (who at:(between)))\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Dog\" P2 (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start\n            {\n                (place\n                    \"Dog2\"\n                    (union\n                        (expand (sites Bottom) steps:1)\n                        (sites {\"A3\" \"E3\"})\n                    )\n                )\n                (place \"Jaguar1\" coord:\"C7\")\n            }\n        )\n        (play (forEach Piece))\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (<= (count Pieces P2) 6) (result P2 Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMak Khom is a two-row mancala-style baord game played in Thailand in the nineteenth century.\n</description>\n<rules>\n\"2x7 board. Seven counters in each hole. Sowing occurs in an anti-clockwise direction. In the first move, each player takes the contents of the leftmost hole and sows them except for the last counter, which is set aside. When sowing, players may take the entire contents of a hole, or only part of them. The players agree on a number of counters which need to be captured in order to win.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Mak Khom\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 7 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (piece \"Seed\" Shared)\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (map { (pair P1 FirstSite) (pair P2 LastSite) })\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 7 to:(sites Track)))\n        phases:{\n            (phase\n                \"Opening\"\n                (play\n                    (move\n                        Select\n                        (from (mapEntry Mover))\n                        (then (sow origin:True))\n                    )\n                )\n                (nextPhase Mover \"Playing\")\n            )\n            (phase\n                \"Playing\"\n                (play\n                    (move\n                        Select\n                        (from (sites Mover) if:(< 0 (count at:(from))))\n                        (then\n                            (sow\n                                if:(= (count at:(to)) 1)\n                                apply:(fromTo\n                                    (from (to))\n                                    (to (handSite Mover))\n                                    count:(count at:(to))\n                                )\n                                backtracking:True\n                            )\n                        )\n                    )\n                )\n                (end\n                    (if\n                        (no Moves Mover)\n                        (byScore\n                            {\n                                (score\n                                    P1\n                                    (+\n                                        (count at:(mapEntry P1))\n                                        (count in:(sites P1))\n                                    )\n                                )\n                                (score\n                                    P2\n                                    (+\n                                        (count at:(mapEntry P2))\n                                        (count in:(sites P2))\n                                    )\n                                )\n                            }\n                        )\n                    )\n                )\n            )\n        }\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nA-i-\u00fa is a mancala-style board game that was played in Brazil at least until the early twentieth century.\n</description>\n<rules>\n\"Twelve holes.\n</rules>\n</query>\n</task>",
        "solution": "(game \"A-i-u\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"0,E,N,W\" loop:True))\n            (piece \"Seed\" Shared)\n            (hand Each)\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n        }\n    )\n    (rules\n        (start (set Count 4 to:(union (sites Bottom) (sites Top))))\n        (play\n            (do\n                (move\n                    Select\n                    (from (sites Mover) if:(< 0 (count at:(from))))\n                    (then\n                        (sow\n                            if:(and\n                                (is In (to) (sites Next))\n                                (or\n                                    (= (count at:(to)) 2)\n                                    (= (count at:(to)) 3)\n                                )\n                            )\n                            apply:(fromTo\n                                (from (to))\n                                (to (handSite Mover))\n                                count:(count at:(to))\n                            )\n                            includeSelf:False\n                            backtracking:True\n                        )\n                    )\n                )\n                ifAfterwards:(< 0 (count in:(sites Next)))\n            )\n        )\n        (end\n            (if\n                (no Moves Next)\n                {\n                    (if\n                        (< (count Cell at:(handSite Next)) 50)\n                        (result Mover Win)\n                    )\n                    (if\n                        (>= (count Cell at:(handSite Next)) 50)\n                        (result Mover Draw)\n                    )\n                }\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nManddiar\u00e9 is a two-row mancala-style board game played in Mauritania but women amd young girls. Sometimes boys would play it to get to know girls, but this would not occur in public spaces.\n</description>\n<rules>\n\"The game Manddiare is played by two players on a 2 x 8 Mancala board with 2 outer stores. Regions: RegionP1: the bottom sites of the board for P1 RegionP2: the top sites of the board for P2 All players play with null The following pieces are shared by all players: Seeds. Players take turns moving. Setup: Set the count of the vertexes in track of board to 6. Rules: Select Vertex in RegionP1 or RegionP2 if 0 is less than the total number of vertex in the location of the piece then Sow with the following rules, startLoc: the to location of the last move, countFn: the total number of vertex in the to location of the last move, numPerHoleFn: 1, origin: false, captureRule: to is in RegionP1 or RegionP2 and the total number of vertex in to is equal to 2 or the total number of vertex in to is equal to 3, backtracking: true, captureEffect: from vertex in to to vertex null of current moving player moveRule: true, type: Vertex, includeSelf: false. Aim: If the moving player cannot move, the next player wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Manddiare\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 8 (track \"Track\" \"1,E,N,W\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (map { (pair P1 FirstSite) (pair P2 LastSite) })\n            (piece \"Seed\" Shared)\n        }\n    )\n    (rules\n        (start (set Count 6 to:(sites Track)))\n        (play\n            (do\n                (move\n                    Select\n                    (from (sites Mover) if:(< 0 (count at:(from))))\n                    (then\n                        (sow\n                            if:(and\n                                (is In (to) (sites Next))\n                                (or\n                                    (= (count at:(to)) 2)\n                                    (= (count at:(to)) 3)\n                                )\n                            )\n                            apply:(fromTo\n                                (from (to))\n                                (to (mapEntry (mover)))\n                                count:(count at:(to))\n                            )\n                            includeSelf:False\n                            backtracking:True\n                        )\n                    )\n                )\n                ifAfterwards:(< 0 (count in:(sites Next)))\n            )\n        )\n        (end (if (no Moves Mover) (result Next Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game was played on the River Gambia in the early seventeenth century. It is one of the earliest documented mancala-style board games. It was played outside, under shady trees, by men of the Mandinka people.\n</description>\n<rules>\n\"Board with large holes. Around thirty counters. Counters are captured. The player who captures the most counters wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Mandinka Game\"\n    (players 2)\n    (equipment\n        {\n            (mancalaBoard 2 6 store:None (track \"Track\" \"5,W,N,E\" loop:True))\n            (regions P1 (sites Bottom))\n            (regions P2 (sites Top))\n            (piece \"Seed\" Shared)\n            (hand Each)\n        }\n    )\n    (rules\n        (start (set Count 6 to:(sites Track)))\n        (play\n            (if\n                (is Proposed \"End\")\n                (or (move Vote \"End\") (move Vote \"No\"))\n                (or\n                    (if (is Cycle) (move Propose \"End\"))\n                    (do\n                        (move\n                            Select\n                            (from (sites Mover) if:(< 0 (count at:(from))))\n                            (then\n                                (sow\n                                    if:(and\n                                        (is In (to) (sites Next))\n                                        (or\n                                            (= (count at:(to)) 2)\n                                            (= (count at:(to)) 3)\n                                        )\n                                    )\n                                    apply:(fromTo\n                                        (from (to))\n                                        (to (handSite Mover))\n                                        count:(count at:(to))\n                                    )\n                                    includeSelf:False\n                                    backtracking:True\n                                )\n                            )\n                        )\n                        ifAfterwards:(< 0 (count in:(sites Next)))\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (or (no Moves Mover) (is Decided \"End\"))\n                (byScore\n                    {\n                        (score\n                            P1\n                            (+\n                                (count Cell at:(handSite P1))\n                                (count in:(sites P1))\n                            )\n                        )\n                        (score\n                            P2\n                            (+\n                                (count Cell at:(handSite P2))\n                                (count in:(sites P2))\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPaitaiya is a game that was played at Cochit\u00ed Pueblo, New Mexico.\n</description>\n<rules>\n\"Three concentric squares, with lines connecting the midpoints of the sides, extending beyond the outer square.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Paitariya\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move Step (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (play (move Add (to (sites Empty))))\n        (end (if (is Line 3) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nQirq is a simple game of alignment played in Southwest Asia. Though the game is of a type worldwide, and is likely older, This version is the earliest known name for the game.\n</description>\n<rules>\n\"Name of game. 3x3 intersecting lines. Pieces are placed on the lines.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Qirq\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move (from) (to (sites Empty))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3 Orthogonal) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAdzua is a word used for several games by the Jukun people of Nigeria. This version is an alignment game played by children.\n</description>\n<rules>\n\"3x3 board rendered as holes in the ground. Four pieces per player. When a player makes a line of three holes with their pieces, they remove one of the opponent's pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Adzua (Children)\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n            (hand Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:4))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Next container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Next container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDris et-Tessa is a game played in eighteenth century Egypt. The board used is similar to others used throughout the world for alignment games.\n</description>\n<rules>\n\"Three concentric squares, with lines connecting their corners and the midpoints of each side.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Dris et-Tessa (Diagonals)\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDiris is an alignment game played in Persia during the seventeenth century.\n</description>\n<rules>\n\"Three consecutive squares, with lines connecting the corners and the midpoints of the sides of the squares.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Diris\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move Step Orthogonal (to if:(is Empty (to))))\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        (play\n            (or\n                (if\n                    (not\n                        (all\n                            Sites\n                            (sites Hand Mover)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                    )\n                    (move (from (handSite Mover)) (to (sites Empty)))\n                )\n                (forEach Piece)\n            )\n        )\n        (end (if (is Line 3 Orthogonal) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAl-Qirq is an alignment game played in southwest Asia.\n</description>\n<rules>\n\"Three concentric squares, with lines connecting the corners and the midpoints of the sides. Nine pieces per player. Players attempt to place three pieces in a line.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Al-Qirq\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAdzua is a game played by men of the Jukun people in Nigeria.\n</description>\n<rules>\n\"5x6 board, rendered as holes in the ground. Twelve pieces per player. Players alternate turns placing a piece in one of the holes. When a player succeeds in making a line of three holes with their pieces, they capture one of the opponent's pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Adzua\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 5 6) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n            (hand Each)\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Next container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Next container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nYakamaido is a game that was played by the Mono people of California during the nineteenth or early twentieth century.\n</description>\n<rules>\n\"Three concentric squares, with lines connecting the corners and the midpoints of the sides.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Yakamaido\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to (sites Empty))\n                        (then\n                            (if\n                                (and\n                                    (is Line 3)\n                                    (not\n                                        (all\n                                            Sites\n                                            (sites Hand Mover)\n                                            if:(= 0 (count Cell at:(site)))\n                                        )\n                                    )\n                                )\n                                (moveAgain)\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    (and\n                        (all\n                            Sites\n                            (sites Hand P1)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                        (all\n                            Sites\n                            (sites Hand P2)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play (forEach Piece))\n                (nextPhase Mover (is Line 3) \"Capture\")\n            )\n            (phase\n                \"Capture\"\n                (play\n                    (move\n                        Remove\n                        (sites Occupied by:Enemy container:\"Board\")\n                        (then (moveAgain))\n                    )\n                )\n                (nextPhase Mover \"Movement\")\n            )\n        }\n        (end\n            (forEach\n                Player\n                if:(<= (count Pieces Player) 2)\n                (result Player Loss)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDris et-Tessa is a game played in Egypt during the eighteenth century. It is played on a board commonly used worldwide for alignment games.\n</description>\n<rules>\n\"Three concentric squares, with lines connecting the midpoints of the sides.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Dris et-Tessa\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDuqurjin is an alignment game played in Turkey.\n</description>\n<rules>\n\"Large merels game.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Duqurjin\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    Orthogonal\n                    (to if:(is Empty (to)))\n                    (then\n                        (custodial\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                (max 1)\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                            (to if:(is Friend (who at:(to))))\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (move\n                        (from (handSite Mover))\n                        (to (difference (sites Empty) (centrePoint)))\n                        (then (if (not (is Prev Mover)) (moveAgain)))\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSgjough is a larger merels game played in Armenia during the seventeenth century.\n</description>\n<rules>\n\"Three concentric squares with lines connecting the midpoints of the sides.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Sgjough\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPicaria is the a word referring to two games played by the people of Isleta Pueblo in New Mexico. This version is the larger board, though the specific rules have not been recorded.\n</description>\n<rules>\n\"Two concentric squares, with lines connecting the midpoints of the squares, but which extend beyond the edge of the outer square.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Picaria (Large)\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:6))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLian Qi is a name used for alignment games in China. This version, smaller than typically found in China, comes from the Bohai State period of Manchuria.\n</description>\n<rules>\n\"Two concentric squares, with lines connecting the corners and the midpoints of the sides.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Lian Qi (Bohai)\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:2 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then\n                        (if\n                            (or\n                                {\n                                    (is Line 3 N exact:True)\n                                    (is Line 3 S exact:True)\n                                    (is Line 3 E exact:True)\n                                    (is Line 3 W exact:True)\n                                }\n                            )\n                            (moveAgain)\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:9))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (or\n                                        {\n                                            (is Line 3 N exact:True)\n                                            (is Line 3 S exact:True)\n                                            (is Line 3 E exact:True)\n                                            (is Line 3 W exact:True)\n                                        }\n                                    )\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (if\n                            (> (count Pieces Mover) 4)\n                            (forEach Piece)\n                            (move\n                                (from (sites Occupied by:Mover))\n                                (to (sites Empty))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nChe Lo is a small alignment game played in early modern China.\n</description>\n<rules>\n\"3x3 intersecting lines, with diagonals. Three pieces per player, which begin on opposite sides of the board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Che Lo\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then\n                        (if\n                            (is Line 3 if:(= 1 (size Stack at:(to))))\n                            (moveAgain)\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            { (place \"Marker1\" (sites Bottom)) (place \"Marker2\" (sites Top)) }\n        )\n        (play\n            (if\n                (is Prev Mover)\n                (or\n                    (move\n                        Hop\n                        (from (last To))\n                        (between\n                            if:(and\n                                (not (is In (between) (sites ToClear)))\n                                (is Enemy (who at:(between)))\n                            )\n                            (apply (remove (between)))\n                        )\n                        (to if:(is Empty (to)))\n                        (then\n                            (if\n                                (can\n                                    Move\n                                    (hop\n                                        (from (last To))\n                                        (between\n                                            if:(and\n                                                (not\n                                                    (is\n                                                        In\n                                                        (between)\n                                                        (sites ToClear)\n                                                    )\n                                                )\n                                                (is Enemy (who at:(between)))\n                                            )\n                                        )\n                                        (to if:(is Empty (to)))\n                                    )\n                                )\n                                (moveAgain)\n                            )\n                        )\n                    )\n                    (move Pass)\n                )\n                (forEach Piece)\n            )\n        )\n        (end\n            {\n                (if (no Moves Next) (result Next Loss))\n                (if (<= (count Pieces P1) 15) (result P1 Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis alignment game, the name of which was not recorded, was played in the Ashanti Kingdom in the early nineteenth century. It was played on a wooden board with perforations, and the pieces were pegs to be inserted in the board.\n</description>\n<rules>\n\"The board is a series of intersecting lines in many directions, each line with three points. Players have equal numbers of pegs, and place their pieces at the same time. Players who place three of their pieces in a row remove one of the opponent's pieces. The player who removes all of the opponent's pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Ashanti Alignment Game\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3 joinCorners:False) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:21))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Next container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Next container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (no Pieces Next) (result Next Loss)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nCashlan Gherra is a game played on a small board, known from seventeenth century Ireland.\n</description>\n<rules>\n\"3x3 intersecting lines, with diagonals. Three pieces per player.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Cashlan Gherra\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move (from) (to (sites Empty))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3 Orthogonal) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSmall Merels games are some of the most common game known throughout the world. These board are known from the Roman Empire, though the particular rules for them are undocumented.\n</description>\n<rules>\n\"3x3 intersecting lines.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Roman Small Merels\"\n    (players 2)\n    (equipment\n        {\n            (board (square 3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\" Each (move (from) (to (sites Empty))))\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:3))\n        phases:{\n            (phase\n                \"Placement\"\n                (play (move (from (handSite Mover)) (to (sites Empty))))\n                (nextPhase\n                    (all\n                        Sites\n                        (sites Hand P2)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase \"Movement\" (play (forEach Piece)))\n        }\n        (end (if (is Line 3 Orthogonal) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nAtidada is an alignment game played in what is now Togo and Ghana. The details are not completely described, but it can be played with three, six or 20 pieces per player. The board is made in the ground, and sticks are used as pieces.\n</description>\n<rules>\n\"Similar to Merels games. The board is square in shape. Played with three, six, or twenty pieces per player.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Atidada\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3 joinCorners:True) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:6))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThis game, the name of which was not recorded, was played by Hutu and Tutsi children in Rwanda.\n</description>\n<rules>\n\"\\\"Mill\\\" game. Two players. Three pieces per player, sometimes more.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Rwandan Alignment Game\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then\n                        (if\n                            (and (not (is Prev Mover)) (is Line 3))\n                            (moveAgain)\n                            (if\n                                (no Moves Next)\n                                (and (moveAgain) (set Pending))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:6))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFeldja is an alignment game played in the Bordj Bou Arreridj region of Algeria in the early twentieth century.\n</description>\n<rules>\n\"Three concentric squares, with lines connecting the midpoints of the sides. Twelve pieces per player. When a player places three of their pieces in a line, they capture one of the opponent's pieces. The player who captures the most pieces wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Feldja\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:3) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then\n                        (if\n                            (or\n                                {\n                                    (is Line 3 N exact:True)\n                                    (is Line 3 S exact:True)\n                                    (is Line 3 E exact:True)\n                                    (is Line 3 W exact:True)\n                                }\n                            )\n                            (moveAgain)\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Next container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Next container:\"Board\")\n                        )\n                        (if\n                            (> (count Pieces Mover) 3)\n                            (forEach Piece)\n                            (move\n                                (from (sites Occupied by:Mover))\n                                (to (sites Empty))\n                            )\n                        )\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNzengu\u00e9 is a name for alignment games played in the Republic of Congo. This version is played on a larger board, with twelve pieces.\n</description>\n<rules>\n\"Square-shaped board. Twelve pieces per player. Players alternate turns placing a piece on the board. Players attempt to line up three of their pieces in a row. Players also move pieces along the lines of the board.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Nzengue (Large)\"\n    (players 2)\n    (equipment\n        {\n            (board (concentric Square rings:2) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then (if (is Line 3 Orthogonal exact:True) (moveAgain)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:12))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then (if (is Line 3 Orthogonal) (moveAgain)))\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (forEach\n                                (sites Occupied by:Enemy container:\"Board\")\n                                if:(not (is Line 3 Orthogonal through:(site)))\n                            )\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end\n            (forEach\n                NonMover\n                if:(= 2 (count Pieces Player))\n                (result Player Loss)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHujura is an alignment game played in seventeenth century Persia with six pieces per player.\n</description>\n<rules>\n\"The game Hujura is played by two players on a 3x3 rectangle board with square tiling. All players play with Markers. Rules for Pieces: Markers step adjacent then if a player places 3 of their pieces in an north direction line, a player places 3 of their pieces in an south direction line, a player places 3 of their pieces in an east direction line or a player places 3 of their pieces in an west direction line, move again. Players take turns moving. Rules: If in the same turn, remove pieces at sites occupied by any component owned by Enemy in Board, else from vertex in Player the moving player's hand site 0 to vertex in the set of empty vertexs moveRule: true then if a player places 3 of their pieces in an orthogonal direction line, move again if in the same turn, remove pieces at sites occupied by any component owned by Enemy in Board, else move one of your pieces. Aim: If the number of pieces owned by Player the next player is less than or equal to 2, the moving player wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Hujura\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 3 3 diagonals:Alternating) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                Each\n                (move\n                    Step\n                    (to if:(is Empty (to)))\n                    (then\n                        (if\n                            (or\n                                {\n                                    (is Line 3 N exact:True)\n                                    (is Line 3 S exact:True)\n                                    (is Line 3 E exact:True)\n                                    (is Line 3 W exact:True)\n                                }\n                            )\n                            (moveAgain)\n                        )\n                    )\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" \"Hand\" count:6))\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then\n                                (if\n                                    (is Line 3 Orthogonal exact:True)\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                )\n                (nextPhase\n                    Mover\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play\n                    (if\n                        (is Prev Mover)\n                        (move\n                            Remove\n                            (sites Occupied by:Enemy container:\"Board\")\n                        )\n                        (forEach Piece)\n                    )\n                )\n            )\n        }\n        (end (if (<= (count Pieces Next) 2) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nYi is an ancient name for the game Weiqi. While they were probably used interchangeably at the time, this is the older version of the game, which was played on a 17x17 board.\n</description>\n<rules>\n\"17x17 board. Players make groups on the board, opponents may capture groups.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Yi\"\n    (players 2)\n    (equipment\n        {\n            (board (square 17) use:Vertex)\n            (piece \"Marker\" Each)\n        }\n    )\n    (rules\n        (play\n            (or\n                (move\n                    Add\n                    (to (sites Empty))\n                    (then\n                        (enclose\n                            (from (last To))\n                            Orthogonal\n                            (between\n                                if:(is Enemy (who at:(between)))\n                                (apply (remove (between)))\n                            )\n                        )\n                    )\n                )\n                (move Pass)\n            )\n        )\n        (end\n            (if\n                (all Passed)\n                (byScore\n                    {\n                        (score P1 (+ (count Pieces P1) (size Territory P1)))\n                        (score P2 (+ (count Pieces P2) (size Territory P2)))\n                    }\n                )\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nBoard game version of Conway's Game of Life.\n</description>\n<rules>\nAt each tick, a set of rules are applied to every board cell, which determine whether a piece 'lives' or 'dies' at each cell. Any live cell with two or three live neighbours survives. Any dead cell with three live neighbours becomes a live cell. All other live cells die in the next generation. Similarly, all other dead cells stay dead.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Game of Life\"\n    (players 0)\n    (equipment\n        {\n            (board (square 12))\n            (piece \"Disc\" Shared)\n        }\n    )\n    (rules\n        (start\n            (place\n                \"Disc\"\n                (sites {\"C3\" \"D3\" \"E3\" \"F3\" \"B4\" \"F4\" \"F5\" \"C6\" \"E6\"})\n            )\n        )\n        (play\n            (forEach\n                Site\n                (sites Board)\n                (if\n                    (and\n                        (is Empty (to))\n                        (=\n                            3\n                            (count\n                                Sites\n                                in:(intersection\n                                    (sites Around (to))\n                                    (sites Occupied by:All)\n                                )\n                            )\n                        )\n                    )\n                    (add (piece \"Disc\") (to (to)))\n                    (if\n                        (and\n                            (is Occupied (to))\n                            (or\n                                (<\n                                    (count\n                                        Sites\n                                        in:(intersection\n                                            (sites Around (to))\n                                            (sites Occupied by:All)\n                                        )\n                                    )\n                                    2\n                                )\n                                (>\n                                    (count\n                                        Sites\n                                        in:(intersection\n                                            (sites Around (to))\n                                            (sites Occupied by:All)\n                                        )\n                                    )\n                                    3\n                                )\n                            )\n                        )\n                        (remove (to))\n                    )\n                )\n            )\n        )\n        (end (if (= (count Moves) 100) (result Mover Draw)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFutoshiki is a numerical deduction puzzle invented by Tamaki Seto in 2001.\n</description>\n<rules>\nFutoshiki is played on a square grid. The starting state may have numbers placed in the squares of the grid. The goal is to place numbers in the squares so that each row and each column has only one instance of a particular number. The \\\"lesser than\\\" and \\\"greater than\\\" constraints have to be satisfied.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Futoshiki\"\n    (players 1)\n    (equipment\n        {\n            (board (square 5) (values Vertex (range 1 5)) use:Vertex)\n            (hints\n                {\n                    (hint {0 1})\n                    (hint {1 2})\n                    (hint {8 9})\n                    (hint {21 20})\n                    (hint {23 22})\n                    (hint {24 23})\n                }\n                Vertex\n            )\n            (regions { Columns Rows })\n        }\n    )\n    (rules\n        (start (set { { 9 4} { 12 4 } { 15 4 } { 19 2 } }))\n        (play (satisfy { (forAll Hint (< (from) (to))) (all Different) }))\n        (end (if (is Solved) (result P1 Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSquaro is a logic puzzle played on a grid of any size with circles on the intersections.\n</description>\n<rules>\nThe player must color in the circles on the intersections. Numbers in the squares indicate the number of adjacent circles which should be colored.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Squaro\"\n    (players 1)\n    (equipment\n        {\n            (board (square 6) (values Vertex (range 0 1)) use:Vertex)\n            (hints\n                {\n                    (hint 0 3)\n                    (hint 1 3)\n                    (hint 2 2)\n                    (hint 3 0)\n                    (hint 4 2)\n                    (hint 5 3)\n                    (hint 6 2)\n                    (hint 7 1)\n                    (hint 8 0)\n                    (hint 9 2)\n                    (hint 10 2)\n                    (hint 11 1)\n                    (hint 12 2)\n                    (hint 13 2)\n                    (hint 14 3)\n                    (hint 15 3)\n                    (hint 16 3)\n                    (hint 17 4)\n                    (hint 18 3)\n                    (hint 19 2)\n                    (hint 20 3)\n                    (hint 21 4)\n                    (hint 22 4)\n                    (hint 23 3)\n                    (hint 24 1)\n                }\n                Cell\n            )\n            (regions \"AllSites\" (sites Board))\n        }\n    )\n    (rules\n        (play\n            (satisfy\n                (forAll\n                    Cell\n                    (is\n                        Count\n                        Vertex\n                        (sites Incident Vertex of:Cell at:(from))\n                        of:1\n                        (hint Cell at:(from))\n                    )\n                )\n            )\n        )\n        (end (if (is Solved) (result P1 Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMagic Hexagon is a logic puzzle game. A hexagonal grid (usually 3 per side) starts with numbers placed in some of the spaces.\n</description>\n<rules>\nThe player must insert numbers so that the sums of lines in all three directions equal the same number. Numbers cannot be repeated.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Magic Hexagon\"\n    (players 1)\n    (equipment\n        {\n            (board (hex 3) (values Cell (range 1 19)))\n            (regions\n                {\n                    (sites {0 1 2})\n                    (sites {3 4 5 6})\n                    (sites {7 8 9 10 11})\n                    (sites {12 13 14 15})\n                    (sites {16 17 18})\n                    (sites {2 6 11})\n                    (sites {1 5 10 15})\n                    (sites {0 4 9 14 18})\n                    (sites {3 8 13 17})\n                    (sites {7 12 16})\n                    (sites {0 3 7})\n                    (sites {1 4 8 12})\n                    (sites {2 5 9 13 16})\n                    (sites {6 10 14 17})\n                    (sites {11 15 18})\n                }\n            )\n            (regions HintRegions)\n        }\n    )\n    (rules\n        (play (satisfy { (all Different (sites Board)) (is Sum 38) }))\n        (end (if (is Solved) (result P1 Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nTakuzu, also known as Binairo, is a logic puzzle involving placement of two symbols, often 1s and 0s, on a rectangular grid.\n</description>\n<rules>\nEach box should contain a zero or a one. No more than two similar numbers next to or below each other are allowed. Each row and each column should contain an equal number of zeros and ones. Each row is unique and each column is unique.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Takuzu\"\n    (players 1)\n    (equipment\n        {\n            (board (square 10) (values Cell (range 0 1)))\n            (regions { Columns Rows })\n        }\n    )\n    (rules\n        (start\n            (set\n                {\n                    {0 1} {1 1} {4 1} {11 1} {18 1} {25 0} {26 0} {29 0}\n                    {34 1} {37 0} {51 1} {52 0} {59 1} {65 1} {67 1} {71 1}\n                    {86 0} {87 0} {92 0} {96 0}\n                }\n            )\n        )\n        (play\n            (satisfy\n                {\n                    (not (is Line 3 Orthogonal))\n                    (is Unique)\n                    (is Sum (/ (count Rows) 2))\n                }\n            )\n        )\n        (end (if (is Solved) (result P1 Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLights Out is an electronic game released by Tiger Electronics in 1995.\n</description>\n<rules>\nThe game consists of a 5 by 5 grid of lights. When the game starts, some lights are switched on. Pressing any of the lights will toggle it and the four adjacent lights. The goal of the puzzle is to switch all the lights off, preferably in as few button presses as possible. Ludii allows 100 moves maximum before losing.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Lights Out\"\n    (players 1)\n    (equipment\n        {\n            (board (square 5))\n            (piece \"Light\" Shared)\n        }\n    )\n    (rules\n        (start (place Random {\"Light\"} count:(value Random (range 10 20))))\n        (play\n            (move\n                Select\n                (from (sites Board))\n                (then\n                    (forEach\n                        Site\n                        (sites Around (last To) Orthogonal includeSelf:True)\n                        (if\n                            (is Occupied (site))\n                            (remove (site))\n                            (add (piece \"Light\") (to (site)))\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (all Sites (sites Board) if:(is Empty (site)))\n                    (result Mover Win)\n                )\n                (if (= 98 (counter)) (result Mover Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nN puzzles are played with tiles within a grid, with one empty space. For instance, in a 4x4 grid there are 15 tiles.\n</description>\n<rules>\nThe tiles are each given a number from 1 to n-1. By sliding the tiles into the open space, the object is to placed the tiles in order based on their numbering.\n</rules>\n</query>\n</task>",
        "solution": "(game \"N Puzzles\"\n    (players 1)\n    (equipment\n        {\n            (board (square 3))\n            (piece \"1\" P1 (move Step Orthogonal (to if:(is Empty (to)))))\n            (piece \"2\" P1 (move Step Orthogonal (to if:(is Empty (to)))))\n            (piece \"3\" P1 (move Step Orthogonal (to if:(is Empty (to)))))\n            (piece \"4\" P1 (move Step Orthogonal (to if:(is Empty (to)))))\n            (piece \"5\" P1 (move Step Orthogonal (to if:(is Empty (to)))))\n            (piece \"6\" P1 (move Step Orthogonal (to if:(is Empty (to)))))\n            (piece \"7\" P1 (move Step Orthogonal (to if:(is Empty (to)))))\n            (piece \"8\" P1 (move Step Orthogonal (to if:(is Empty (to)))))\n        }\n    )\n    (rules\n        (start (place Random {\"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\"}))\n        (play (forEach Piece))\n        (end (if (is Target {7 8 0 4 5 6 1 2 3}) (result P1 Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNao Gutiya Baithaneka is a solitaire game played in the Bihar region of India. The player attempts to place nine pieces on a star-shaped board with a distinct pattern of moves.\n</description>\n<rules>\nThe board is a five-pointed star. The player has nine pieces. The player attempts to place all the pieces on the board. The player choses a point, then moves the piece two spaces in a straight line. The piece may move through a spot occupied by another piece, but must land on an empty space. The player wins by successfully placing all nine pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Nao Gutiya Baithaneka\"\n    (players 1)\n    (equipment\n        {\n            (board (splitCrossings (regular Star 5)) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                P1\n                (move\n                    Hop\n                    (between\n                        if:(is Friend (who at:(between)))\n                        (apply (remove (between)))\n                    )\n                    (to if:(is Empty (to)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" (handSite P1) count:9))\n        (play\n            (if\n                (is Even (count Moves))\n                (move\n                    (from (handSite Mover))\n                    (to (sites Empty))\n                    (then (moveAgain))\n                )\n                (forEach\n                    Piece\n                    (if\n                        (= (from) (last To))\n                        (move\n                            Hop\n                            (between\n                                if:(or\n                                    (is Friend (who at:(between)))\n                                    (is Empty (between))\n                                )\n                            )\n                            (to if:(is Empty (to)))\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (and\n                        (is Even (count Moves))\n                        (all\n                            Sites\n                            (sites Hand Mover)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                    )\n                    (result Mover Win)\n                )\n                (if (no Moves Next) (result Mover Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nButtons And Lights is a planning puzzle.\n</description>\n<rules>\nThree buttons and three lights. The first button toggles the first light. The second button interchanges first and second lights. The third button interchanges the second and third lights. All lights initially off. The goal is to get them all on. The game terminates when all three lights are on or after 6 steps, whichever comes first.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Buttons And Lights\"\n    (players 1)\n    (equipment\n        {\n            (board (rectangle 2 3))\n            (piece \"Light\" Shared)\n        }\n    )\n    (rules\n        (start (place \"Light\" (sites Top)))\n        (play\n            (move\n                Select\n                (from (sites Bottom))\n                (then\n                    (if\n                        (= (last To) 0)\n                        (set State at:3 (abs (- (state at:3) 1)))\n                        (if\n                            (= (last To) 1)\n                            (swap Pieces 3 4)\n                            (swap Pieces 4 5)\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (all Sites (sites Top) if:(= 1 (state at:(site))))\n                    (result Mover Win)\n                )\n                (if (= 4 (counter)) (result Mover Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nChuka is a puzzle played in Russia. It contains the sowing mechanism seen in many mancala-style board games.\n</description>\n<rules>\nFive holes arranged in a circle. One hole is called the Rumba. Two counters in each hole, except the Rumba. The player sows the counters in one direction. When the final counter lands in an occupied hole, the counters in that hole are picked up and sowing continues. When the final counter lands in the Rumba, the player may pick up the counters from any one of the other holes and continue sowing. If the final counter lands in an empty hole that is not the Rumba, they lose. The goal of the player is to accumulate all of the counters into the Rumba.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Chuka\"\n    (players 1)\n    (equipment\n        {\n            (board\n                (concentric {5})\n                (track \"Track\" {0 1 3 4 2} loop:True)\n                use:Vertex\n            )\n            (piece \"Seed\" Shared)\n        }\n    )\n    (rules\n        (start (set Count 2 to:(difference (sites Board) 0)))\n        (play\n            (move\n                Select\n                (from\n                    (if\n                        (!= 0 (value Pending))\n                        (sites { (last To afterConsequence:True) })\n                        (difference (sites Board) 0)\n                    )\n                    if:(!= 0 (count at:(from)))\n                )\n                (then\n                    (sow apply:(if (> (count at:(to)) 1) (set Pending (to))))\n                )\n            )\n        )\n        (end\n            {\n                (if (= 8 (count at:0)) (result Mover Win))\n                (if\n                    (and\n                        (= 1 (count at:(last To afterConsequence:True)))\n                        (!= (last To afterConsequence:True) 0)\n                    )\n                    (result Mover Loss)\n                )\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPentalpha is a solitaire game played on Crete in the early twentieth century.\n</description>\n<rules>\nThe board is a five-pointed star. The player has nine pieces. The player attempts to place all the pieces on the board. The player choses a point, then moves the piece two spaces in a straight line. The piece may move through a spot occupied by another piece, but must land on an empty space. The player wins by successfully placing all nine pieces.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Pentalpha\"\n    (players 1)\n    (equipment\n        {\n            (board (splitCrossings (regular Star 5)) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                P1\n                (move\n                    Hop\n                    (between\n                        if:(is Friend (who at:(between)))\n                        (apply (remove (between)))\n                    )\n                    (to if:(is Empty (to)))\n                )\n            )\n        }\n    )\n    (rules\n        (start (place \"Marker\" (handSite P1) count:9))\n        (play\n            (if\n                (is Even (count Moves))\n                (move\n                    (from (handSite Mover))\n                    (to (sites Empty))\n                    (then (moveAgain))\n                )\n                (forEach\n                    Piece\n                    (if\n                        (= (from) (last To))\n                        (move\n                            Hop\n                            (between\n                                if:(or\n                                    (is Friend (who at:(between)))\n                                    (is Empty (between))\n                                )\n                            )\n                            (to if:(is Empty (to)))\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            {\n                (if\n                    (and\n                        (is Even (count Moves))\n                        (all\n                            Sites\n                            (sites Hand Mover)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                    )\n                    (result Mover Win)\n                )\n                (if (no Moves Next) (result Mover Loss))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nLam Turki is a solitaire game played in India. Played on a board shaped like a five-pointed star, the player attempts to remove all of the pieces from the board,\n</description>\n<rules>\nThe board is a five-pointed star. The player has nine pieces. In the first phase, the player attempts to place all the pieces on the board. The player choses a point, then moves the piece two spaces in a straight line. The piece may move through a spot occupied by another piece, but must land on an empty space. Once all of the pieces are placed in this way, the player captures a piece on the board by hopping over with with another one of the pieces to an empty space on the opposite side of the piece to be captured. The goal is to capture all of the pieces except one.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Lam Turki\"\n    (players 1)\n    (equipment\n        {\n            (board (splitCrossings (regular Star 5)) use:Vertex)\n            (hand Each)\n            (piece \"Marker\"\n                P1\n                (move\n                    Hop\n                    (between\n                        if:(is Friend (who at:(between)))\n                        (apply (remove (between)))\n                    )\n                    (to if:(is Empty (to)))\n                )\n            )\n        }\n    )\n    (rules\n        (start { (place \"Marker\" (handSite P1) count:9) })\n        phases:{\n            (phase\n                \"Placement\"\n                (play\n                    (if\n                        (is Even (count Moves))\n                        (move\n                            (from (handSite Mover))\n                            (to (sites Empty))\n                            (then (moveAgain))\n                        )\n                        (forEach\n                            Piece\n                            (if\n                                (= (from) (last To))\n                                (move\n                                    Hop\n                                    (between\n                                        if:(or\n                                            (is Friend (who at:(between)))\n                                            (is Empty (between))\n                                        )\n                                    )\n                                    (to if:(is Empty (to)))\n                                )\n                            )\n                        )\n                    )\n                )\n                (end (if (no Moves Next) (result Mover Loss)))\n                (nextPhase\n                    Mover\n                    (and\n                        (is Even (count Moves))\n                        (all\n                            Sites\n                            (sites Hand Mover)\n                            if:(= 0 (count Cell at:(site)))\n                        )\n                    )\n                    \"Movement\"\n                )\n            )\n            (phase\n                \"Movement\"\n                (play (forEach Piece))\n                (end\n                    {\n                        (if (= (count Pieces) 1) (result Mover Win))\n                        (if (no Moves Next) (result Mover Loss))\n                    }\n                )\n            )\n        }\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nInsanity is a small game played on a board with holes and pegs of two colors.\n</description>\n<rules>\nThe pieces start with each color on opposite ends of the board, with two empty holes in between. The goal is to move the pieces so that they end up on opposite sides of the board from their starting position. Pieces can only be moved forward.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Insanity\"\n    (players 1)\n    (equipment\n        {\n            (board (rectangle 1 10))\n            (piece \"Marker1\"\n                P1\n                E\n                (or\n                    (move\n                        Hop\n                        (from)\n                        Forward\n                        (between if:(is Friend (who at:(between))))\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step Forward (to if:(is Empty (to))))\n                )\n            )\n            (piece \"Marker2\"\n                P1\n                W\n                (or\n                    (move\n                        Hop\n                        (from)\n                        Forward\n                        (between if:(is Friend (who at:(between))))\n                        (to if:(is Empty (to)))\n                    )\n                    (move Step Forward (to if:(is Empty (to))))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            {\n                (place \"Marker1\" (expand (sites Left) steps:3))\n                (place \"Marker2\" (expand (sites Right) steps:3))\n            }\n        )\n        (play (forEach Piece))\n        (end (if (is Target {2 2 2 2 0 0 1 1 1 1}) (result P1 Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nPeg Solitaire is a single-player game attested in Europe since the seventeenth century. There are two board variations, \\\"European\\\" which is hexagonal with three spaces per side and \\\"English\\\" which has the central hole in each of the six sides of the hexagon removed. Spaces take the form of holes in which pegs are inserted.\n</description>\n<rules>\n\"Play begins with all holes filled except the central hole. The player moves a peg by orthogonally jumping an adjacent peg and removing it from the board. The goal is to remove all but one peg, leaving it in the central hole.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Peg Solitaire\"\n    (players 1)\n    (equipment\n        {\n            (board\n                (merge\n                    (shift 0 2 (rectangle 3 7))\n                    (shift 2 0 (rectangle 7 3))\n                )\n                use:Vertex\n            )\n            (piece \"Marker\"\n                P1\n                (move\n                    Hop\n                    Orthogonal\n                    (between\n                        if:(is Friend (who at:(between)))\n                        (apply (remove (between)))\n                    )\n                    (to if:(is Empty (to)))\n                )\n            )\n        }\n    )\n    (rules\n        (start\n            { (place \"Marker\" (difference (sites Board) (sites { \"D4\"}))) }\n        )\n        (play (forEach Piece))\n        (end\n            (if\n                (and\n                    (is Friend (who at:(centrePoint)))\n                    (= 1 (count Pieces All))\n                )\n                (result P1 Win)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nOne of the most commonly played Dominoes game, Block uses most of the rules shared by other Dominoes games worldwide.\n</description>\n<rules>\nAt the beginning of the game, each player has 7 dominoes. The goal of the game is to use all the dominoes on his hand. A Domino can be played only if it can be placed in the line of play. If this is not possible, the player has to take another domino from the remaining dominoes and add it to his hand until he is able to place one. If the two players can not play, this is a draw.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Block\"\n    (players 2)\n    (equipment\n        {\n            (boardless Square)\n            (hand Each size:21)\n            (dominoes)\n        }\n    )\n    (rules\n        (start\n            {\n                (deal Dominoes 7)\n                (set Hidden What (sites Hand P1) to:P2)\n                (set Hidden What (sites Hand P2) to:P1)\n            }\n        )\n        (play\n            (priority\n                {\n                    (do\n                        (move\n                            (from\n                                (forEach\n                                    (sites Hand Mover)\n                                    if:(is Occupied (site))\n                                )\n                            )\n                            (to (sites LineOfPlay))\n                            (then\n                                (and\n                                    (set Hidden What at:(last To) False to:P1)\n                                    (set Hidden What at:(last To) False to:P2)\n                                )\n                            )\n                        )\n                        ifAfterwards:(is PipsMatch)\n                    )\n                    (move\n                        Pass\n                        (then\n                            (if\n                                (!= (count Pieces \"Bag\") 0)\n                                (and\n                                    {\n                                        (take Domino)\n                                        (set\n                                            Hidden\n                                            What\n                                            (sites Hand Mover)\n                                            to:Next\n                                        )\n                                        (moveAgain)\n                                    }\n                                )\n                            )\n                        )\n                    )\n                }\n            )\n        )\n        (end\n            {\n                (if\n                    (all\n                        Sites\n                        (sites Hand Mover)\n                        if:(= 0 (count Cell at:(site)))\n                    )\n                    (result Mover Win)\n                )\n                (if (all Passed) (result Mover Draw))\n            }\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nThe prisoner's dilemma is a standard example of a game analyzed in game theory that shows why two completely rational individuals might not cooperate, even if it appears that it is in their best interests to do so. It was originally framed by Merrill Flood and Melvin Dresher while working at RAND in 1950. Albert W. Tucker formalized the game with prison sentence rewards and named it \\\"prisoner's dilemma\\\"\n</description>\n<rules>\nThe dilemma is repeated 10 times: - If the two players are cooperating (C), they get 6 points. - If the two players are defecting (D), they get 2 points. - If one player is cooperating (C) and the other is defecting (D), the first one gets 0 points and the second one gets 10 points.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Iterated Prisoners Dilemma\"\n    (players 2)\n    (mode Simultaneous)\n    (equipment\n        {\n            (board (square 2))\n        }\n    )\n    (rules\n        (play\n            (or\n                {\n                    (move Select (from 0) P1 (then (set Var \"Choice1\" 0)))\n                    (move Select (from 1) P1 (then (set Var \"Choice1\" 1)))\n                    (move Select (from 2) P2 (then (set Var \"Choice2\" 0)))\n                    (move Select (from 3) P2 (then (set Var \"Choice2\" 1)))\n                }\n                (then\n                    (if\n                        (and (= 0 (var \"Choice1\")) (= 0 (var \"Choice2\")))\n                        (and (addScore P1 3) (addScore P2 3))\n                        (if\n                            (and (= 1 (var \"Choice1\")) (= 1 (var \"Choice2\")))\n                            (and (addScore P1 1) (addScore P2 1))\n                            (if\n                                (and\n                                    (= 0 (var \"Choice1\"))\n                                    (= 1 (var \"Choice2\"))\n                                )\n                                (and (addScore P1 0) (addScore P2 5))\n                                (and (addScore P1 5) (addScore P2 0))\n                            )\n                        )\n                    )\n                    applyAfterAllMoves:True\n                )\n            )\n        )\n        (end (if (= (counter) 8) (byScore)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nFibonacci Nim is a mathematical subtraction game, a variant of the game of Nim.\n</description>\n<rules>\nFibonacci Nim is played by two players, who alternate removing coins or other counters from a pile. On the first move, a player is not allowed to take all of the coins, and on each subsequent move, the number of coins removed can be any number that is at most twice the previous move. According to the normal play convention, the player who takes the last coin wins. Or according to the Mis\u00e8re game, the player who takes the last coin loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Fibonacci Nim\"\n    (players 2)\n    (equipment\n        {\n            (board (square 1))\n            (piece \"Marker\" Neutral)\n        }\n    )\n    (rules\n        (start (set Count 40 at:0))\n        (play\n            (if\n                (is Prev Mover)\n                (or\n                    (if\n                        (<=\n                            (+ 1 (count MovesThisTurn))\n                            (if\n                                (= 1 (count Turns))\n                                (- 40 1)\n                                (* 2 (value Player (prev MoverLastTurn)))\n                            )\n                        )\n                        (move\n                            Select\n                            (from (last To))\n                            (then\n                                (if\n                                    (= (count at:(last To)) 1)\n                                    (remove (last To))\n                                    (and\n                                        (set\n                                            Count\n                                            at:(last To)\n                                            (- (count at:(last To)) 1)\n                                        )\n                                        (moveAgain)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                    (move\n                        Pass\n                        (then\n                            (set\n                                Value\n                                Mover\n                                (- (+ 1 (count MovesThisTurn)) 1)\n                            )\n                        )\n                    )\n                )\n                (move\n                    Select\n                    (from (sites Occupied by:Neutral))\n                    (then\n                        (if\n                            (= (count at:(last To)) 1)\n                            (remove (last To))\n                            (and\n                                (set\n                                    Count\n                                    at:(last To)\n                                    (- (count at:(last To)) 1)\n                                )\n                                (moveAgain)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nNim is a game of uncertain origins. It is first mentioned by Luca Paccioli, an Italian mathematician in the early sixteenth or late fifteenth century. It is similar to other games worldwide, but multiple independent inventions may be possible, not necessarily the dispersion of a single game.\n</description>\n<rules>\nEssentially, the game consists of a number of objects in \\\"heaps,\\\" and players alternate turns taking any number of objects from one of the heaps. This continues until no objects are left, and the last player to remove an object loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Nim\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 1 5))\n            (piece \"Marker\" Neutral)\n        }\n    )\n    (rules\n        (start\n            {\n                (set Count 3 to:(sites {0 4}))\n                (set Count 4 to:(sites {1 3}))\n                (set Count 5 at:2)\n            }\n        )\n        (play\n            (if\n                (is Prev Mover)\n                (or\n                    (move\n                        Select\n                        (from (last To))\n                        (then\n                            (if\n                                (= (count at:(last To)) 1)\n                                (remove (last To))\n                                (and\n                                    (set\n                                        Count\n                                        at:(last To)\n                                        (- (count at:(last To)) 1)\n                                    )\n                                    (moveAgain)\n                                )\n                            )\n                        )\n                    )\n                    (move Pass)\n                )\n                (move\n                    Select\n                    (from (sites Occupied by:Neutral))\n                    (then\n                        (if\n                            (= (count at:(last To)) 1)\n                            (remove (last To))\n                            (and\n                                (set\n                                    Count\n                                    at:(last To)\n                                    (- (count at:(last To)) 1)\n                                )\n                                (moveAgain)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Next) (result Next Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nChomp is a two-player strategy game played on a rectangular grid made up of smaller square cells, which can be thought of as the blocks of a chocolate bar.\n</description>\n<rules>\nThe players take it in turns to choose one block and \\\"eat it\\\" (remove from the board), together with those that are below it and to its right. The top left block is \\\"poisoned\\\" and the player who eats this loses.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Chomp\"\n    (players 2)\n    (equipment\n        {\n            (board (rectangle 4 5))\n            (piece \"Chocolate\" Shared)\n        }\n    )\n    (rules\n        (start (place \"Chocolate\" (sites Board)))\n        (play\n            (move\n                Remove\n                (sites Occupied by:Shared)\n                (then\n                    (forEach\n                        Site\n                        (sites Occupied by:Shared)\n                        (if\n                            (and\n                                (>= (row of:(last To)) (row of:(site)))\n                                (<= (column of:(last To)) (column of:(site)))\n                            )\n                            (remove (site))\n                        )\n                    )\n                )\n            )\n        )\n        (end\n            (if\n                (is In (last To) (intersection (sites Top) (sites Left)))\n                (result Mover Loss)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nDots and Boxes was invented in the nineteenth century by \u00c9douard Lucas, calling it \\\"la Pipopipette.\\\" It is a pen-and-paper game that is sometimes adapted into other forms.\n</description>\n<rules>\nIt is played on a board that is a grid of dots. 3x3 dots is common. Players alternate turns drawing a line between two of the dots. If a player completes a square, they receive one point and play again. The player with the most points when there are no more moves wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Dots and Boxes\"\n    (players 2)\n    (equipment\n        {\n            (board (square 8))\n        }\n    )\n    (rules\n        (play\n            (move\n                Add\n                (to Edge (sites Empty Edge))\n                (then\n                    (forEach\n                        Site\n                        (sites Incident Cell of:Edge at:(last To))\n                        (if\n                            (=\n                                (count\n                                    Sites\n                                    in:(intersection\n                                        (sites\n                                            Incident\n                                            Edge\n                                            of:Cell\n                                            at:(site)\n                                        )\n                                        (sites Empty Edge)\n                                    )\n                                )\n                                0\n                            )\n                            (claim\n                                (to Cell (site))\n                                (then (and (addScore Mover 1) (moveAgain)))\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (> (score Mover) (/ (count Cells) 2)) (result Mover Win)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nSim is a pencil-and-paper game played by two players.\n</description>\n<rules>\nSix dots ('vertices') are drawn. Each dot is connected to every other dot by a line ('edge'). Two players take turns colouring any uncoloured lines. One player colours in one colour, and the other colours in another colour, with each player trying to avoid the creation of a triangle made solely of their colour (only triangles with the dots as corners count; intersections of lines are not relevant); the player who completes such a triangle loses immediately.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Sim\"\n    (players 2)\n    (equipment\n        {\n            (board (complete (regular Star 6)) use:Edge)\n        }\n    )\n    (rules\n        (play (move Add (to Edge (sites Empty Edge))))\n        (end\n            (if\n                (is Path Edge Mover length:(exact 3) closed:True)\n                (result Mover Loss)\n            )\n        )\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nMaxMatch is a 2-player game. This game is based on the principle of \\\"matching\\\" in graph theory.\n</description>\n<rules>\nEvery turn, the current player can choose to pass, or select a previously-unselected edge. If the selected edge is disjoint from any other friendly edge, then the player gets 1 point. If the graph is full (i.e., all edges have been selected) or both players are passed their turn, the game is over and the winner is selected by their score.\n</rules>\n</query>\n</task>",
        "solution": "(game \"MaxMatch\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (graph\n                    vertices:{\n                        {0 1} {3 1} {6 1} {8 1} {10 1} {0 2} {2 2} {4 2} {6 2}\n                        {8 2} {0 3} {3 3} {5 3} {7 3} {8 3} {10 3} {2 5} {4 5}\n                        {0 5} {3 5} {7 5} {5 5} {10 5}\n                    }\n                    edges:{\n                        {0 6} {5 6} {6 10} {1 6} {6 11} {6 7} {7 8} {8 2}\n                        {8 12} {8 13} {12 13} {8 9} {9 3} {9 14} {9 4} {9 15}\n                        {4 15} {11 16} {11 17} {16 18} {16 19} {12 21} {12 20}\n                        {13 20} {14 22} {15 22}\n                    }\n                )\n                use:Vertex\n            )\n        }\n    )\n    (rules\n        (play\n            (or\n                (move\n                    Add\n                    (to Edge (sites Empty Edge))\n                    (then\n                        (if\n                            (is Path Edge Mover length:(exact 1))\n                            (addScore Mover 1)\n                        )\n                    )\n                )\n                (move Pass)\n            )\n        )\n        (end (if (all Passed) (byScore)))\n    )\n)"
    },
    {
        "problem": "<task>\n<query>\n<description>\nHackenbush is a two-player game, invented by the mathematician John Horton Conway. It may be played on any configuration of coloured line segments connected to one another by their end points and to a ground line.\n</description>\n<rules>\nThe game starts in drawing a ground line and several line segments such that each line segment is connected to the ground. Any number of segments may meet at a point, and thus there may be multiple paths to ground. Every turn, the current player selects any line segment to be removed. Every line segment no longer connected to the ground by any path falls. The first player who is unable to move loses. In addition to the standard Hackenbush, there are two variants; HackenbushR-B and HackenbushR-G-B. For the Hackenbush version, all the lines are in the same colour (green). At each turn, the current player selects a coloured line to be removed, also removing any other line segments that become disconnected from the ground as a result. The game is over when there are no green edges in the graph. The second version is the Red-Blue version; HackenbushR-B. There is one red player, and one blue player. The players can remove only edges of their own colour. The last version is HackenbushR-G-B; there is a graph with red, green, and blue edges. Players may remove edges of their own colour, as well as the shared colour. For all the versions of Hackenbush, if the current player has no move, then the opposing player wins.\n</rules>\n</query>\n</task>",
        "solution": "(game \"Hackenbush\"\n    (players 2)\n    (equipment\n        {\n            (board\n                (graph\n                    vertices:{\n                        {0 0} {2 0} {4 0} {6 0} {8 0} {10 0} {15 0} {4 2}\n                        {4 4} {6 4} {3 5} {4 6} {10 2} {10 4} {8 4} {12 5}\n                        {10 6}\n                    }\n                    edges:{\n                        {0 1} {1 2} {2 3} {4 3} {4 5} {6 5} {2 7} {7 8} {7 9}\n                        {8 10} {8 11} {5 12} {12 14} {12 13} {13 15} {13 16}\n                    }\n                )\n                use:Edge\n            )\n            (piece \"Marker\" Each)\n            (piece \"Disc\" Shared)\n            (piece \"Cross\" Neutral)\n            (regions All (expand (sites Bottom)))\n        }\n    )\n    (rules\n        (start\n            {\n                (set Neutral Edge (sites Bottom))\n                (set\n                    Shared\n                    Edge\n                    (difference (sites Board Edge) (sites {0 1 2 3 4 5}))\n                )\n            }\n        )\n        (play\n            (move\n                Remove\n                (sites Occupied by:Shared)\n                (then\n                    (forEach\n                        Site\n                        (sites Incident Edge of:Edge at:(last To))\n                        (if\n                            (=\n                                0\n                                (count\n                                    Sites\n                                    in:(intersection\n                                        (sites Bottom)\n                                        (sites\n                                            Group\n                                            Edge\n                                            at:(site)\n                                            if:(is Occupied (to))\n                                        )\n                                    )\n                                )\n                            )\n                            (forEach\n                                Site\n                                (sites Group Edge at:(site))\n                                (remove Edge (site))\n                            )\n                        )\n                    )\n                )\n            )\n        )\n        (end (if (no Moves Mover) (result Next Win)))\n    )\n)"
    }
]